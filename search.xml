<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用户协议</title>
      <link href="/zh-cn/uncategorized/yonghuxieyi.html"/>
      <url>/zh-cn/uncategorized/yonghuxieyi.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>重要提示：</strong><br>请您仔细阅读以下条款，并确认您已完全理解本协议之规定，尤其是免除及限制责任的条款、知识产权条款、法律适用及争议解决条款。</p><p>若您对本声明或本协议任何条款有异议，请停止注册或使用Soyl（soyl.tech，包括手机、电脑等移动设备客户端，下同）所提供的全部服务。</p><p><strong>一、协议的接受、变更与补充</strong><br>1、本协议是用户 (自然人、法人或社会团体)与Soyl Liu之间关于“轻启药箱”软件产品（以下简称“本软件产品”）的法律协议。一旦安装、复制或以其他方式使用本软件产品，即表示同意接受协议各项条件的约束。如果用户不同意协议的条件，请不要使用本软件产品。</p><p>2、Soyl Liu有权利对本协议进行修改，协议修改后，将通过在相关页面公告或发送通知等方式公布修改的内容，修改后的协议一经公布即有效的代替原协议。如果您不同意本协议的修改，请立即停止访问或使用本网站或取消已经获得的服务；如果您选择继续访问或使用本网站，则视为您已接受本协议的修改。</p><p>3、签署的本协议所列明的条款，并不能完全涵盖您与soyl.tech之间所有的权利和义务。因此，Soyl Liu不定期公布的其他声明、规则等均视为本协议之补充协议，为本协议不可分割的组成部分，与本协议具有同等法律效力。</p><p>4、如本协议与 soyl.tech 平台其它协议条款不一致，以其它协议条款内容为准。</p><p><strong>二、用户个人信息</strong><br><strong>1、个人信息的保护</strong><br>(1)保护用户个人信息及个人隐私是轻启药箱的基本原则之一。</p><p>(2)您在注册帐号或使用轻启药箱服务的过程中，需要填写一些必要的信息。若国家法律法规有特殊规定的，您可能还需要填写真实的身份信息。若您填写的信息不完整，可能无法注册帐户，或在使用轻启药箱服务过程中受到限制。</p><p>(3)我们将尽一切可能采取适当的技术手段，保证您可以访问、更新和更正自己的注册信息或使用我们的服务时提供的其他个人信息，但出于安全性和身份识别（如找回密码服务）的考虑，您可能无法修改注册时提供的初始注册信息及其他验证信息。</p><p>(4)轻启药箱将运用各种安全技术和程序建立完善的管理制度来保护您的个人信息，以免遭受未经授权的访问、使用或披露。</p><p>(5)未经您的同意，轻启药箱不会向轻启药箱以外的任何公司、组织和个人披露您的个人信息，但法律法规另有规定的除外。</p><p>(6)轻启药箱非常重视对未成年人个人信息的保护，若未成年人（尤其是十岁以下）希望得以使用轻启药箱提供的服务，必须得到父母（监护人）的同意。</p><p>(7)轻启药箱将通过技术手段、强化内部管理等办法充分保护用户的个人隐私信息，保证不对外公开或向第三方披露或提供用户注册资料及用户在使用网络服务时存储在soyl.tech平台、服务器或数据库的非公开内容和信息，但下列情况除外：</p><ol><li>事先获得用户的授权；</li><li>根据有关的法律法规要求；</li><li>按照相关政府主管部门和司法机关的要求；</li><li>为维护社会公众的利益；</li><li>为维护轻启药箱的合法权益。</li></ol><p><strong>2、个人信息的收集</strong><br>轻启药箱在提供服务时，可能会收集、储存和使用下列与您有关的信息。如果您不提供相关信息，可能无法注册成为我们的用户或无法享受我们提供的某些服务，或者无法达到相关服务拟达到的效果。<br>(1) 您提供的信息</p><ol><li>您在注册帐户或使用轻启药箱的服务时，向我们提供的相关个人信息，包括但不限于真实姓名、证件信息、电话号码、地址、电子邮件等；</li><li>您通过轻启药箱的服务向其他方提供的共享信息，以及您使用我们的服务时所储存的信息。</li></ol><p>(2)我们获取的您的信息<br>您使用轻启药箱服务时我们可能收集如下信息：使用轻启药箱服务时，系统可能通过cookies、web beacon或其他方式自动采集的技术信息，包括：</p><ol><li>设备或软件信息，包括但不限于您的移动设备、网页浏览器或用于接入我们服务的其他程序所提供的配置信息、您的IP地址、位置信息、设备存储和移动设备所用的版本和设备识别码；</li><li>在使用我们服务时搜索或浏览的信息，包括但不限于您浏览过的文章、搜索的关键词，以及您在使用我们服务时浏览或要求提供的其他信息和内容详情；</li><li>有关您曾使用的移动应用（APP）和其他软件的信息，以及您曾经使用该等移动应用和软件的信息。</li></ol><p><strong>3、个人信息的使用</strong><br>(1)我们可能将在向您提供服务的过程之中所收集的信息用作下列用途：</p><ol><li>向您提供服务；</li><li>在我们提供服务时，用于身份验证、客户服务、安全防范、诈骗监测、存档和备份用途，确保我们向您提供的产品和服务的安全性；</li><li>帮助我们设计新服务，改善我们现有服务；</li><li>使我们更加了解您如何接入和使用我们的服务，从而针对性地回应您的个性化需求，例如个性化的帮助服务和指示，或对您和其他用户作出其他方面的回应；</li><li>软件认证或管理软件升级；</li><li>让您参与有关我们产品和服务的调查。</li></ol><p><strong>(2)为了让您有更好的体验，也为了改善我们的服务，在符合相关法律法规的前提下，我们可能将通过某一项服务收集信息或向第三方提供用户的非个人隐私信息的方式，用于我们的其他服务。例如，在您使用我们的一项服务时所收集的信息，可能会用于向您提供特定内容，或向您展示与您相关的、非普遍推送的信息。</strong></p><p><strong>4、隐私政策</strong><br>我们非常重视您的个人信息保护，依据最新的监管要求上线并更新了轻启药箱 <a href="https://soyl.tech">《隐私政策》</a></p><p>该政策将帮助您了解以下内容：<br>1、 我们如何收集和使用您的个人信息<br>2、 我们如何使用 Cookie<br>3、 您的个人信息如何存储以及在全球范围转移<br>4、 我们如何共享、转让、公开披露您的个人信息<br>5、 我们如何保护您的个人信息<br>6、 您的权利<br>7、 未成年人条款<br>8、 本隐私政策时效及如何更新<br>9、 如何联系我们<br>10、其他</p><p>本隐私政策适用于「soyl.tech」的所有相关服务，请在使用我们的产品（或服务）前，仔细阅读并了解本《隐私政策》，我们会适时对隐私政策进行修订，请以该协议为准。</p><p><strong>四、轻启药箱的服务</strong></p><p><strong>1、轻启药箱的服务</strong><br>轻启药箱是一款药箱类APP。轻启药箱向用户提供但不限于以下服务：药品信息的收集、整理、删除。轻启药箱有权对前述服务内容进行增减或调整。除非本协议另有其它明示规定，轻启药箱增加或强化目前本服务的任何新功能，包括所推出的新产品，均受本使用协议之规范。</p><p><strong>2、设备</strong><br>(1) 您应当理解，您使用轻启药箱的服务需自行准备与相关服务有关的终端设备（如电脑、调制解调器等装置），并承担所需的费用（如电话费、上网费等费用）。<br>(2) 您理解并同意，您使用本服务时会耗用您的终端设备和带宽等资源。</p><p><strong>3、广告</strong><br>(1) 您同意轻启药箱可以在提供服务的过程中自行或由第三方广告商向您发送广告、推广或宣传信息（包括商业与非商业信息），其方式和范围可不经向您特别通知而变更。<br>(2) 轻启药箱依照法律的规定对第三方广告商履行相关义务，您应当自行判断广告信息的真实性并为自己的判断行为负责，除法律明确规定外，您因依该广告信息进行的交易或前述广告商提功内容而遭受的损失或损害轻启药箱不承担责任。<br>(3) 您同意，对轻启药箱服务中出现的广告信息，您应审慎判断其真实性和可靠性，除法律明确规定外，您应对依该广告信息进行的交易负责。<br>(4) 您同意，所有对您收取费用的服务或功能，均不能免除您接受轻启药箱所提供的广告。因为这是轻启药箱为所有用户提供综合服务的有效对价，您阅读本协议即视为对该规则的理解和接受。</p><p><strong>六、软件产品保护条款</strong></p><p>(1) 本软件产品之著作权及其它知识产权等相关权利或利益（包括但不限于现已取得或未来可取得之著作权、专利权、商标权、营业秘密等）皆为Soyl Liu所有。本软件产品受中华人民共和国版权法及国际版权条约和其他知识产权法及条约的保护。用户仅获得本软件产品的非排他性使用权<br>(2) 用户不得：删除本软件及其他副本上一切关于版权的信息；对本软件进行反向工程，如反汇编、反编译等；<br>(3) 本软件产品以现状方式提供，Soyl Liu不保证本软件产品能够或不能够完全满足用户需求，在用户手册、帮助文件、使用说明书等软件文档中的介绍性内容仅供用户参考，不得理解为对用户所做的任何承诺。Soyl Liu保留对软件版本进行升级，对功能、内容、结构、界面、运行方式等进行修改或自动更新的权利。</p><p>(4) 为了更好地服务于用户，或为了向用户提供具有个性的信息内容的需要，本软件产品可能会收集、传播某些信息，但Soyl Liu承诺不向未经授权的第三方提供此类信息，以保护用户隐私。</p><p>(5) Soyl Liu定义的信息内容包括：文字、软件、声音；本公司为用户提供的商业信息，所有这些内容受版权、商标权、和其它知识产权和所有权法律的保护。所以，用户只能在本公司授权下才能使用这些内容，而不能擅自复制、修改、编撰这些内容、或创造与内容有关的衍生产品。</p><p>(6) 如果您未遵守本协议的任何一项条款，Soyl Liu有权立即终止本协议，并保留通过法律手段追究责任。</p><p><strong>六、违法行为</strong><br>1、 您在使用本服务时须遵守法律法规，不得利用本服务从事违法违规行为，以及不得利用轻启药箱服务制作、上载、复制、发布、传播或者转载如下内容，包括但不限于：<br>(1) 反对宪法所确定的基本原则的；<br>(2) 危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的；<br>(3) 损害国家荣誉和利益的；<br>(4) 煽动民族仇恨、民族歧视，破坏民族团结的；<br>(5) 破坏国家宗教政策，宣扬邪教和封建迷信的；<br>(6) 散布谣言，扰乱社会秩序，破坏社会稳定的；<br>(7) 散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪的；<br>(8) 侮辱或者诽谤他人，侵害他人合法权益的；<br>(9) 含有法律、行政法规禁止的其他内容的信息。</p><p>2、 如果您违反了本条约定，相关国家机关或机构可能会对您提起诉讼、罚款或采取其他制裁措施，并要求轻启药箱给予协助。造成轻启药箱或第三方损害的，您应依法予以赔偿，轻启药箱不承担任何责任。</p><p>3、 如果轻启药箱发现或收到他人举报您发布的信息违反本条约定，轻启药箱有权进行独立判断并采取技术手段予以删除、屏蔽或断开链接。同时，轻启药箱有权视用户的行为性质，采取包括但不限于暂停或终止服务，限制、冻结或终止账号使用，追究法律责任等措施。</p><p>4、 您违反本条约定，导致任何第三方损害的，您应当独立承担责任；轻启药箱因此遭受损失的，您也应当一并赔偿。</p><p>5、 违反本条约定，视为您的严重违约，轻启药箱可以中止对您的服务，解除双方间的服务协议和法律关系，且无需退还您所支付的费用（如有），视为您支付轻启药箱的违约金，如不足以弥补轻启药箱的损失的，轻启药箱还可通过其他法律途径向您追索。</p><p><strong>七、青少年用户特别提示</strong><br>青少年用户必须遵守全国青少年网络文明公约：<br>要善于网上学习，不浏览不良信息；要诚实友好交流，不侮辱欺诈他人；要增强自护意识，不随意约会网友；要维护网络安全，不破坏网络秩序；要有益身心健康，不沉溺虚拟时空。</p><p><strong>八、 不可抗力与免责</strong><br>1、您理解并同意，在使用轻启药箱服务的过程中，可能会遇到不可抗力等风险因素，使轻启药箱提供的服务发生中断。不可抗力是指不能预见、不能克服并不能避免且对一方或双方造成重大影响的客观事件，包括但不限于自然灾害如洪水、地震、瘟疫流行和风暴等，以及社会事件如战争、动乱、政府行为等。出现上述情况时，soyl.tech将努力在第一时间与相关单位配合，及时进行修复，但是由此给您造成的损失，soyl.tech在法律允许的范围内免责。</p><p>2、在法律允许的范围内，soyl.tech对以下情形导致的服务中断或受阻不承担责任：<br>(1) 受到计算机病毒、木马或其他恶意程序、黑客攻击的破坏；<br>(2) 用户或轻启药箱的电脑软件、系统、硬件和通信线路出现故障；<br>(3) 用户操作不当；<br>(4) 用户通过非轻启药箱授权的方式使用轻启药箱服务；<br>(5) 其他轻启药箱无法控制或合理预见的情形。</p><p>3、您理解并同意，在使用轻启药箱服务的过程中，可能会遇到网络信息或其他用户行为带来的风险，轻启药箱不对非轻启药箱发布的任何信息的真实性、适用性、合法性承担责任，也不对因侵权行为给您造成的损害负责。这些风险包括但不限于：<br>(1) 来自他人匿名或冒名的含有威胁、诽谤、令人反感或非法内容的信息；<br>(2) 因使用本协议项下的服务，遭受他人误导、欺骗或其他导致或可能导致的任何心理、生理上的伤害以及经济上的损失；<br>(3) 其他因网络信息或用户行为引起的风险。</p><p>4、您理解并同意，轻启药箱提供的服务并非为某些特定目的（包括但不限于核设施、军事用途、医疗设施、交通通讯等重要领域）而设计，如果因为软件或服务的原因导致上述操作失败而带来的人员伤亡、财产损失和环境破坏等，soyl.tech不承担法律责任。</p><p>5、soyl.tech依据本协议约定获得处理违法违规内容的权利，该权利不构成soyl.tech的义务或承诺，soyl.tech不能保证及时发现违法行为或进行相应处理。</p><p>6、在任何情况下，您不应轻信借款、索要密码或其他涉及财产的网络信息。涉及财产操作的，请一定先核实对方身份，并请经常留意轻启药箱或其他部门发布的有关防范诈骗犯罪的提示。</p><p>7、用户在soyl.tech发表的内容仅表明其个人的立场和观点，并不代表soyl.tech的立场或观点。作为内容的发表者，用户需自行对所发表内容负责，因所发表内容引发的一切纠纷，由该内容的发表者承担全部法律及连带责任；作为读者，用户应当自行对所看到的文章等内容进行甄别，并承担依照该等内容操作所带来的一切后果。soyl.tech不承担任何法律及连带责任。</p><p><strong>九、协议的生效与修改</strong><br>1、 您进入轻启药箱并使用轻启药箱的服务即视为您已阅读本协议并接受本协议的约束。<br>2、 轻启药箱有权在必要时修改本协议条款，您可以在相关服务页面查阅最新版本的协议条款。<br>3、 本协议条款变更后，如果您继续使用轻启药箱提供的服务，即视为您已接受修改后的协议。如果您不接受修改后的协议，应当退出轻启药箱并停止使用轻启药箱提供的服务。</p><p><strong>十、 有效期及终止</strong><br>1、 除本协议约定终止之情形外，本协议将会一直有效。<br>2、 终止的情形：<br>(1) 如你书面通知soyl.tech不接受本协议或对其的修改，轻启药箱有权随时终止向你提供本功能。<br>(2) 因不可抗力因素导致你无法继续使用本功能或轻启药箱无法提供本功能的，soyl.tech有权随时终止协议<br>(3) 本协议约定的其他终止条件发生或实现的，soyl.tech有权随时终止向你提供本功能。<br>(4) 由于你违反本协议约定，轻启药箱依约终止向你提供本功能后，如你后续再直接或间接，或以他人名义注册使用本功能的，soyl.tech有权直接单方面暂停或终止提 供本功能。<br>(5) 协议生效期间如遇国家法律、法规、国家相关部门及电信运营商有新相关文件出台或政策环境产生变化，致使本协议之签订、履行基础产生根本性变化的。</p><p>3、 如本协议或本功能因为任何原因终止的，对于你的帐户中的全部数据或你因使用本功能而存储在soyl.tech服务器中的数据等任何信息，soyl.tech可将该等信息保留或删除，包括服务终止前你尚未完成的任何数据。</p><p>4、 如本协议或本功能因为任何原因终止的，你应自行处理好关于数据等信息的备份以及与你的用户之间的相关事项的处理等。</p><p><strong>十一、 其他</strong><br>1、 本协议的订立、执行和解释及争议的解决均应适用中华人民共和国法律。<br>2、 如双方就本协议内容或其执行发生任何争议，双方应尽量友好协商解决；协商不成时，任何一方均可向百度公司所在地北京市海淀区人民法院提起诉讼。<br>3、 如本协议中的任何条款无论因何种原因完全或部分无效或不具有执行力，本协议的其余条款仍应有效并且有约束力。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CloudKit 问题集锦</title>
      <link href="/zh-cn/uncategorized/cloudkit_question.html"/>
      <url>/zh-cn/uncategorized/cloudkit_question.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="字段识别"><a href="#字段识别" class="headerlink" title="字段识别"></a>字段识别</h2><p><a href="https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitQuickStart/CreatingaSchemabySavingRecords/CreatingaSchemabySavingRecords.html#//apple_ref/doc/uid/TP40014987-CH3-SW4" target="_blank" rel="noopener">Apple Developer</a></p><table><thead><tr><th align="center">CloudKit</th><th align="center">Class</th></tr></thead><tbody><tr><td align="center">String(list)</td><td align="center">NSArray</td></tr><tr><td align="center">String</td><td align="center">NSString</td></tr><tr><td align="center">Asset</td><td align="center">CKAsset</td></tr><tr><td align="center">Bytes</td><td align="center">NSData</td></tr><tr><td align="center">Date/Time</td><td align="center">NSDate</td></tr><tr><td align="center">Double</td><td align="center">NSNumber</td></tr><tr><td align="center">Int(64)</td><td align="center">NSNumber</td></tr><tr><td align="center">Location</td><td align="center">CLLocation</td></tr><tr><td align="center">Reference</td><td align="center">CKReference</td></tr></tbody></table><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="Field-‘-createTime’-is-not-marked-sortable"><a href="#Field-‘-createTime’-is-not-marked-sortable" class="headerlink" title="Field ‘___createTime’ is not marked sortable"></a>Field ‘___createTime’ is not marked sortable</h3><p>确保CloudKit的Schema中Indexes设置Sortable </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>URLSession</title>
      <link href="/zh-cn/uncategorized/URLSession.html"/>
      <url>/zh-cn/uncategorized/URLSession.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="httpBody"><a href="#httpBody" class="headerlink" title="httpBody"></a>httpBody</h4><h5 id="自定义格式"><a href="#自定义格式" class="headerlink" title="自定义格式"></a>自定义格式</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHttp</span><span class="params">(params: [String:<span class="keyword">Any</span>])</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    request.httpBody = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.data(withJSONObject: params, options: .prettyPrinted)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> params = [<span class="string">"id"</span>:dataApiDrugs.descriptionID] <span class="keyword">as</span> [<span class="type">String</span>:<span class="type">Any</span>]</span><br><span class="line"><span class="keyword">self</span>.postHttp(url: <span class="string">"https://siboxapi.herokuapp.com/description/select"</span>, params: params)</span><br></pre></td></tr></table></figure><h5 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHttp</span><span class="params">(params: PostParm)</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    request.httpBody = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.data(withJSONObject: params, options: .prettyPrinted)</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        request.httpBody = <span class="keyword">try</span> <span class="type">JSONEncoder</span>().encode(parm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//api接口参数结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PostParm</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> myParam = <span class="type">PostParm</span>(id: dataApiDrugs.descriptionID)</span><br><span class="line"><span class="keyword">self</span>.postHttp(url: <span class="string">"https://siboxapi.herokuapp.com/description/select"</span>, params: myParam)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew命令</title>
      <link href="/zh-cn/uncategorized/homebrew.html"/>
      <url>/zh-cn/uncategorized/homebrew.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="Homebrew完美卸载软件及其依赖包"><a href="#Homebrew完美卸载软件及其依赖包" class="headerlink" title="Homebrew完美卸载软件及其依赖包"></a>Homebrew完美卸载软件及其依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew tap beeftornado/rmtree</span><br><span class="line">brew rmtree git  #卸载git及其依赖安装包</span><br><span class="line">brew cleanup</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift CoreData @FetchRequest</title>
      <link href="/zh-cn/Swift/Core-Data/FetchRequest/swift_coredata_fetchrequest.html"/>
      <url>/zh-cn/Swift/Core-Data/FetchRequest/swift_coredata_fetchrequest.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">FetchRequest</span>(</span><br><span class="line">    entity: <span class="type">UserInfo</span>.entity(),</span><br><span class="line">    sortDescriptors: [</span><br><span class="line">        <span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">UserInfo</span>.name, ascending: <span class="literal">true</span>)</span><br><span class="line">    ],</span><br><span class="line">    predicate: <span class="type">NSPredicate</span>(format: <span class="string">"name == %@"</span>, <span class="string">"Lilei"</span>))</span><br><span class="line">) <span class="keyword">var</span> userinfoes: <span class="type">FetchedResults</span>&lt;<span class="type">UserInfo</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="NSPredicate"><a href="#NSPredicate" class="headerlink" title="NSPredicate"></a>NSPredicate</h4><blockquote><p>描述了一个过滤器，我们将使用它来决定显示哪些结果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">"name == %@"</span>, <span class="string">"LiLei"</span>)</span><br></pre></td></tr></table></figure><h4 id="NSSortDescriptor"><a href="#NSSortDescriptor" class="headerlink" title="NSSortDescriptor"></a>NSSortDescriptor</h4><blockquote><p>告诉我们要在哪个字段上进行排序，以及我们要它递增还是递减</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">UserInfo</span>.name, ascending: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> Core Data </category>
          
          <category> FetchRequest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUI  Picker</title>
      <link href="/zh-cn/SwiftUI/swiftui_picker.html"/>
      <url>/zh-cn/SwiftUI/swiftui_picker.html</url>
      
        <content type="html"><![CDATA[<p>Picker 会根据平台显示所要展示的效果</p><a id="more"></a><h2 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Picker</span>&lt;<span class="title">Label</span>, <span class="title">SelectionValue</span>, <span class="title">Content</span>&gt; <span class="title">where</span> <span class="title">Label</span> : <span class="title">View</span>, <span class="title">SelectionValue</span> : <span class="title">Hashable</span>, <span class="title">Content</span> : <span class="title">View</span></span></span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="Picker基础用法"><a href="#Picker基础用法" class="headerlink" title="Picker基础用法"></a>Picker基础用法</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strengths = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line">@<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedStrength = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $selectedStrength, label: <span class="type">Text</span>(<span class="string">"Strength"</span>)) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span> ..&lt; strengths.<span class="built_in">count</span>) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="keyword">self</span>.strengths[$<span class="number">0</span>]).tag($<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Core Data中用法</span></span><br><span class="line"><span class="type">Button</span>(action: (&#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="type">User</span>(context: <span class="keyword">self</span>.managedObjectContext)</span><br><span class="line">    user.name = <span class="keyword">self</span>.selectedStrength</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.managedObjectContext.save()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="built_in">print</span>(error) &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="Picker中使用自定义结构体"><a href="#Picker中使用自定义结构体" class="headerlink" title="Picker中使用自定义结构体"></a>Picker中使用自定义结构体</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">ObservedObject</span> <span class="keyword">var</span> frequencies = <span class="type">DrugUserInfoes</span>()  <span class="comment">//吃药频率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(<span class="string">"服药频率"</span>, selection: $frequencies.drugEatInfoes) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="type">DrugUserInfoes</span>.<span class="type">DrugEatInfoes</span>.allCases, id: \.<span class="keyword">self</span>) &#123; season <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(season.rawValue).tag(season)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrugUserInfoes</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DrugEatInfoes</span>: <span class="title">String</span>, <span class="title">CaseIterable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> day1eat1 = <span class="string">"一天一次"</span></span><br><span class="line">        <span class="keyword">case</span> day1eat2 = <span class="string">"一天两次"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置默认选择项</span></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> drugEatInfoes = <span class="type">DrugEatInfoes</span>.day1eat2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Core Data中用法</span></span><br><span class="line"><span class="type">Button</span>(action: (&#123;</span><br><span class="line">    <span class="keyword">let</span> eatInfo = <span class="type">EatInfo</span>(context: <span class="keyword">self</span>.managedObjectContext)</span><br><span class="line">    eatInfo.frequency = <span class="keyword">self</span>.frequencies.drugEatInfoes.rawValue</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.managedObjectContext.save()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="built_in">print</span>(error) &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="Picker中使用API-Json"><a href="#Picker中使用API-Json" class="headerlink" title="Picker中使用API Json"></a>Picker中使用API Json</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">ObservedObject</span> <span class="keyword">var</span> networkingManager = <span class="type">NetworkingManager</span>() <span class="comment">//读取API数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="comment">//请求API返回药品列表</span></span><br><span class="line">        <span class="type">Picker</span>(selection: $selection, label: <span class="type">Text</span>(<span class="string">"药品名称"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span> ..&lt; networkingManager.dataList.data.<span class="built_in">count</span>, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="keyword">self</span>.networkingManager.dataList.data[$<span class="number">0</span>].name).tag($<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Core Data中用法</span></span><br><span class="line"><span class="type">Button</span>(action: (&#123;</span><br><span class="line">    <span class="keyword">let</span> eatInfo = <span class="type">EatInfo</span>(context: <span class="keyword">self</span>.managedObjectContext)</span><br><span class="line">    eatInfo.name = <span class="keyword">self</span>.networkingManager.dataList.data[<span class="keyword">self</span>.selection].name</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.managedObjectContext.save()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="built_in">print</span>(error) &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h4><p>SwiftUI的DatePicker视图类似UIDatePicker，并带有各种各样的选择来控制它的外观和运行。 像所有存储值的控件一样，它确实需要绑定到应用程序中的某种状态。</p><p>例如，这创建了一个绑定到生成日期属性的日期选项，允许用户先选择任何日期，然后显示日期选项的值，因为该选项设置时即可：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dateFormatter: <span class="type">DateFormatter</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter = <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateStyle = .long</span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> birthDate = <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">DatePicker</span>(selection: $birthDate, <span class="keyword">in</span>: ...<span class="type">Date</span>(), displayedComponents: .date) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Select a date"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Date is \(birthDate, formatter: dateFormatter)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在其他控件中的用法"><a href="#在其他控件中的用法" class="headerlink" title="在其他控件中的用法"></a>在其他控件中的用法</h3><h4 id="翻页选择"><a href="#翻页选择" class="headerlink" title="翻页选择"></a>翻页选择</h4><blockquote><p>嵌套在Form中，就会有NavigationView的显示效果</p></blockquote><p><img src="https://i.loli.net/2020/03/11/fjDtIvw7aqnGpAZ.png" alt=""><br><img src="https://i.loli.net/2020/03/11/XWYrwHPRnMVsqh3.png" alt=""></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users1 = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $gender, label: <span class="type">Text</span>(<span class="string">"性别"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"女"</span>).tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"男"</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;.pickerStyle(<span class="type">SegmentedPickerStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准样式"><a href="#标准样式" class="headerlink" title="标准样式"></a>标准样式</h3><blockquote><p>.pickerStyle</p></blockquote><ol><li>DefaultPickerStyle</li><li>PopUpButtonPickerStyle（macOS）</li><li>RadioGroupPickerStyle（macOS）</li><li>SegmentedPickerStyle（macOS、iOS、tvOS、Mac Catalyst）</li><li>WheelPickerStyle（iOS、watchOS、Mac Catalyst）</li></ol><h4 id="SegmentedPickerStyle"><a href="#SegmentedPickerStyle" class="headerlink" title="SegmentedPickerStyle"></a>SegmentedPickerStyle</h4><blockquote><p>横向选择</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users1 = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $gender, label: <span class="type">Text</span>(<span class="string">"性别"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"女"</span>).tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"男"</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;.pickerStyle(<span class="type">SegmentedPickerStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="iOS效果"><a href="#iOS效果" class="headerlink" title="iOS效果"></a>iOS效果</h5><p><img src="https://i.loli.net/2020/03/11/YJCztwg76jEdy5S.png" alt=""></p><h5 id="macOS效果"><a href="#macOS效果" class="headerlink" title="macOS效果"></a>macOS效果</h5><h5 id="tvOS效果"><a href="#tvOS效果" class="headerlink" title="tvOS效果"></a>tvOS效果</h5><h5 id="Mac-Catalyst效果"><a href="#Mac-Catalyst效果" class="headerlink" title="Mac Catalyst效果"></a>Mac Catalyst效果</h5><h4 id="WheelPickerStyle"><a href="#WheelPickerStyle" class="headerlink" title="WheelPickerStyle"></a>WheelPickerStyle</h4><blockquote><p>竖向选择</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users1 = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $gender, label: <span class="type">Text</span>(<span class="string">"性别"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"女"</span>).tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"男"</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;.pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="iOS效果-1"><a href="#iOS效果-1" class="headerlink" title="iOS效果"></a>iOS效果</h5><p><img src="https://i.loli.net/2020/03/11/HBSDuMejJpG3O4U.png" alt=""></p><h5 id="macOS效果-1"><a href="#macOS效果-1" class="headerlink" title="macOS效果"></a>macOS效果</h5><h5 id="tvOS效果-1"><a href="#tvOS效果-1" class="headerlink" title="tvOS效果"></a>tvOS效果</h5><h5 id="Mac-Catalyst效果-1"><a href="#Mac-Catalyst效果-1" class="headerlink" title="Mac Catalyst效果"></a>Mac Catalyst效果</h5><h4 id="PopUpButtonPickerStyle"><a href="#PopUpButtonPickerStyle" class="headerlink" title="PopUpButtonPickerStyle"></a>PopUpButtonPickerStyle</h4><h4 id="RadioGroupPickerStyle"><a href="#RadioGroupPickerStyle" class="headerlink" title="RadioGroupPickerStyle"></a>RadioGroupPickerStyle</h4><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="labelsHidden"><a href="#labelsHidden" class="headerlink" title=".labelsHidden()"></a>.labelsHidden()</h4><blockquote><p>隐藏标签</p></blockquote><p>这仍然创造了标签，但现在却没有显示出来。 因此，您可以将Picker放入VStack中，并添加您自己选择的标签。<br>提示：如果你想要隐藏所有标签，你可以将标签 .labelsHidden() 修改符应用到VStack或你所使用的最外层容器中。</p>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SwiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode如何进行无线真机调试</title>
      <link href="/zh-cn/uncategorized/xcode_iphone_test.html"/>
      <url>/zh-cn/uncategorized/xcode_iphone_test.html</url>
      
        <content type="html"><![CDATA[<p>Xcode 进行真机调试</p><a id="more"></a><h2 id="登陆Xcode-Team"><a href="#登陆Xcode-Team" class="headerlink" title="登陆Xcode Team"></a>登陆Xcode Team</h2><p><img src="https://i.loli.net/2020/02/24/5RLKc7hfMiqXFGA.png" alt=""></p><h2 id="链接手机"><a href="#链接手机" class="headerlink" title="链接手机"></a>链接手机</h2><p>Xcode菜单导航栏，选择 Window - Devices and Simulators</p><p>数据线链接手机，验证后会自动出现该手机信息，选中Connect via network 使手机可以无线测试</p><p><img src="https://i.loli.net/2020/02/24/DflwOk9cFdg3hUN.png" alt=""></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>iOS工程中，选择该手机调试</p><p><img src="https://i.loli.net/2020/02/24/vrUTLD4mw7GKIPX.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Terminal（终端）使用SS代理进行连接</title>
      <link href="/zh-cn/APP/Terminal/Shadowsocks/terminal_ss.html"/>
      <url>/zh-cn/APP/Terminal/Shadowsocks/terminal_ss.html</url>
      
        <content type="html"><![CDATA[<p>SS APP一般是Web代理，终端无法使用，需要单独配置代理</p><a id="more"></a><h2 id="Shadowsocks-设置"><a href="#Shadowsocks-设置" class="headerlink" title="Shadowsocks 设置"></a>Shadowsocks 设置</h2><p>打开HTTP代理设置菜单，查看SS 的HTTP 代理端口，一般为1087</p><h2 id="编辑zshrc文件"><a href="#编辑zshrc文件" class="headerlink" title="编辑zshrc文件"></a>编辑zshrc文件</h2><p>添加以下内容到 <code>zshrc</code> 中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias proxy-on='export http_proxy=127.0.0.1:1087;export https_proxy=$http_proxy'</span><br><span class="line">alias proxy-off='unset http_proxy;unset https_proxy'</span><br></pre></td></tr></table></figure><p>保存退出<br>生效配置 <code>source ~/.zshrc</code></p><ol><li>开启 <code>proxy-on</code></li><li>关闭 <code>proxy-off</code></li></ol><blockquote><p>只在当前标签页生效，重新打开终端或新标签页需要重新执行  <code>proxy-on</code></p></blockquote><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>对比开启前后的IP变化</p><blockquote><p>curl cip.cc</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IP: 27.198.***</span><br><span class="line">地址: 中国  山东  济宁</span><br><span class="line">运营商: 联通</span><br><span class="line">数据二: 山东省济宁市 | 联通</span><br><span class="line">数据三: 中国山东省济宁市 | 联通</span><br><span class="line">URL: http://www.cip.cc/27.198.***</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IP: 128.1.***</span><br><span class="line">地址: 美国  加利福尼亚州  洛杉矶</span><br><span class="line">运营商: zenlayer.com</span><br><span class="line">数据二: 美国</span><br><span class="line">数据三: 美国加利福尼亚洛杉矶 | 层峰网络</span><br><span class="line">URL: http://www.cip.cc/128.1.***</span><br></pre></td></tr></table></figure><blockquote><p>注意不要连续curl，响应时间会有延迟</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Terminal </category>
          
          <category> Shadowsocks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决docker-compose 命令不存在、未找到命令错误</title>
      <link href="/zh-cn/APP/Docker/docker-compose-no.html"/>
      <url>/zh-cn/APP/Docker/docker-compose-no.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装扩展源"><a href="#安装扩展源" class="headerlink" title="安装扩展源"></a>安装扩展源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install epel-release</span><br></pre></td></tr></table></figure><h4 id="安装python-pip模块"><a href="#安装python-pip模块" class="headerlink" title="安装python-pip模块"></a>安装python-pip模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install python-pip</span><br></pre></td></tr></table></figure><h4 id="查看docker-compose版本"><a href="#查看docker-compose版本" class="headerlink" title="查看docker-compose版本"></a>查看docker-compose版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><blockquote><p> 提示未找到命令</p></blockquote><h4 id="通过以命令进行安装"><a href="#通过以命令进行安装" class="headerlink" title="通过以命令进行安装"></a>通过以命令进行安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin/</span><br><span class="line"></span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64</span><br><span class="line"></span><br><span class="line">rename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="再次查看"><a href="#再次查看" class="headerlink" title="再次查看"></a>再次查看</h4><blockquote><p>docker-compose version</p></blockquote><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li>compose以守护进程模式运行加-d选项<blockquote><p>docker-compose up -d</p></blockquote></li><li>查看有哪些服务<blockquote><p>docker-compose ps</p></blockquote></li><li>查看compose日志<blockquote><p>docker-compose logs web<br>docker-compose logs redis</p></blockquote></li><li>停止compose服务<blockquote><p>docker-compose stop<br>docker-compose ps</p></blockquote></li><li>重启compose服务<blockquote><p>docker-compose restart<br>docker-compose ps</p></blockquote></li><li>kill compose服务<blockquote><p>docker-compose ps<br>docker-compose kill</p></blockquote></li><li>删除compose服务<blockquote><p>docker-compose rm</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS  brew安装redis</title>
      <link href="/zh-cn/APP/Redis/macos_brew_redis.html"/>
      <url>/zh-cn/APP/Redis/macos_brew_redis.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>安装完成后写上下面的配置，目的是为了关闭homebrew每次检查更新（加快速度）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">关闭：</span><br><span class="line">export HOMEBREW_NO_AUTO_UPDATE=true</span><br><span class="line">打开：</span><br><span class="line">export HOMEBREW_NO_AUTO_UPDATE=false</span><br></pre></td></tr></table></figure><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li>启动Redis<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后台启动</span></span><br><span class="line">redis-server  &amp;</span><br></pre></td></tr></table></figure></li><li>关闭Redis<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure></li><li>验证程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure> 看到pong就代表成功了</li></ol><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/etc/redis.conf</span><br><span class="line">修改 daemonize no 为 daemonize yes 默认启动就后台运行</span><br><span class="line">其中修改密码是 requirepass foobared =&gt; requirepass pwdcode</span><br><span class="line">这里把密码设置成了pwdcode</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 插件管理器 Vundle 安装与配置</title>
      <link href="/zh-cn/uncategorized/vim_vundle.html"/>
      <url>/zh-cn/uncategorized/vim_vundle.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件管理器-Vundle"><a href="#安装插件管理器-Vundle" class="headerlink" title="安装插件管理器 Vundle"></a>安装插件管理器 Vundle</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改<code>~/.vimrc</code></p><blockquote><p><a href="https://raw.githubusercontent.com/HeySoyl/MyVimrc/master/vimrc" target="_blank" rel="noopener">https://raw.githubusercontent.com/HeySoyl/MyVimrc/master/vimrc</a></p></blockquote><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul><li>打开<code>vim</code>输入<code>:PluginInstall</code><ol><li><code>:PluginInstall</code>命令会安装在<code>.vimrc</code>文件中列出来的所有插件</li><li><code>:PluginInstall &lt;plugin-name&gt;</code> 安装指定的插件</li></ol></li><li>从命令行安装<code>vim +PluginInstall +qall</code></li></ul><h3 id="清理未用插件"><a href="#清理未用插件" class="headerlink" title="清理未用插件"></a>清理未用插件</h3><ul><li>打开vim输入<code>:PluginClean</code></li><li>从命令行安装<code>vim +:PluginClean</code></li></ul><h3 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h3><ul><li>打开vim输入<code>:PluginSearch &lt;text-list&gt;</code></li><li>从命令行安装<code>vim +:PluginSearch &lt;text-list&gt;</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MKit API数据库文档</title>
      <link href="/zh-cn/Swift/Vapor/APP/Mkit/mkit_api_data_doc.html"/>
      <url>/zh-cn/Swift/Vapor/APP/Mkit/mkit_api_data_doc.html</url>
      
        <content type="html"><![CDATA[<p>MKit APi 数据库说明文档</p><a id="more"></a><h2 id="药盒"><a href="#药盒" class="headerlink" title="药盒"></a>药盒</h2><blockquote><p><code>box</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">药材名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">药材图片</td></tr><tr><td align="center"><code>instructionID</code></td><td align="left">说明书</td><td align="left">TINYINT</td><td align="left"></td><td align="left">是</td><td align="left"></td></tr></tbody></table><h2 id="药材"><a href="#药材" class="headerlink" title="药材"></a>药材</h2><blockquote><p><code>meterials</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">药材名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">药材名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">药材图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">药材图片</td></tr><tr><td align="center"><code>category</code></td><td align="left">药材类别</td><td align="left">TINYINT</td><td align="left"><code>0</code>或<code>1</code></td><td align="left">是</td><td align="left"><code>0</code>中药或<code>1</code>西药</td></tr></tbody></table><h2 id="企业"><a href="#企业" class="headerlink" title="企业"></a>企业</h2><blockquote><p><code>enterprise</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">企业名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">企业名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">企业图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">企业图片</td></tr><tr><td align="center"><code>site</code></td><td align="left">生产地址</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">企业生产地址</td></tr><tr><td align="center"><code>logonSite</code></td><td align="left">注册地址</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">注册地址</td></tr><tr><td align="center"><code>phone</code></td><td align="left">生产电话</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">生产电话</td></tr><tr><td align="center"><code>fax</code></td><td align="left">传真</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">传真</td></tr><tr><td align="center"><code>webSite</code></td><td align="left">网址</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">网址</td></tr></tbody></table><h2 id="说明书"><a href="#说明书" class="headerlink" title="说明书"></a>说明书</h2><blockquote><p><code>instructions</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">说明书图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">说明书图片</td></tr><tr><td align="center"><code>category</code></td><td align="left">类别</td><td align="left">TINYINT</td><td align="left"><code>0</code>或<code>1</code></td><td align="left">是</td><td align="left"><code>0</code>中药或<code>1</code>西药</td></tr><tr><td align="center"><code>otc</code></td><td align="left">处方药</td><td align="left">TINYINT</td><td align="left"><code>0</code>或<code>1</code></td><td align="left">是</td><td align="left"><code>0</code>处方药或<code>1</code>甲类非处方药，<code>2</code>乙类非处方药</td></tr><tr><td align="center"><code>components</code></td><td align="left">成分</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>traits</code></td><td align="left">性状</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>adaptation</code></td><td align="left">适应症</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>reactions</code></td><td align="left">不良反应</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>no</code></td><td align="left">禁忌</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>attention</code></td><td align="left">注意事项</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>enterprisID</code></td><td align="left">生产企业</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> Vapor </category>
          
          <category> APP </category>
          
          <category> Mkit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Document </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MKit-API接口文档</title>
      <link href="/zh-cn/Swift/Vapor/APP/Mkit/mkit_api_doc.html"/>
      <url>/zh-cn/Swift/Vapor/APP/Mkit/mkit_api_doc.html</url>
      
        <content type="html"><![CDATA[<p>MKit APi 接口说明文档</p><a id="more"></a><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="药材获取列表"><a href="#药材获取列表" class="headerlink" title="药材获取列表"></a>药材获取列表</h3><p>根据版本获取药材列表，符合版本情况，则返回Redis缓存数据，否则更新缓存，并下放数据</p><ul><li><p>接口类型</p><blockquote><p>GET</p></blockquote></li><li><p>请求参数</p></li></ul><table><thead><tr><th align="center">字段</th><th align="left">类型</th><th align="left">名称</th><th align="left">必填项</th><th>功能</th></tr></thead><tbody><tr><td align="center"><code>AppVersion</code></td><td align="left">Int</td><td align="left">APP版本号</td><td align="left">是</td><td>当前客户端版本</td></tr><tr><td align="center"><code>DataVersion</code></td><td align="left">Int</td><td align="left">数据版本号</td><td align="left">是</td><td>高等于缓存版本不下放数据，低于缓存版本返回数据</td></tr></tbody></table><ul><li>返回字段</li></ul><table><thead><tr><th align="center">返回字段</th><th align="left">字段类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center"><code>status</code></td><td align="left">Int</td><td align="left">100 = 请求成功</td></tr><tr><td align="center"><code>message</code></td><td align="left">String</td><td align="left">描述</td></tr><tr><td align="center"><code>version</code></td><td align="left">Int</td><td align="left">版本号</td></tr></tbody></table><ul><li><p>返回事例</p><blockquote><p>不下放数据</p></blockquote>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">101</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">20190810</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"无需更新数据"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下放数据</p></blockquote>   <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"请求成功"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"icon"</span>: <span class="string">"Meterial icon:Optional(1)"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Meterial name:Optional(1)"</span>,</span><br><span class="line">      <span class="attr">"category"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">20190810</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="生产企业获取列表"><a href="#生产企业获取列表" class="headerlink" title="生产企业获取列表"></a>生产企业获取列表</h3>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> Vapor </category>
          
          <category> APP </category>
          
          <category> Mkit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Document </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同一台电脑添加多个ssh key</title>
      <link href="/zh-cn/Git/ssh_key.html"/>
      <url>/zh-cn/Git/ssh_key.html</url>
      
        <content type="html"><![CDATA[<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>同样的方式可以生成多个</p><blockquote><p>ssh-keygen -t rsa -C <a href="mailto:soyl@live.cn">soyl@live.cn</a></p></blockquote><p>执行命令ssh-keygen -t rsa -C email 创建github对应的sshkey，命名为id_rsa_github，密码123456</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/soyl/.ssh/id_rsa): id_rsa_github</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in id_rsa_github.</span><br><span class="line">Your public key has been saved in id_rsa_github.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:rZQO751cjfzzjDxJq5ZjI6pKKMWFlO6J+ZdvnWcra6M soyl@live.cn</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|  ..             |</span><br><span class="line">| ...             |</span><br><span class="line">| .. .            |</span><br><span class="line">| ...     o       |</span><br><span class="line">| +o.  . S .      |</span><br><span class="line">|o.o.   = . . o.  |</span><br><span class="line">|... .. .+.  +o.o |</span><br><span class="line">| ...o ..*o+o*o=o |</span><br><span class="line">|   ..+E++B==.+++o|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><h2 id="Config配置"><a href="#Config配置" class="headerlink" title="Config配置"></a>Config配置</h2><p>在.ssh目录创建config文件(无后缀名，就是为了映射）并完成相关配置(最核心的地方)</p><p>每个账号单独配置一个Host，每个Host要取一个别名，每个Host主要配置HostName和IdentityFile两个属性即可</p><ol><li><p>Host 名字可以取为自己喜欢的名字，不过这个会影响git相关命令，例如：<br> Host mygithub 这样定义的话，命令如下，即git@后面紧跟的名字改为mygithub</p><blockquote><p> git clone <a href="mailto:git@github.com">git@github.com</a>:HeySoyl/HeyAT-API.git<br> 就变成了<br> git clone git@mygithub:HeySoyl/HeyAT-API.git</p></blockquote></li><li><p>HostName 这个是真实的域名地址</p></li><li><p>IdentityFile 这里是id_rsa的地址</p></li><li><p>PreferredAuthentications配置登录时用什么权限认证–可设为publickey,password publickey,keyboard-interactive等</p></li><li><p>User 配置使用用户名</p></li></ol><p>配置文件如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> github.com的配置</span></span><br><span class="line">Host github.com               </span><br><span class="line">        HostName github.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        User HeySoyl</span><br><span class="line"><span class="meta">#</span><span class="bash"> code.aliyun.com的配置</span></span><br><span class="line">Host code.aliyun.com</span><br><span class="line">        HostName code.aliyun.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_aliyun</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        User Soyl</span><br></pre></td></tr></table></figure><h2 id="设置用户名"><a href="#设置用户名" class="headerlink" title="设置用户名"></a>设置用户名</h2><p>设置全局用户名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --user.name "yourname"</span><br><span class="line">git config --global --user.email "youremail"</span><br></pre></td></tr></table></figure><p>在仓库目录下设置局部用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config user.name "yourname"  </span><br><span class="line">git config user.email "youremail"</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vapor系列教程 - MySQL数据库</title>
      <link href="/zh-cn/Swift/Vapor/Vapor_MySQL_Use.html"/>
      <url>/zh-cn/Swift/Vapor/Vapor_MySQL_Use.html</url>
      
        <content type="html"><![CDATA[<p>Vapor默认使用的SQLite数据库</p><a id="more"></a><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vapor new Test</span><br></pre></td></tr></table></figure><h2 id="修改相关文件项"><a href="#修改相关文件项" class="headerlink" title="修改相关文件项"></a>修改相关文件项</h2><h3 id="Package-swift"><a href="#Package-swift" class="headerlink" title="Package.swift"></a>Package.swift</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"HeyAT"</span>,</span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: <span class="string">"https://github.com/vapor/vapor.git"</span>, from: <span class="string">"3.0.0"</span>),</span><br><span class="line">        .package(url: <span class="string">"https://github.com/vapor/crypto.git"</span>, from: <span class="string">"3.3.0"</span>),</span><br><span class="line">        .package(url: <span class="string">"https://github.com/vapor/fluent-mysql.git"</span>, from: <span class="string">"3.0.0"</span>)</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(name: <span class="string">"App"</span>, dependencies: [<span class="string">"FluentMySQL"</span>, <span class="string">"Crypto"</span>, <span class="string">"Vapor"</span>]),</span><br><span class="line">        .target(name: <span class="string">"Run"</span>, dependencies: [<span class="string">"App"</span>]),</span><br><span class="line">        .testTarget(name: <span class="string">"AppTests"</span>, dependencies: [<span class="string">"App"</span>])</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改configure-swift"><a href="#修改configure-swift" class="headerlink" title="修改configure.swift"></a>修改configure.swift</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> FluentMySQL</span><br><span class="line"><span class="keyword">import</span> Vapor</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Called before your application initializes.</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">configure</span><span class="params">(<span class="number">_</span> config: <span class="keyword">inout</span> Config, <span class="number">_</span> env: <span class="keyword">inout</span> Environment, <span class="number">_</span> services: <span class="keyword">inout</span> Services)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="comment">// Register providers first</span></span><br><span class="line">    <span class="keyword">try</span> services.register(<span class="type">FluentMySQLProvider</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Register routes to the router</span></span><br><span class="line">    <span class="keyword">let</span> router = <span class="type">EngineRouter</span>.<span class="keyword">default</span>()</span><br><span class="line">    <span class="keyword">try</span> routes(router)</span><br><span class="line">    services.register(router, <span class="keyword">as</span>: <span class="type">Router</span>.<span class="keyword">self</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Register middleware</span></span><br><span class="line">    <span class="keyword">var</span> middlewares = <span class="type">MiddlewareConfig</span>() <span class="comment">// Create _empty_ middleware config</span></span><br><span class="line">    <span class="comment">// middlewares.use(FileMiddleware.self) // Serves files from `Public/` directory</span></span><br><span class="line">    middlewares.use(<span class="type">ErrorMiddleware</span>.<span class="keyword">self</span>) <span class="comment">// Catches errors and converts to HTTP response</span></span><br><span class="line">    services.register(middlewares)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Configure a MySQL database</span></span><br><span class="line">    <span class="keyword">var</span> databases =  <span class="type">DatabasesConfig</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义mysql数据库配置参数的变量</span></span><br><span class="line">    <span class="keyword">let</span> mysqlHost: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> mysqlPort: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> mysqlDB: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> mysqlUser: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> mysqlPass: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> env == .development || env == .testing &#123;</span><br><span class="line">        <span class="comment">//线下环境使用的配置信息</span></span><br><span class="line">        mysqlHost = <span class="string">"127.0.0.1"</span></span><br><span class="line">        mysqlPort = <span class="number">3306</span></span><br><span class="line">        mysqlDB = <span class="string">"vapor"</span></span><br><span class="line">        mysqlUser = <span class="string">"root"</span></span><br><span class="line">        mysqlPass = <span class="string">"qiqi.loveAI001"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//生产环境，读取机器配置的配置，如果读取失败，则取默认值</span></span><br><span class="line">        mysqlHost = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_HOST"</span>) ?? <span class="string">"127.0.0.1"</span></span><br><span class="line">        mysqlPort = <span class="number">3306</span></span><br><span class="line">        mysqlDB = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_DB"</span>) ?? <span class="string">"vapor"</span></span><br><span class="line">        mysqlUser = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_USER"</span>) ?? <span class="string">"root"</span></span><br><span class="line">        mysqlPass = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_PASS"</span>) ?? <span class="string">"qiqi.loveAI001"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mysqlConfig = <span class="type">MySQLDatabaseConfig</span>(</span><br><span class="line">        hostname: mysqlHost,</span><br><span class="line">        port: mysqlPort,</span><br><span class="line">        username: mysqlUser,</span><br><span class="line">        password: mysqlPass,</span><br><span class="line">        database: mysqlDB,</span><br><span class="line">        transport: .unverifiedTLS)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mysql = <span class="type">MySQLDatabase</span>(config: mysqlConfig)</span><br><span class="line">    databases.add(database: mysql, <span class="keyword">as</span>: .mysql)</span><br><span class="line">    services.register(databases)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Migration配置</span></span><br><span class="line">    <span class="type">Business</span>.defaultDatabase = .mysql</span><br><span class="line">    <span class="keyword">var</span> migrations = <span class="type">MigrationConfig</span>()</span><br><span class="line">    migrations.add(model: <span class="type">Business</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    migrations.add(model: <span class="type">Instance</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    migrations.add(model: <span class="type">User</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    migrations.add(model: <span class="type">AccessToken</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开发环境填充测试数据</span></span><br><span class="line">    <span class="keyword">if</span> env == .development &#123;</span><br><span class="line">        migrations.add(migration: <span class="type">BusinessSeeder</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line"><span class="comment">//        migrations.add(migration: InstanceSeeder.self, database: .mysql)</span></span><br><span class="line">    &#125;</span><br><span class="line">    services.register(migrations)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     # 注册migrations命令</span></span><br><span class="line"><span class="comment">     - vapor run migrate: 执行migrate创建表，并执行seed构建测试数据</span></span><br><span class="line"><span class="comment">     - vapor run revert -all: 依照migrate创建表顺序，依次清空表数据后删除该表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> commandConfig = <span class="type">CommandConfig</span>.<span class="keyword">default</span>()</span><br><span class="line">    commandConfig.useFluentCommands()</span><br><span class="line">    services.register(commandConfig)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-Todo-swift"><a href="#修改-Todo-swift" class="headerlink" title="修改 Todo.swift"></a>修改 Todo.swift</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> FluentMySQL</span><br><span class="line"><span class="keyword">import</span> Vapor</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A single entry of a Todo list.</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span>: <span class="title">MySQLModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// The unique identifier for this `Todo`.</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int?</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A title describing what this `Todo` entails.</span></span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Creates a new `Todo`.</span></span><br><span class="line">    <span class="keyword">init</span>(id: <span class="type">Int?</span> = <span class="literal">nil</span>, title: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id = id</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Allows `Todo` to be used as a dynamic migration.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Todo</span>: <span class="title">Migration</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Allows `Todo` to be encoded to and decoded from HTTP messages.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Todo</span>: <span class="title">Content</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Allows `Todo` to be used as a dynamic parameter in route definitions.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Todo</span>: <span class="title">Parameter</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> Vapor </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于MVVM构建App工程结构</title>
      <link href="/zh-cn/Swift/mvvm_app.html"/>
      <url>/zh-cn/Swift/mvvm_app.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="App的工程结构"><a href="#App的工程结构" class="headerlink" title="App的工程结构"></a>App的工程结构</h1><p>首先，我们从工程结构开始。构成整个项目的文件，一共可以分成五大类，分别是：</p><ul><li>A - 和App启动相关的代码、配置以及资源；</li><li>B - 和UI的显示以及交互相关的代码；</li><li>C - 对UIKit的公共扩展；</li><li>D - 存储数据的model；</li><li>E - 使用的第三方库；</li></ul><p>接下来，我们可以新建一个Single View Application项目，基于它来构建整个工程。</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>对于A这部分，主要包含App启动相关的代码、配置以及资源：</p><ul><li>AppDelegate：在这里我们定义App的启动流程；</li><li>Info.plist：在这里我们配置App的行为；</li><li>LaunchScreen.storyboard：在这里我们定义App的启动屏幕；</li><li>Localizable.strings：这里我们定义支持多语言的各种翻译；</li></ul><p>这是初始Single View Application模板被删减后的部分<br><img src="https://image.boxueio.com/app-proj-dir-1@2x.jpg" alt="avatar"></p><p>可以看到，我们删掉了默认的Main.storyboard，并在Info.plist中去掉了Main storyboard file base name的配置。在整个App里，我们将使用代码来实现UI。</p><p>AppDelegate.swift中是App的入口，由于删掉了Main.storyboard，我们将专门准备一节来讨论相关的内容。</p><p>BxLaunchScreen.storyboard是App的启动UI，别忘了在Boxue Target中也设置成对应的文件：<br><img src="https://image.boxueio.com/app-proj-dir-2@2x.jpg" alt="avatar"></p><p>Localizable.strings则是多语言文件，同样，我们会单独用一节来分享Boxue App中使用的多语言处理方法。</p><h2 id="B-C-D"><a href="#B-C-D" class="headerlink" title="B / C / D"></a>B / C / D</h2><p>对于B / C / D这三部分，由于它们彼此独立，为了可以同步开发，并让C和D的代码可重用，我们把这三部分内容定义成了三个framework。其中：</p><ul><li>Boxue_iOS里是和UI的显示以及交互相关的代码；</li><li>BoxueUIKit是整个项目中会用到的对UIKit的公共扩展；</li><li>BoxueDataKit是整个项目的数据存储以及访问接口，也可以理解为是App的View Model以及Model；</li></ul><p>在项目的Targets列表中，可以看到app以及这三个framework，如果你要自己动手练习，只要在自己的项目中，点击Targets列表左下角的+，然后选择添加CocoaTouch framework就好了。</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>是Boxue_iOS，这个framework中都是处理UI显示以及交互的代码，它的使用者，是刚才我们提到的Boxue Target。这里，iOSApp group包含了全部iOS相关的实现。<br><img src="https://image.boxueio.com/app-proj-dir-3@2x.jpg" alt="avatar"></p><p>在这个group里，处在根目录的文件有三类：</p><ul><li>一个是BoxueAppDepedencyContainer.swift，它主要处理对象的初始化工作，稍后我们会专门用几个小节讨论依赖注入和容器的话题；</li><li>一类是处理App从启动阶段到注册前交互的View Controllers；</li><li>还有一类是和View Controller对应的View；</li></ul><p>遵循这三个分类，我们可以进一步在这个group中创建sub group，例如上图中的PreSignIn group就表示所有处理登录前UI显示和交互的View Controllers。而等我们开发到后期的时候，登录后UI的处理也可以采用同样的模式。</p><p>同样，大家现在只要知道这些文件的功能就好，大可不必关心其中的实现，我们会在后面的内容中专门讲述代码的细节。</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>BoxueUIKit这个framework，可以理解为是我们的UIKit工具库，包含了项目中使用的对UIKit的各种扩展、工具类和工具函数。它的使用者，则是Boxue_iOS Target。</p><p><img src="https://image.boxueio.com/app-proj-dir-4@2x.jpg" alt="avatar"></p><p>在这个group里，Reusable / UIKit这个sub group中，是对UIKit的扩展，我们可以按照功能分类继续在其中创建sub group，例如我们当前的：</p><ul><li>Style group是对样式相关类的扩展；</li><li>Nibless group是为了纯代码实现View Controller对各种View Controllers以及View类的扩展；</li><li>理解了这个思路之后，我们就可以用这种方法，把这个framework的各种接口组织起来了。慢慢地，我们开发的功能越多，这个framework功能就会越丰富。当我们切换到其它项目中时，也能很方便的重用这些积累起来的功能。<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3>最后一个framework是BoxueDataKit，这个framework包含了两类内容：一类是直接和服务端打交道的Model；另一类，是和View Controllers打交道的View Model。因此，BoxueDataKit中包含了两个sub group，DataLayer表示Model，PresentLayer表示View Model：<br><img src="https://image.boxueio.com/app-proj-dir-5@2x.jpg" alt="avatar"></li></ul><p>但在一个实际的项目中，除了Model和View Model之外，还有一类内容，就是围绕Model要完成的各种业务逻辑。例如，围绕着用户信息的注册、登录和改密码；或者，围绕着用户Session的读取和删除，都属于此类。显然，把处理这些功能的接口直接写在Model里是不合适的。为此，我们还在Model group中新建了一个Repositories的sub group，这里，就是围绕着Model要定义的各种业务逻辑接口，例如Remote group表示所有的远程访问API，Persistence group*表示本地持久化存储数据API等等。当然，我们现在只要知道这样做的意图就好了，完全没必要关心代码的细节。</p><p>而相比DataLayer，PresentLayer的内容倒是简单很多。基本上，App的每一屏，都会对应一个View Model文件。并且，功能相关的一组View Models，我们还可以给它们创建一个公共的subgroup。例如用于支持引导用户注册、登录或直接浏览功能的View Model，就统一放在了Guide group里，这样方便维护。</p><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>对于项目中使用的第三方库，我们选择了Carthage。在项目根目录的Cartfile中，作为开始，我们引入了以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github &quot;mxcl&#x2F;PromiseKit&quot; ~&gt; 6.4.0</span><br><span class="line">github &quot;onevcat&#x2F;Kingfisher&quot; ~&gt; 4.9.0</span><br><span class="line">github &quot;ReactiveX&#x2F;RxSwift&quot; ~&gt; 4.3.0</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>PromiseKit用于简化异步操作的代码；</li><li>Kingfisher用于缓存下载的图片</li><li>RxSwift用于管理App中的事件</li></ul><p>作为开始，暂时就包含这3个，以后随着开发用到，我们再添加就好了。添加完成后，我们要在项目根目录执行：</p><blockquote><p><code>carthage update --platform iOS --no-use-binaries</code></p></blockquote><p>来安装所有的依赖关系，这里，–no-use-binaries很重要，如果不带这个参数直接安装Carthage默认的framework，当你使用LLDB调试的时候，就会出现类似error: Couldn’t IRGen expression这样的提示，这是我们要注意的地方。</p><p>完成后，在TARGETS列表中，选中Boxue，在General tab的最底部就会看到，Embeded binary包含了我们自己创建的三个frameworks，Linked Frameworks and Libraries则包含了我们自己创建的三个frameworks以及通过Carthage引入的三个frameworks：<br><img src="https://image.boxueio.com/app-project-arch-2@2x.jpg" alt="avatar"></p><p>接下来，保持Boxue TARGET选中，切换到Build Phases tab，在这里，点击+，选择New Run Script Phase，这时，Xcode就会要求我们填写一些东西。<br><img src="https://image.boxueio.com/app-project-arch-3@2x.jpg" alt="avatar"></p><p>其中，执行的命令，我们写：</p><blockquote><p>/usr/local/bin/carthage copy-frameworks</p></blockquote><p>Input Files我们写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;Kingfisher.framework</span><br><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;RxSwift.framework</span><br><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;RxCocoa.framework</span><br><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;PromiseKit.framework</span><br></pre></td></tr></table></figure><p>Output Files我们写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;Kingfisher.framework</span><br><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;RxSwift.framework</span><br><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;RxRocoa.framework</span><br><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;PromiseKit.framework</span><br></pre></td></tr></table></figure><p>完成后，看起来是这个样子的：<br><img src="https://image.boxueio.com/app-project-arch-4@2x.jpg" alt="avatar"></p><p>这个命令的作用就是把之前我们用Carthage引入的第三方库在打包的时候，拷贝到特定目录。</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sketch 插件整理</title>
      <link href="/zh-cn/APP/Sketch/Sketch_Plugins.html"/>
      <url>/zh-cn/APP/Sketch/Sketch_Plugins.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="Sketch-measure"><a href="#Sketch-measure" class="headerlink" title="Sketch measure"></a>Sketch measure</h3><p>标记尺寸</p><blockquote><p>快捷键：Ctrl + Cmd + B</p></blockquote><h3 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h3><p>快速查找组件</p><blockquote><p>快捷键：Cmd + ‘</p></blockquote><h3 id="Auto-Layout"><a href="#Auto-Layout" class="headerlink" title="Auto-Layout"></a>Auto-Layout</h3><p>组件位置</p><blockquote><p>安装好之后，选中一个对象，Auto Layout就会出现在inspector的右下角</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Sketch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sketch 快捷键</title>
      <link href="/zh-cn/APP/Sketch/Sketch_key.html"/>
      <url>/zh-cn/APP/Sketch/Sketch_key.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><ol><li>a：尺寸模版工具栏</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Sketch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 10.12 终端命令行下使用Shadowsocks</title>
      <link href="/zh-cn/APP/Shadowsocks/macos10_12_shadowsocks.html"/>
      <url>/zh-cn/APP/Shadowsocks/macos10_12_shadowsocks.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Shadowsocks-NG"><a href="#Shadowsocks-NG" class="headerlink" title="Shadowsocks-NG"></a>Shadowsocks-NG</h2><p>有一个新的Shadowsocks的客户端叫 Shadowsocks-NG 解决了一个长久以来的痛点，Shadowsocks没有HTTP代理，导致我们需要使用polipo等软件进行协议转换</p><p>现在其在1087端口提供了http代理服务(http代理代理设置选项)，我们可以通过在命令行直接设置代理，来使用SS服务了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启代理</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:1087</span><br><span class="line"><span class="built_in">export</span> https_proxy=127.0.0.1:1087</span><br><span class="line"><span class="comment">#关闭代理</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure><p>配置一个别名方便启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>在文件内加入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Custom Add not System</span></span><br><span class="line"><span class="built_in">alias</span> proxy-on=<span class="string">'export http_proxy=127.0.0.1:1087;export https_proxy=$http_proxy'</span></span><br><span class="line"><span class="built_in">alias</span> proxy-off=<span class="string">'unset http_proxy;unset https_proxy'</span></span><br></pre></td></tr></table></figure><p>就可以在命令行内通过 proxy-on 和 proxy-off 来开启关闭代理</p><h2 id="sudo操作怎么办"><a href="#sudo操作怎么办" class="headerlink" title="sudo操作怎么办"></a>sudo操作怎么办</h2><p>以上快捷启动配置只能在User的命令行里进行使用，如果想对sudo操作挂proxy，需要先使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure><p>进入bash 3.2# 然后手动设置</p>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Shadowsocks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift   Dictionary数据结构</title>
      <link href="/zh-cn/Swift/swift_dicrionary.html"/>
      <url>/zh-cn/Swift/swift_dicrionary.html</url>
      
        <content type="html"><![CDATA[<p>Dictionary是除了Array之外的另一种非常重要的数据结构，它用于把某种形式的key，关联到某种形式的value。我们来看一个例子。</p><a id="more"></a><h2 id="定义Dictionary"><a href="#定义Dictionary" class="headerlink" title="定义Dictionary"></a>定义Dictionary</h2><p>假设我们要定义一个数据结构，用来保存用户在泊学对某个视频的观看情况。可以这样：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">假设我们要定义一个数据结构，用来保存用户在泊学对某个视频的观看情况。可以这样：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RecordType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> bool(<span class="type">Bool</span>)</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> text(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> record11: [<span class="type">String</span>: <span class="type">RecordType</span>] = [</span><br><span class="line">    <span class="string">"uid"</span>: .number(<span class="number">11</span>),</span><br><span class="line">    <span class="string">"exp"</span>: .number(<span class="number">100</span>),</span><br><span class="line">    <span class="string">"favourite"</span>: .bool(<span class="literal">true</span>),</span><br><span class="line">    <span class="string">"title"</span>: .text(<span class="string">"Dictionary basics"</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在上面代码里，我们用[KeyType: ValueType]的形式来定义一个Dictionary。当定义好Dictionary之后，我们就能直接用[Key]来访问某个key对应的值了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11[<span class="string">"uid"</span>]       <span class="comment">// number(11)</span></span><br><span class="line">record11[<span class="string">"favourite"</span>] <span class="comment">// bool(true)</span></span><br><span class="line">record11[<span class="string">"title"</span>]     <span class="comment">// text("Dictionary basics")</span></span><br><span class="line">record11[<span class="string">"invalid"</span>]   <span class="comment">// nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional&lt;RecordType&gt;.Type</span></span><br><span class="line">type(of: record11[<span class="string">"favourite"</span>])</span><br></pre></td></tr></table></figure><p>上面例子中的结果都很直观。但是有一个细节却是值得我们注意的。和Array不同的是，[]用在Dictionary的时候，会返回一个Optional类型来确保这种形式的访问安全。因此，访问不存在的key，并不会导致运行时错误。</p><p>这是因为索引这个概念，对Array和Dictionary来说，是截然不同的。对于Array来说，我们有可能使用的正常索引值只源于Array自身，也就是0..&lt;array.count，因此，如果你使用了不在这个范围里的值，则一定是可以被定性为Bug的，何况，我们之前也看到了，对于Array，我们几乎不需要直接使用索引来访问元素。</p><p>而对于Dictionary来说，它包含的内容并不直接决定我们可以查询的内容。举个例子来说，英汉词典中也可能并不包含我们要查询的单词。所以，Dictionary中包含的所有键值，从语义上说，并不完全决定了它的使用者会查询的值，所以，我们也无法把这类问题明确的归因于是Bug。所以，Swfit为Dictionary的索引查询操作，提供了optional保护。要么得到正确的结果，要么通过nil表示要查询的内容不存在。</p><h2 id="常用的基本属性"><a href="#常用的基本属性" class="headerlink" title="常用的基本属性"></a>常用的基本属性</h2><p>作为一个集合类型，Dictionary同样有count和isEmpty两个属性读取其元素的个数以及判断其是否为空：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11.<span class="built_in">count</span>   <span class="comment">// 4</span></span><br><span class="line">record11.isEmpty <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>另外，我们可以单独访问一个Dictionary的所有keys和所有values：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11.keys</span><br><span class="line">record11.values</span><br></pre></td></tr></table></figure><p>这两个属性也分别是一个集合，我们可以暂时忽略掉它们具体的类型，如果要我们要访问它们的每一个元素，直接用for循环或forEach遍历就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> record11.keys &#123; <span class="built_in">print</span>(key) &#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">record11.keys.forEach &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</span><br></pre></td></tr></table></figure><h2 id="添加、更新和删除元素"><a href="#添加、更新和删除元素" class="headerlink" title="添加、更新和删除元素"></a>添加、更新和删除元素</h2><p>和Array一样，Dictionary也是一个值类型，当我们复制Dictionary对象的时候，就会拷贝Dictionary中的所有内容：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> record10 = record11</span><br></pre></td></tr></table></figure><p>并且，直接使用key就可以访问和修改Dictionary的内容：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10[<span class="string">"favourite"</span>] = .bool(<span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line">record11[<span class="string">"favourite"</span>] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果我们希望更新value的时候，同时获得修改前的值，还可以使用updateValue(_:forKey:)方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10.updateValue(.bool(<span class="literal">true</span>),</span><br><span class="line">    forKey: <span class="string">"favourite"</span>) <span class="comment">// .bool(false)</span></span><br></pre></td></tr></table></figure><p>从上面的结果可以看出修改record10并不会影响record11。</p><p>当我们要在Dictionary中添加元素时，直接给要添加的key赋值就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10[<span class="string">"watchLater"</span>] = .bool(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//  "favourite": RecordType.bool(false),</span></span><br><span class="line"><span class="comment">//  "exp": RecordType.number(100),</span></span><br><span class="line"><span class="comment">//  "title": RecordType.text("Directory basics"),</span></span><br><span class="line"><span class="comment">//  "uid": RecordType.number(11),</span></span><br><span class="line"><span class="comment">//  "watchLater": RecordType.bool(false)</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>这样，record10中的内容，就变成了5项。而当我们要删除特定的key时，直接把它的值设置为nil：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10[<span class="string">"watchLater"</span>] = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//  "favourite": RecordType.bool(false),</span></span><br><span class="line"><span class="comment">//  "exp": RecordType.number(100),</span></span><br><span class="line"><span class="comment">//  "title": RecordType.text("Directory basics"),</span></span><br><span class="line"><span class="comment">//  "uid": RecordType.number(11)</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>这里，并不是把特定key的值设置为nil（毕竟Dictionary中value部分的类型也不是optional），而是删除特定的key。当某个key的value被设置成nil后，这个key也就从Dictionary中删除了。</p><h2 id="遍历Dictionary"><a href="#遍历Dictionary" class="headerlink" title="遍历Dictionary"></a>遍历Dictionary</h2><p>由于Dictionary同时包含了key和value，因此，我们也有多重方式来遍历Dictionary。最简单的，就是遍历Dictionary中的每一个元素：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (k, v) <span class="keyword">in</span> record10 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(k): \(v)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">record10.forEach &#123; <span class="built_in">print</span>(<span class="string">"\($0): \($1)"</span>) &#125;</span><br></pre></td></tr></table></figure><p>从上面的例子可以看到，遍历Dictionary和遍历Array是类似的。当我们使用for循环遍历时，它的每一个元素都用一个tuple来表示，封装了每一个元素的key和value。而当使用forEach方法时，它会给它的closure参数传递两个值，分别是每一个元素的key和value。<br>[^<em>^]: #  (但是，由于Dictionary是一个无序集合（unordered collection），因此当我们编辑了Dictionary之后，每次遍历，访问元素的顺序都可能是不同的。如果我们希望按照固定的顺序来访问Dictionary中的元素，一个最简单的办法，就是对key排序后，再进行遍历：)<br>[^</em>^]: #  (for key in record10.keys.sorted() {print(“(key): (record10[key])”)})</p><h2 id="合并进不同的设置"><a href="#合并进不同的设置" class="headerlink" title="合并进不同的设置"></a>合并进不同的设置</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RecordType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> bool(<span class="type">Bool</span>)</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> text(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defaultRecord: [<span class="type">String</span>: <span class="type">RecordType</span>] = [</span><br><span class="line">    <span class="string">"uid"</span>: .number(<span class="number">0</span>),</span><br><span class="line">    <span class="string">"exp"</span>: .number(<span class="number">100</span>),</span><br><span class="line">    <span class="string">"favourite"</span>: .bool(<span class="literal">false</span>),</span><br><span class="line">    <span class="string">"title"</span>: .text(<span class="string">""</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样，当创建新纪录时，我们希望保持默认记录中的默认值，同时合并进不同用户的设置，例如：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> template = defaultRecord</span><br><span class="line"><span class="keyword">var</span> record11Patch: [<span class="type">String</span>: <span class="type">RecordType</span>] = [</span><br><span class="line">    <span class="string">"uid"</span>: .number(<span class="number">11</span>),</span><br><span class="line">    <span class="string">"title"</span>: .text(<span class="string">"Common dictionary extensions"</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// How can we do this?</span></span><br><span class="line"><span class="comment">// template.merge(record11Patch)</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    uid: .number(11),</span></span><br><span class="line"><span class="comment">//    "exp": .number(100),</span></span><br><span class="line"><span class="comment">//    "favourite": .bool(false),</span></span><br><span class="line"><span class="comment">//    "title": .text("Common dictionary extensions")</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>然而，该如何实现这个merge呢？最重要的事情，就是要想一下什么内容可以被merge进来。最一般的情况来说，无论任何形式的序列，只要它的元素中key和value的类型和Dictionary相同，就可以进行合并。</p><p>如何在代码中表达这个特征呢？来看下面的例子：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">merge</span>&lt;S:Sequence&gt;<span class="params">(<span class="number">_</span> sequence: S)</span></span></span><br><span class="line">        <span class="keyword">where</span> <span class="type">S</span>.<span class="type">Iterator</span>.<span class="type">Element</span> == (key: <span class="type">Key</span>, value: <span class="type">Value</span>) &#123;</span><br><span class="line"></span><br><span class="line">        sequence.forEach &#123; <span class="keyword">self</span>[$<span class="number">0</span>] = $<span class="number">1</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Dictionary是一个struct，并且merge修改了self，我们必须使用mutating关键字修饰这个方法。而对于sequence参数，我们通过where关键字限定了两个内容：</p><ul><li>S必须遵从Sequence protocol，Dictionary是众多遵从了Sequence protocol的collection类型之一，但是，我们没必要一定只能合并Dictionary；</li><li>S的元素类型必须和原Dictionary的Element相同，其中Key和Value是Dictionary声明中的两个泛型参数；<br>解决了参数问题之后，实现合并的算法就很简单了，我们只是更新self中每一个和sequence有相同key的值就好了。</li></ul><p>这样，之前template.merge(record11Patch)就可以正常工作了。</p><p>既然，我们把merge参数的约束定义为了Sequence，那我们就来看一个合并非Dictionary类型的情况，例如，合并一个包含正确内容的Array：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> record10Patch: [(key: <span class="type">String</span>, value: <span class="type">RecordType</span>)] = [</span><br><span class="line">    (key: <span class="string">"uid"</span>,   value: .number(<span class="number">10</span>)),</span><br><span class="line">    (key: <span class="string">"title"</span>, value: .text(<span class="string">"Common dictionary extensions"</span>))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> template1 = defaultRecord</span><br><span class="line">template1.merge(record10Patch)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    uid: .number(10),</span></span><br><span class="line"><span class="comment">//    "exp": .number(100),</span></span><br><span class="line"><span class="comment">//    "favourite": .bool(false),</span></span><br><span class="line"><span class="comment">//    "title": .text("Common dictionary extensions")</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>在上面的代码里，我们合并了一个tuple数组，它的类型是Array&lt;String, RecordType&gt;，数组中的每一项都包含了一个要合并进来的键值对。如果没有意外，合并Array和Dictionary都应该是可以正常工作的。</p><p>按照我们对merge的实现方式，实际上，任何一个遵从了Sequence protocol的类型，只要它包含了和template相同的元素类型，都是可以merge的。</p><h3 id="用一个tuple数组初始化Dictionary"><a href="#用一个tuple数组初始化Dictionary" class="headerlink" title="用一个tuple数组初始化Dictionary"></a>用一个tuple数组初始化Dictionary</h3><p>理解了merge的实现和用法之后，其实，我们很容易把这个场景进一步扩展下，如果我们可以merge类型兼容的Sequence，那么，用这样的Sequence来初始化一个Dictionary也是可以的，把它看成是和一个空的Dictionary进行合并就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>&lt;<span class="type">S</span>:<span class="type">Sequence</span>&gt;(<span class="number">_</span> sequence: <span class="type">S</span>)</span><br><span class="line">        <span class="keyword">where</span> <span class="type">S</span>.<span class="type">Iterator</span>.<span class="type">Element</span> == (key: <span class="type">Key</span>, value: <span class="type">Value</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span> = [:]</span><br><span class="line">        <span class="keyword">self</span>.merge(sequence)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个方法之后，我们直接用下面的代码就可以创建一个新的Dictionary对象：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> record11 = <span class="type">Dictionary</span>(record11Patch)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    uid: .number(11),</span></span><br><span class="line"><span class="comment">//    "title": .text("Common dictionary extensions")</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="定制map的行为"><a href="#定制map的行为" class="headerlink" title="定制map的行为"></a>定制map的行为</h3><p>最后一个要介绍的常用功能，是定制Dictionary.map的行为，默认情况下它返回的是一个Array，例如：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11.<span class="built_in">map</span> &#123; $<span class="number">1</span> &#125;</span><br><span class="line"><span class="comment">// [ .number(11).text("Common dictionary extensions")]</span></span><br></pre></td></tr></table></figure><p>在上面的例子里，map返回一个Array<RecordType>，但有时，我们仅仅希望对value做一些变换，而仍旧保持Dictionary的类型。为此，我们可以自定义一个“只map value”的方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">们可以自定义一个“只<span class="built_in">map</span> value”的方法：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapValue</span>&lt;T&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Value)</span></span></span> -&gt; <span class="type">T</span>) -&gt; [<span class="type">Key</span>: <span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Dictionary</span>&lt;<span class="type">Key</span>, <span class="type">T</span>&gt;(<span class="built_in">map</span> &#123; (k, v) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> (k, transform(v))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个实现的最内部，我们用标准库中的map得到了一个Array&lt;(String, RecordType)&gt;类型的Array，而后，由于Array也遵从了Sequence protocol，因此，我们就能直接使用这个Array来定义新的Dictionary了。</p><p>完成之后，用下面的代码测试下：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newRecord11 = record11.mapValue &#123; record -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> record &#123;</span><br><span class="line">    <span class="keyword">case</span> .text(<span class="keyword">let</span> title):</span><br><span class="line">        <span class="keyword">return</span> title</span><br><span class="line">    <span class="keyword">case</span> .number(<span class="keyword">let</span> exp):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(exp)</span><br><span class="line">    <span class="keyword">case</span> .bool(<span class="keyword">let</span> favourite):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(favourite)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    "uid": "11",</span></span><br><span class="line"><span class="comment">//    "title": "Common dictionary extensions"</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line">这样，我们就用record11生成了一个<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt;类型的对象。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift：Array</title>
      <link href="/zh-cn/Swift/swift_array_study.html"/>
      <url>/zh-cn/Swift/swift_array_study.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a href="https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html" target="_blank" rel="noopener">Swift官方API文档</a></p><p>对任何一门现代化编程语言来说，集合类型都是非常重要的组成部分。这一类数据类型的设计，很大程度上决定了开发者对某种编程语言的使用体验以及代码执行效率。因此，Swift在集合类型的设计和实现上，进行了诸多的考量，让它兼具易用性、高性能以及扩展性。</p><p>但是这样做也是有代价的，在Swift里，集合是个复杂的类型家族，它是由多个protocol形成的，因此当我们想深入其中一探究竟的时候，并不那么容易。</p><p>最简单也最常用的一个集合类型：Array。</p><h2 id="创建一个Array"><a href="#创建一个Array" class="headerlink" title="创建一个Array"></a>创建一个Array</h2><p>Array表示一组有序（ordered）的数据集合，所谓有序，并不是指大小排序，而是指Array中的元素有先后的位置关系，稍后我们会看到，这个位置关系可以用来访问Array中的元素。在此之前，先来看了解如何定义Array对象。<br>首先，我们可以通过下面三种方法定义一个空的Array：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> array2: [<span class="type">Int</span>] = []</span><br><span class="line"><span class="keyword">var</span> array3 = array2</span><br></pre></td></tr></table></figure><p>在上面的代码中，前两种使用了type annotation，Array<Int>和[Int]没有区别，你可以根据自己的喜好来选择。而第三种，我们直接使用了一个空的Array生成了一个新的Array对象。</p><p>其次，再来看一些定义数组时同时指定初始值的方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [3, 3, 3]</span></span><br><span class="line"><span class="keyword">var</span> threeInts = [<span class="type">Int</span>](repeating: <span class="number">3</span>, <span class="built_in">count</span>: <span class="number">3</span>)</span><br><span class="line"><span class="comment">// [3, 3, 3, 3, 3, 3]</span></span><br><span class="line"><span class="keyword">var</span> sixInts = threeInts + threeInts</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="keyword">var</span> fiveInts = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>它们用起来都很直观，在稍后我们提到Sequence时，还会看到更复杂的Array初始化方法。</p><h2 id="两个常用的Array属性（isEmpty，count）"><a href="#两个常用的Array属性（isEmpty，count）" class="headerlink" title="两个常用的Array属性（isEmpty，count）"></a>两个常用的Array属性（isEmpty，count）</h2><p>定义好数组之后，我们介绍两个Array最常用的属性。第一个是count，类型是Int。我们之前已经用过，用于获取数组中元素的个数：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">array1.<span class="built_in">count</span>    <span class="comment">// 0</span></span><br><span class="line">fiveInts.<span class="built_in">count</span>  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>第二个是isEmtpy，类型是Bool。表示数组是否为空：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> array2.isEmpty &#123;</span><br><span class="line">    <span class="comment">// array2 is empty</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"array2 is empty"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问Array中的元素"><a href="#访问Array中的元素" class="headerlink" title="访问Array中的元素"></a>访问Array中的元素</h2><p>接下来，我们看访问Array元素的方法，它们之中有我们在其他语言中熟悉的，也有Swift独特的方式。首先，就是几乎所有语言都有的惯用法，使用索引。但是，它却也是在Swift，最不被推荐的使用方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">fiveInts[<span class="number">2</span>] <span class="comment">// 3</span></span><br><span class="line">fiveInts[<span class="number">5</span>] <span class="comment">// This will crash</span></span><br></pre></td></tr></table></figure><p>就像，上面例子中这样。当使用索引访问数组元素时，你必须自行确保索引的安全性。如果索引超过了数组的范围，程序就会直接崩溃。其实，在Swift里，我们几乎不需要直接使用索引来访问数组元素。稍后，我们会专门提到Array的惯用法。因此，Swift开发者也没有对索引访问添加任何安全保护。言外之意就是，非要用，你自己对结果全权负责喽。</p><p>其次，是使用range operator访问数组的一个范围：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">fiveInts[<span class="number">0</span>...<span class="number">2</span>] <span class="comment">// [1, 2, 3]</span></span><br><span class="line">fiveInts[<span class="number">0</span>..&lt;<span class="number">2</span>] <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p>要说明的是，使用range operator得到的，并不是一个Array，而是一个ArraySlice。什么是ArraySlice呢？简单来说，就是Array某一段内容的view，它不真正保存数组的内容，只保存这个view引用的数组的范围：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | length  | 5 |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | storage ptr |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">//           |</span></span><br><span class="line"><span class="comment">//           v</span></span><br><span class="line"><span class="comment">//           +---+---+---+---+---+---------------------+</span></span><br><span class="line"><span class="comment">//           | 1 | 2 | 3 | 4 | 5 |  reserved capacity  |</span></span><br><span class="line"><span class="comment">//           +---+---+---+---+---+---------------------+</span></span><br><span class="line"><span class="comment">//           ^</span></span><br><span class="line"><span class="comment">//           |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | storage ptr |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | beg idx | 0 |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | end idx | 3 |  ArraySlice for [0...2]</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br></pre></td></tr></table></figure><p>从上面这个注释，就很容易理解view的概念了，它只记录了要表达内容的区间。但是我们也可以直接通过这个view创建新的Array对象：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Array</span>(fiveInts[<span class="number">0</span>...<span class="number">2</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>这样，就得到了一个值是[1, 2, 3]的Array对象。</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>除了访问单个元素外，另一类常用的需求就是顺序访问数组中的每个成员。在Swift里，我们有三种基本的方法遍历一个Array。</p><h3 id="For（不推荐）"><a href="#For（不推荐）" class="headerlink" title="For（不推荐）"></a>For（不推荐）</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> fiveInts &#123;</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 </span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*       or        */</span></span><br><span class="line">a.forEach &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</span><br><span class="line"><span class="comment">// 1 </span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="enumerated-（不推荐）"><a href="#enumerated-（不推荐）" class="headerlink" title="enumerated()（不推荐）"></a>enumerated()（不推荐）</h3><p>在遍历的时候，同时获得数组的索引和值，可以使用数组对象的enumerated()方法，它会返回一个Sequence对象，包含了每个成员的索引和值，我们同样可以在for循环中，依次访问它们：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> fiveInts.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(index): \(value)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0: 1</span></span><br><span class="line"><span class="comment">// 1: 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>当我们要查找数组中元素的位置时（例如，查找等于1的元素的索引）：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a.index &#123; $<span class="number">0</span> == <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><p>index会返回一个Optional<Int>，当要查找的元素存在时，就返回该元素的索引，否则，就返回nil。</p><p>当我们要筛选出数组中的某些元素时（例如，得到所有偶数）：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a.<span class="built_in">filter</span> &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>借助closure，可以使用Array对象的forEach方法<br>要注意它和map的一个重要区别：forEach并不处理closure参数的返回值。因此它只适合用来对数组中的元素进行一些操作，而不能用来产生返回结果。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">fiveInts.forEach &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map把for循环执行的逻辑，封装在了函数里，这样我们就可以把函数的返回值赋值给常量了</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> squares = [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> fibonacci &#123;</span><br><span class="line">    squares.append(value * value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于下面方法</span></span><br><span class="line"><span class="keyword">let</span> constSquares = fibonacci.<span class="built_in">map</span> &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><p>例如我们可以实现自己的map方法</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myMap</span>&lt;T&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp: [<span class="type">T</span>] = []</span><br><span class="line">        tmp.reserveCapacity(<span class="built_in">count</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            tmp.append(transform(value))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> constSequence1 = fibonacci.myMap &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><p>仔细观察myMap的实现，就会发现它最大的意义，就是保留了遍历Array的过程，而把要执行的动作留给了myMap的调用者通过参数去定制</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(fibonacci.<span class="built_in">map</span> &#123; $<span class="number">0</span> &#125;)   <span class="comment">// [0, 1, 1, 2, 3, 5]</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci.<span class="built_in">map</span> &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;)   <span class="comment">//[0, 1, 1, 4, 9, 25]</span></span><br></pre></td></tr></table></figure><h2 id="Array-其他的方法"><a href="#Array-其他的方法" class="headerlink" title="Array 其他的方法"></a>Array 其他的方法</h2><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>简单来说，如果你用在map中的closure参数不返回一个数组元素，而是也返回一个数组，这样，你就会得到一个数组的数组，但如果你只需要一个一维数组，flatMap就可以派上用场了</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = [<span class="string">"cat"</span>,<span class="string">"dog"</span>]</span><br><span class="line"><span class="keyword">var</span> ids = [<span class="string">"1"</span>,<span class="string">"2"</span>]</span><br><span class="line">animal.flatMap &#123; animal <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> ids.<span class="built_in">map</span> &#123; id <span class="keyword">in</span> (animal, id) &#125; <span class="comment">// [(.0 "cat", .1 "1"), (.0 "cat", .1 "2"), (.0 "dog", .1 "1"), (.0 "dog", .1 "2")]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，flatMap的实现很简单，只要在map内部的for循环里，不断把closure参数生成的数组的内容，添加到要返回的结果里就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myFlatMap</span>&lt;T&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Element)</span></span></span> -&gt; [<span class="type">T</span>]) -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp: [<span class="type">T</span>] = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            tmp.append(contentsOf: transform(value))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果，应该和之前使用flatMap是一样的：</p><h3 id="min-max-（返回最大最小值）"><a href="#min-max-（返回最大最小值）" class="headerlink" title="min() max()（返回最大最小值）"></a>min() max()（返回最大最小值）</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">fibonacci.<span class="built_in">min</span>() <span class="comment">// 0</span></span><br><span class="line">fibonacci.<span class="built_in">max</span>() <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="filter（返回判断正确的值）"><a href="#filter（返回判断正确的值）" class="headerlink" title="filter（返回判断正确的值）"></a>filter（返回判断正确的值）</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">fibonacci.<span class="built_in">filter</span> &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125; <span class="comment">//[0, 2]</span></span><br><span class="line">fibonacci.<span class="built_in">map</span> &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125;  <span class="comment">//[true, false, false, true, false, false]</span></span><br></pre></td></tr></table></figure><p>我们可以自己来实现一个filter：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myFilter</span><span class="params">(<span class="number">_</span> predicate: <span class="params">(Element)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    <span class="comment">//一个参数predicate用来设置筛选的条件，这个条件接受一个Element类型的参数，返回一个Bool值，最后让myFilter返回一个Element值</span></span><br><span class="line">        <span class="keyword">var</span> tmp: [<span class="type">Element</span>] = []       <span class="comment">//定义一个空的数组用来存放筛选后的结果</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> <span class="keyword">self</span> <span class="keyword">where</span> predicate(value) &#123;  <span class="comment">//使用for循环，便利数组中的每一个元素</span></span><br><span class="line">            tmp.append(value)    <span class="comment">//把符合条件的值添加到tmp里面</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reject</span><span class="params">(<span class="number">_</span> predicate: <span class="params">(Element)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">filter</span> &#123; !predicate($<span class="number">0</span>) &#125;    <span class="comment">//指定的条件取反</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">allMatch</span><span class="params">(<span class="number">_</span> predicate: <span class="params">(Element)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">contains</span> &#123; !predicate($<span class="number">0</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>myFilter：最核心的环节就是通过带有where条件的for循环找到原数组中符合条件的元素，然后把它们一一添加到tmp中，并最终返回给函数的调用者。然后，我们测试下myFilter</li><li>reject：剔除掉数组中满足条件的元素</li><li>allMatch：基于这个<a href="#jump_contains">contains</a>，我们还可以给Array添加一个新的方法，用来判断Array中所有的元素是否满足特定的条件：</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">fibonacci.myFilter &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125; <span class="comment">//[0, 2]</span></span><br><span class="line">fibonacci.reject &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125; <span class="comment">// [1, 1, 3, 5]</span></span><br><span class="line"><span class="comment">//我们只要把调用转发给filter，然后把指定的条件取反就好了。这样，剔除元素的代码语义上就会更好看一些：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> evens = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">evens.allMatch &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125; <span class="comment">// true</span></span><br><span class="line"><span class="comment">//在allMatch的实现里，只要没有不满足条件的元素，也就是所有元素都满足条件了</span></span><br></pre></td></tr></table></figure><h3 id="contains（是否存在满足条件的元素）"><a href="#contains（是否存在满足条件的元素）" class="headerlink" title="contains（是否存在满足条件的元素）"></a>contains（是否存在满足条件的元素）<span id="jump_contains"></span></h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">fibonacci.<span class="built_in">contains</span> &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>contains的一个好处就是只要遇到满足条件的元素，函数的执行就终止了</p><h3 id="elementsEqual-starts-（比较数组）"><a href="#elementsEqual-starts-（比较数组）" class="headerlink" title="elementsEqual() starts()（比较数组）"></a>elementsEqual() starts()（比较数组）</h3><p>比较数组相等或以特定元素开始。对这类操作，我们需要提供两个内容</p><ul><li>elementsEqual：比较数组元素是否完全相等</li><li>starts：比较数组的规则是否以特定序列开头</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">fibonacci.elementsEqual([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], by: &#123; $<span class="number">0</span> == $<span class="number">1</span> &#125;)     <span class="comment">//false</span></span><br><span class="line">fibonacci.starts(with: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], by: &#123; $<span class="number">0</span> == $<span class="number">1</span> &#125;)      <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="sorted-（对数组进行排序）"><a href="#sorted-（对数组进行排序）" class="headerlink" title="sorted()（对数组进行排序）"></a>sorted()（对数组进行排序）</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [0, 1, 1, 2, 3, 5]</span></span><br><span class="line">fibonacci.sorted()</span><br><span class="line"><span class="comment">// [5, 3, 2, 1, 1, 0]</span></span><br><span class="line">fibonacci.sorted(by: &gt;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pivot = fibonacci.<span class="built_in">partition</span>(by: &#123; $<span class="number">0</span> &lt; <span class="number">1</span> &#125;)</span><br><span class="line">fibonacci[<span class="number">0</span> ..&lt; pivot] <span class="comment">// [5, 1，1，2, 3]</span></span><br><span class="line">fibonacci[pivot ..&lt; fibonacci.endIndex] <span class="comment">// [0]</span></span><br></pre></td></tr></table></figure><p>其中，sorted(by:)的用法是很直接的，它默认采用升序排列。同时，也允许我们通过by自定义排序规则。在这里&gt;是{ $0 &gt; $1 }的简写形式。Swift中有很多在不影响语义的情况下的简写形式。</p><p>而partition(by:)则会先对传递给它的数组进行重排，然后根据指定的条件在重排的结果中返回一个分界点位置。这个分界点分开的两部分中，前半部分的元素都不满足指定条件；后半部分都满足指定条件。而后，我们就可以使用range operator来访问这两个区间形成的Array对象。大家可以根据例子中注释的结果，来理解partition的用法。</p><h3 id="reduce-（对数组所有内容合并）"><a href="#reduce-（对数组所有内容合并）" class="headerlink" title="reduce()（对数组所有内容合并）"></a>reduce()（对数组所有内容合并）</h3><p>是把数组的所有内容，“合并”成某种形式的值，对这类操作，我们需要指定的，是合并前的初始值，以及“合并”的规则。例如，我们计算fibonacci中所有元素的和：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">fibonacci.<span class="built_in">reduce</span>(<span class="number">0</span>, +)   <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>在这里，初始值是0，和第二个参数+，则是{ $0 + $1 }的缩写。</p><blockquote><p>了解reduce的进一步用法之前，我们先来自己实现一个：</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myReduce</span>&lt;T&gt;<span class="params">(<span class="number">_</span> initial: T, <span class="number">_</span> next: <span class="params">(T, Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="comment">//由于要把Array转化成某种形式的单一值，把它定义范型方法，按照用法应该有两个参数，第一个参数initial是Reduce的初始值，定义为T；第二个表示每次执行的方法，是一个clouser，有两个参数T, Element，并且返回合并后的结果T，最终myReduce返回T集合</span></span><br><span class="line">        <span class="keyword">var</span> tmp = initial</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            tmp = next(tmp, value)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibonacci.myReduce(<span class="number">0</span>, +)   <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>它们的结果和标准库中的map和filter是一样的。但是，这种看似优雅的写法却没有想象中的那么好。在它们内部的reduce调用中，每一次$0的参数都是一个新建的数组，因此整个算法的复杂度是O(n2)，而不再是for循环版本的O(n)。所以，这样的实现方法最好还是用来作为理解reduce用法的例子。</p><h3 id="append（在末尾添加）"><a href="#append（在末尾添加）" class="headerlink" title="append（在末尾添加）"></a>append（在末尾添加）</h3><p>编辑Array中的元素。要在数组的末尾添加元素，我们可以这样：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">array1.append(<span class="number">1</span>)     <span class="comment">// [1]</span></span><br><span class="line">array1 += [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="insert（在中间位置添加）"><a href="#insert（在中间位置添加）" class="headerlink" title="insert（在中间位置添加）"></a>insert（在中间位置添加）</h3><p>它的第一个参数表示要插入的值，第二个参数表示要插入的位置，这个位置必须是一个合法的范围，即0…array1.endIndex，如果超出这个范围，会直接引发运行时错误。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">array1.insert(<span class="number">5</span>, at: array1.endIndex)</span><br></pre></td></tr></table></figure><blockquote><ul><li>endIndex 末尾</li><li>startIndex 起始位置</li><li>array1[N] 指定位置</li></ul></blockquote><h3 id="remove-at-（删除元素的位置）"><a href="#remove-at-（删除元素的位置）" class="headerlink" title="remove(at:)（删除元素的位置）"></a>remove(at:)（删除元素的位置）</h3><p>要删除Array中的元素，可以使用remove(at:)方法，它只接受一个参数，表示要删除元素的位置，同样，你必须自行保证使用的at参数不超过数组的合法范围，否则会引发运行时错误。当然，如果你仅仅想删除数组中的最后一个元素，还可以使用removeLast()方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">array1.remove(at: <span class="number">4</span>) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>其他方法</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">array1.removeLast() <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>removeAll 删除全部元素   //[]</li><li>removeFirst 删除第一个元素  [2,3,4]</li><li>removeLast 删除最后一个元素 [1,2,3]</li><li>popLast 删除的最后一个元素（原Array已被删除）  [4]</li></ul></blockquote><h2 id="NSArray"><a href="#NSArray" class="headerlink" title="NSArray"></a>NSArray</h2><p>在Foundation中，数组这个类型有两点和Swift Array是不同的：</p><ul><li>数组是否可以被修改是通过NSArray和NSMutableArray这两个类型来决定的；</li><li>NSArray和NSMutableArray都是类对象，复制它们执行的是引用语义；</li></ul><p>当把这两个因素放在一起的时候，Foundation中的“常量数组”这个概念就会在一些场景里表现的很奇怪。因为你还可以通过对一个常量数组的非常量引用去修改它，来看下面的例子：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mutable array [1, 2, 3]</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="type">NSMutableArray</span>(array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// Const array [1, 2, 3]</span></span><br><span class="line"><span class="keyword">let</span> copyB: <span class="type">NSArray</span> = b</span><br><span class="line"></span><br><span class="line"><span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line">b.insert(<span class="number">0</span>, at: <span class="number">0</span>)</span><br><span class="line"><span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line">copyB</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，尽管我们在创建copyB时，使用了NSArray，表明我们不希望它的值被修改，由于这个赋值执行的是引用拷贝，因此，实际上它和b指向的是同一块内存空间。因此，当我们修改b的内容时，copyB也就间接受到了影响。</p><p>为了在拷贝NSArray对象时，执行值语义，我们必须使用它的copy方法复制所有的元素：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="type">NSMutableArray</span>(array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> copyB: <span class="type">NSArray</span> = b</span><br><span class="line"><span class="keyword">let</span> deepCopyB = b.copy() <span class="keyword">as</span>! <span class="type">NSArray</span></span><br><span class="line"></span><br><span class="line">b.insert(<span class="number">0</span>, at: <span class="number">0</span>) <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line">copyB              <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line">deepCopyB          <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>从注释中的结果，你就能很容易理解deep copy的含义了。</p><p>当我们使用NSArray和NSMutableArray时，Swift中的var和let关键字就和数组是否可以被修改没关系了。它们只控制对应的变量是否可以被赋值成新的NSArray或NSMutableArray对象。</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift中String</title>
      <link href="/zh-cn/Swift/swift_string.html"/>
      <url>/zh-cn/Swift/swift_string.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="忘了String是字符数组"><a href="#忘了String是字符数组" class="headerlink" title="忘了String是字符数组"></a>忘了String是字符数组</h1><p>在Swift里，String已经彻底不再是一个集合类型。而是一个提供了从多个维度展现一个Unicode视图的类型。你可以得到它的多个Characters，可以看到它的UTF-8 / UTF-16 / Unicode scalar值等等。</p><h2 id="String和NSString处理Unicode时的差异"><a href="#String和NSString处理Unicode时的差异" class="headerlink" title="String和NSString处理Unicode时的差异"></a>String和NSString处理Unicode时的差异</h2><p>unicode长度是可变的，我们将看到unicode另外一个可变的特性，即组成同一个字符的code unit组合也是可变的。而区分String和NSString的一个重要方式，就是它们对unicode的这个特性的处理方式，是不同的。为了理解这个事情，我们从unicode grapheme clusters说起。</p><h3 id="Unicode-grapheme-clusters"><a href="#Unicode-grapheme-clusters" class="headerlink" title="Unicode grapheme clusters"></a>Unicode grapheme clusters</h3><p>首先，我们定义一个字符串：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cafe = <span class="string">"Caf\u&#123;00e9&#125;"</span></span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>Café</p></blockquote><p>Swift里，我们可以使用\u{}这样的方式使用unicode scalar定义unicode字符。</p><p>对于单词Café中的最后一个字符来说，它的unicode scalar是U+00E9，名字是LATIN SMALL LETTER E WITH ACUTE。每一个unicode都有一个scalar值以及一个全大写字母表示的名称。</p><p>为了表示这个字符é，除了使用它的unicode scalar外，我们可以用两个其它的unicode字符拼起来：</p><ul><li>英文字母e，它的unicode scalar是U0065，name是LATIN SMALL LETTER E；</li><li>声调字符’，它的unicode scalar是U0301，name是COMBINING ACUTE ACCENT；</li></ul><p>当我们把这两个字符像下面这样组合起来的时候：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cafee = <span class="string">"Caf\u&#123;0065&#125;\u&#123;0301&#125;"</span></span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>Café</p></blockquote><p>尽管cafee的定义中貌似有5个字符，但实际显示出来的最后一个字符和之前用unicode scalar定义是一样的。我们管\u{0065}\u{0301}就叫做grapheme cluster。</p><p>既然同一个unicode字符可以有多种表现形式，那么由不同code unit构成的字符串相等么？对此，Swift中的String和Objective-C中的NSString处理方式却是有差别的，这种差别，是区分它们最明显的地方之一。</p><h3 id="Canonically-equivalent"><a href="#Canonically-equivalent" class="headerlink" title="Canonically equivalent"></a>Canonically equivalent</h3><p>为了能识别上面cafe和cafee的情况，unicode规范中提出了一个概念：canonically equivalent。如何理解它呢？我们先来看Swift是如何识别cafe和cafee的。</p><h4 id="Swift-String"><a href="#Swift-String" class="headerlink" title="Swift String"></a>Swift String</h4><p>当我们要读取一个字符串中所有的字符时，可以访问String对象的characters属性，在下个视频中，我们会更多讲到它的用法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cafe = <span class="string">"Caf\u&#123;00e9&#125;"</span></span><br><span class="line"><span class="keyword">let</span> cafee = <span class="string">"Caf\u&#123;0065&#125;\u&#123;0301&#125;"</span></span><br><span class="line"></span><br><span class="line">cafe.characters.<span class="built_in">count</span></span><br><span class="line">cafee.characters.<span class="built_in">count</span></span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>4<br>4</p></blockquote><p>尽管cafee中最后一个字符的定义使用了两个code unit，Swift可以识别的Character中字符的个数也是4。</p><p>但是，当我们查看cafe和cafee的UTF-8和UTF-16编码的个数时，就能看到它们的区别了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">cafe.utf8.<span class="built_in">count</span></span><br><span class="line">cafee.utf8.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line">cafe.utf16.<span class="built_in">count</span></span><br><span class="line">cafee.utf16.<span class="built_in">count</span></span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>5<br>6</p></blockquote><blockquote><p>4<br>5</p></blockquote><p>为什么会这样呢？我们用UTF-8编码举例：</p><p>对于cafe来说，é的UTF-8编码是C3 A9，加上前面Caf的编码是43 61 66，因此cafe的UTF-8编码个数是5；</p><p>对于cafee来说，声调字符’的UTF-8编码是CC 81，加上前面Cafe的UTF-8编码是43 61 66 65，因此是6个，它相当于Cafe’；</p><p>理解了之后，你可以自己去推算一下UTF-16的情况。</p><p>尽管cafe和cafee的编码方式不同，当我们在Swift中，比较cafe和cafee时，结果会是true：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">cafe == cafee</span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>true</p></blockquote><p>这就是unicode canonically equivalent的含义，通过这些例子，你也能更好的了解到Swift在unicode表意正确上作出的努力。</p><h4 id="NSString"><a href="#NSString" class="headerlink" title="NSString"></a>NSString</h4><p>而当我们把这些例子用在NSString上，情况就会有些不同。用同样的code unit定义下面两个NSString对象：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nsCafe = <span class="type">NSString</span>(characters: [<span class="number">0x43</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0xe9</span>], length: <span class="number">4</span>)</span><br><span class="line">nsCafe.length</span><br><span class="line"><span class="keyword">let</span> nsCafee = <span class="type">NSString</span>(characters: [<span class="number">0x43</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x0301</span>], length: <span class="number">5</span>)</span><br><span class="line">nsCafee.length</span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>Café<br>4<br>Café<br>5</p></blockquote><p>可以看到，同样是使用不同的code unit构建字符串”Café”，在NSString看来，它们是长度不同的两个字符串。</p><p>因此，当我们比较nsCafe和nsCafee的时候，结果也是没有意外的false：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">nsCafe == nsCafee</span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>false</p></blockquote><p>因此，==对NSString来说，并没有执行canonically equivalent的语义。为了在不同的NSString对象之间进行语义比较，我们只能这样：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = nsCafe.compare(nsCafee <span class="keyword">as</span> <span class="type">String</span>)</span><br><span class="line">result == <span class="type">ComparisonResult</span>.orderedSame</span><br></pre></td></tr></table></figure><p>返回</p><blockquote><p>NSComparisonResult<br>true</p></blockquote><p>可以看到，这样就能按照canonically equivalent的方式判断相等了。</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vapor 用于处理异步事件的非阻塞架构</title>
      <link href="/zh-cn/Swift/vapor_io.html"/>
      <url>/zh-cn/Swift/vapor_io.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Vapor中使用Future和Promise"><a href="#Vapor中使用Future和Promise" class="headerlink" title="Vapor中使用Future和Promise"></a>Vapor中使用Future和Promise</h1><p>几乎任何一个有可能带来请求延迟的操作，Vapor都会采用Future来处理，例如：</p><ul><li>返回渲染过的页面，会用Future&lt;View&gt;；</li><li>返回HTTP状态码，会用Future&lt;HTTPStatus&gt;；</li><li>返回HTTP请求，会用Future&lt;Response&gt;；</li></ul><p>在Vapor里，只要返回来自Model中的内容，它就一定是一个Future&lt;T&gt;</p><h2 id="修改Episode"><a href="#修改Episode" class="headerlink" title="修改Episode"></a>修改Episode</h2><p>Vapor中的做法。为了表示某个在未来会返回的值，我们要使用Future&lt;T&gt;来表示。例如，在未来会得到一个Int就是Future&lt;Int&gt;，在未来会得到一个String，就是Future&lt;String&gt;，以此类推。</p><p>因此，对于上一节的/episodes/id这个API，如果Episode对象是通过数据库查询而来，我们最先要修改的，是遵从protocol Parameter时实现的resolveParameter，它返回的，应该是一个Future&lt;Episode?&gt;，而不是Episode。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">resolveParameter</span><span class="params">(<span class="number">_</span> parameter: String,</span></span></span><br><span class="line"><span class="function"><span class="params">                          on container: Container)</span></span></span><br><span class="line">    <span class="keyword">throws</span> -&gt; <span class="type">Future</span>&lt;<span class="type">Episode?</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管之前Episode的init方法我们处理了字符串id无法转换成整数的情况，但为了更接近实际情况，这里，我们还是返回了Future&lt;Episode?&gt;而不是Future&lt;Episode&gt;，并且这样做也方便我们稍后演示更多Future的用法。</p><p>接下来，该怎么实现它呢？由于现在我们知识有限，因此，不会引入真正的异步操作，而只是创建一个Future对象来体会下它的用法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">resolveParameter</span><span class="params">(<span class="number">_</span> parameter: String,</span></span></span><br><span class="line"><span class="function"><span class="params">                      on container: Container)</span></span></span><br><span class="line">    <span class="keyword">throws</span> -&gt; <span class="type">Future</span>&lt;<span class="type">Episode?</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Future</span>.<span class="built_in">map</span>(on: container) &#123;</span><br><span class="line">        <span class="type">Episode</span>(id: parameter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里Future.map就是完成映射的方法，它的第一个参数on表示执行任务的线程，我们暂时先不用太多关心它。而后面的closure则是生成Future要封装的值的过程。可以看到，我们还是硬编码了一个Episode对象。不过这次，概念上，我们就得到了一个“在未来的某个时候是Episode?”的值。</p><p>接下来，我们修改下Episode的定义：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Episode</span>: <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> desc: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(id: <span class="type">Int</span>, desc: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id = id</span><br><span class="line">        <span class="keyword">self</span>.desc = desc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>?(id: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> eid = <span class="type">Int</span>(id) &#123;</span><br><span class="line">            <span class="keyword">self</span>.<span class="keyword">init</span>(id: eid,</span><br><span class="line">                desc: <span class="string">"Description of episode \(eid)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次，我们定义了memberwise initializer，并且让之前的init(id: String)变成了failable initializer。这样比之前用一个默认值的实现更接近实际的情况。</p><h2 id="修改路由"><a href="#修改路由" class="headerlink" title="修改路由"></a>修改路由</h2><p>当我们再调用req.parameters.next(Episode.self)尝试把URL中的参数自动转换成Episode对象的时候，我们就会得到一个Future&lt;Episode?&gt;对象，而不再是之前的Episode对象。但给前端返回一个Optional并不是个好主意，我们应该把这个Future&lt;Episode?&gt;变成Future&lt;Episode&gt;。为此，我们可以使用另外一个版本的Future.map方法。</p><p>综合上面这些修改，我们把/episodes的路由改成这样：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">router.<span class="keyword">get</span>(<span class="string">"episodes"</span>, <span class="type">Episode</span>.parameter) &#123;</span><br><span class="line">    req -&gt; <span class="type">Future</span>&lt;<span class="type">Episode</span>&gt; <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> episode = <span class="keyword">try</span> req.parameters.next(<span class="type">Episode</span>.<span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> episode.<span class="built_in">map</span>(to: <span class="type">Episode</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">        episode <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> episode = episode <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">Abort</span>(.badRequest)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> episode</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这次，/episodes已经返回了Future&lt;Episode&gt;。在它的实现里，episode的类型是Future&lt;Episode?&gt;。然后，我们使用Future.map：</p><p>它的第一个参数to表示要映射的值的类型；<br>第二个参数表示映射的过程。如果Future包装的Episode对象不为nil，我们就直接返回这个对象。否则就抛出一个Abort异常，这是Vapor提供的一个错误类型。实际上，它可以接受很多参数表示HTTP错误的相关信息，但只有一个参数是必选的。就是我们这里传递的.badRequest。这是一个enum HTTPResponseStatus中的一个case，表示HTTP 400错误。<br>这样，路由这边的修改就完成了</p><p>当我们访问/episodes/5，就会得到对应记录的JSON：</p><h1 id="用Future处理单一任务的常用方法"><a href="#用Future处理单一任务的常用方法" class="headerlink" title="用Future处理单一任务的常用方法"></a>用Future处理单一任务的常用方法</h1><h2 id="map和flatMap"><a href="#map和flatMap" class="headerlink" title="map和flatMap"></a>map和flatMap</h2><p>正因为Future在Vapor中极为普遍，Vapor也提供了很多辅助函数来帮助我们使用Future。这一节，我们就来总结一下这些套路，适应并且掌握它们非常重要。因为在接下来的Vapor各种组件中，我们会频繁使用这些方法。<br>首先，是最基础的两个方法map和flatMap，它们都返回一个Future对象，唯一的区别就是当它们的closure生成的值自身是一个Future的时候，用flatMap，否则用map。实际上，上一节最后，我们已经使用了map方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">episode.<span class="built_in">map</span>(to: <span class="type">Episode</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">    episode <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> episode = episode <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">Abort</span>(.badRequest)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> episode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在map的closure参数里，我们返回的是一个Episode对象，它不是一个Future对象。因此，这里直接用map就可以把closure的返回值封装成一个Future&lt;Episode&gt;了。</p><p>接下来，为了演示flatMap以及后续的例子，我们直接在routes.swift中添加两个辅助方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEpisode</span><span class="params">(from req: Request)</span></span> -&gt; <span class="type">Future</span>&lt;<span class="type">Episode</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> req.future(</span><br><span class="line">        <span class="type">Episode</span>(id: <span class="number">1</span>, desc: <span class="string">"Just for demo."</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(<span class="number">_</span> episode: Episode, <span class="keyword">for</span> req: Request)</span></span></span><br><span class="line">    -&gt; <span class="type">Future</span>&lt;<span class="type">Response</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> episode.encode(status: .created, <span class="keyword">for</span>: req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>getEpisode模拟根据用户请求生成Episode对象，通常这个过程要解码上传数据，因此我们返回了Future&lt;Episode&amp;gt。另外，这里为了避免引入更多的内容，我们还是使用了硬编码的方法；</li><li>save模拟把生成的Episode对象返回给客户端；这里，我们使用了encode方法把episode的值编码成JSON（这是Episode遵从了protocol Content之后的免费福利），并通过status参数指定了返回的HTTP状态码。同样，在Vapor里，编码过程也会被认为是个可能带来延迟的操作，因此，encode返回的不是表示HTTP返回信息的Response，而是Future&lt;Response?&gt;；</li></ul><p>有了这两个方法之后，我们添加一个POST /episode路由，模拟处理用户上传数据：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">"episode"</span>) &#123;</span><br><span class="line">        req <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> getEpisode(from: req)</span><br><span class="line">            .flatMap(to: <span class="type">Response</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">                episode <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">return</span> save(episode, <span class="keyword">for</span>: req)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在它的实现里可以看到，我们用getEpisode得到了用户上传的内容，并生成了Episode对象。此时，我们得到的，是一个Future&lt;Response&gt;。接下来，为了保存这个这个Episode对象，我们使用了flatMap方法，在它的closure中，我们调用了save。这就是我们在一开始说的，用于类型转换的closure自身也返回一个Future的情况。如果我们使用map就会得到Future&lt;Future&lt;Response&gt;&gt;，这显然不是我们想要的。得到的JSON和HTTP状态码，就是我们在save函数中返回的值。</p><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>但有时，我们并不关心一个Future中具体的值。例如刚才那个保存episode的操作，我们只是想告诉客户端：行，我知道了，你放心吧，我保证完成任务。然后就不再发送其它细节信息了。这种情况，我们就可以直接使用transform方法，直接把Future中的数据进行变换：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">"episode"</span>) &#123;</span><br><span class="line">       req <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> getEpisode(from: req)</span><br><span class="line">           .flatMap(to: <span class="type">Response</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">               episode <span class="keyword">in</span></span><br><span class="line">               <span class="keyword">return</span> save(episode, <span class="keyword">for</span>: req)</span><br><span class="line">           &#125;</span><br><span class="line">           .transform(to: <span class="type">HTTPStatus</span>.noContent)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这样，flatMap返回的Future<Response>就会被直接变成Future<HTTPStatus>，重新请求下，得到的结果就会变成这样：没有了JSON，HTTP状态码也变成了204。</p><h1 id="用Future处理多个任务的常用方法"><a href="#用Future处理多个任务的常用方法" class="headerlink" title="用Future处理多个任务的常用方法"></a>用Future处理多个任务的常用方法</h1>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Vapor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vapor 通过URL返回自定义类型</title>
      <link href="/zh-cn/Swift/vapor_url_response.html"/>
      <url>/zh-cn/Swift/vapor_url_response.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="自定义参数类型"><a href="#自定义参数类型" class="headerlink" title="自定义参数类型"></a>自定义参数类型</h2><p>首先，在Sources/App/Models中，我们新建一个文件Episode.swift，在这里，定义一个类型Episode，表示数据库中的视频对象：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Episode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> desc: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(id: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> eid = <span class="type">Int</span>(id) &#123;</span><br><span class="line">            <span class="keyword">self</span>.id = eid</span><br><span class="line">            <span class="keyword">self</span>.desc = <span class="string">"Description of episode \(self.id)"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.id = <span class="number">0</span></span><br><span class="line">            <span class="keyword">self</span>.desc = <span class="string">"Invalid episode"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义路由/routers</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">router.<span class="keyword">get</span>(<span class="string">"episodes"</span>, <span class="type">Episode</span>.parameter) &#123;</span><br><span class="line">    req -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> episode = <span class="keyword">try</span> req.parameters.next(<span class="type">Episode</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Episode id: \(episode.id)\nEpisode desc: \(episode.desc)"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次，为了可以通过try req.parameters.next(Episode.self)直接通过传入的ID得到对应的Episode对象。在Model中我们要让Episode遵从protocol Parameter：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Episode</span>: <span class="title">Parameter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">resolveParameter</span><span class="params">(<span class="number">_</span> parameter: String,</span></span></span><br><span class="line"><span class="function"><span class="params">                          on container: Container)</span></span></span><br><span class="line">    <span class="keyword">throws</span> -&gt; <span class="type">Episode</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Episode</span>(id: parameter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>parameter表示要解析出Episode对象的参数，这里也就是我们通过URL传递的ID；</li><li>container我们暂时还用不到，所以先忽略它就好了；</li></ul><p>这样，我们就可以修改之前的/episodes路由了：</p><h2 id="让路由返回JSON"><a href="#让路由返回JSON" class="headerlink" title="让路由返回JSON"></a>让路由返回JSON</h2><p>我们只要让Episode遵从protocol Content就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Episode</span>: <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> desc: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(id: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> eid = <span class="type">Int</span>(id) &#123;</span><br><span class="line">            <span class="keyword">self</span>.id = eid</span><br><span class="line">            <span class="keyword">self</span>.desc = <span class="string">"Description of episode \(self.id)"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.id = <span class="number">0</span></span><br><span class="line">            <span class="keyword">self</span>.desc = <span class="string">"Invalid episode"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的事情，就都交给Vapor就好。这样，在/episode路由中，我们可以直接返回Episode对</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">router.<span class="keyword">get</span>(<span class="string">"episodes"</span>, <span class="type">Episode</span>.parameter) &#123;</span><br><span class="line">    req -&gt; <span class="type">Episode</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> req.parameters.next(<span class="type">Episode</span>.<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Vapor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计HTTP API的最佳实践</title>
      <link href="/zh-cn/Swift/http_api.html"/>
      <url>/zh-cn/Swift/http_api.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Request-Method"><a href="#Request-Method" class="headerlink" title="Request Method"></a>Request Method</h2><p>当客户端向服务器发起HTTP请求的时候，请求的Header中会有一个字段叫Request Method，也叫做HTTP verb，不同的HTTP verbs表达了不同的HTTP请求意图，而我们常用的，有下面这几种：</p><ul><li>GET：表示客户端需要请求服务器的某个资源。简单来说，就是当我们需要给用户显示某些保存在服务器上的内容时，都会向服务器发起GET请求</li><li>POST：表示向服务器提交数据，例如用户注册时填写的信息、登录时填写的用户名/密码等。简单来说，就是当我们需要根据用户输入在服务器上创建新记录的时候，都会向服务器发起POST请求</li><li>PUT：表示根据用户提供的内容，修改服务器上的特定资源；PUT请求修改要求提供的数据是全量的，例如当我们修改某条数据库记录时，使用PUT请求，应该包含这条记录的所有字段，这种修改更像是覆盖</li><li>PATCH：使用PATCH请求提交的内容则是有针对性的，只要提供需要的部分就好了</li></ul><h2 id="Naming-conventions"><a href="#Naming-conventions" class="headerlink" title="Naming conventions"></a>Naming conventions</h2><p>了解了HTTP verbs之后，我们来看设计HTTP APIs时应遵信的一些命名规范。其中，最重要的一个大原则就是，永远使用名词表示API管理的资源。</p><ol><li>文档类型的API：用于访问服务器上的某一个文件，或者某一条数据记录，因此，我们应该以单数名词结尾，或者以一个复数名词加上一个与之有关的值,例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.soyl.com&#x2F;episodes&#x2F;&#123;id&#125;</span><br><span class="line">https:&#x2F;&#x2F;api.soyl.com&#x2F;accounts&#x2F;admin</span><br></pre></td></tr></table></figure></li><li>集合类型的API：用于访问服务器上的某一类内容，例如数据库中的某个记录集合。定义这一类API的时候，除了在URL中使用复数名词之外，整个URL中还应该包含访问到这个集合时用到的每一个资源的名称<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.soyl.com&#x2F;series&#x2F;&#123;id&#125;&#x2F;episodes</span><br></pre></td></tr></table></figure></li><li>集合的筛选的API：如果我们要让API支持集合的筛选，就不要使用/来设置条件了，而是应该在URL末尾添加条件查询。例如，为了得到所有按月订阅的会员，我们可以这样：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.soyl.com&#x2F;users?sub-type&#x3D;month</span><br></pre></td></tr></table></figure></li><li>和控制行为有关的API：这是为数不多的，我们会在URL中使用动词的例子。例如，为了结算用户的购物车，在结尾，我们使用了/cart/check这样的形式，这很类似面向对象编程中的访问cart对象的checkout方法的感觉。一旦看到这种形式的API，我们就知道它会在服务器执行某个动作，而不是管理某些资源。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.soyl.com&#x2F;users&#x2F;&#123;id&#125;&#x2F;cart&#x2F;checkout</span><br></pre></td></tr></table></figure> 再来看个例子，如果要播放某个视频，我们可以这样：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.boxue.io&#x2F;series&#x2F;&#123;id&#125;&#x2F;episodes&#x2F;&#123;id&#125;&#x2F;play</span><br></pre></td></tr></table></figure> 这个API可以分几段来理解：<ul><li>第一段是/series/{id}，我们可以把它想象成是一个叫做series的方法，它接受一个参数id，并返回一个集合，包含了改系列所有的视频；</li><li>第二段是/episodes/{id}，类似的，我们使用id作为索引，访问到了集合中的某个视频对象；</li><li>第三段是/play，可以理解成是调用了视频对象的play方法执行播放；<br>这样，整个URL的含义就很清楚了。</li></ul></li></ol><h2 id="API的细节"><a href="#API的细节" class="headerlink" title="API的细节"></a>API的细节</h2><ol><li>不要在URL中使用<em>，很难只用一个单词来描述URL中的一个环节，这时，就可以使用-来分割多个单词，而不是用</em></li><li>始终坚持使用小写字母，RFC 3986约定了：对于URL来说，SCHEME和HOST部分是不区分大小写的；而其余的部分是区分大小写的</li><li>不要在URL中包含扩展名</li></ol>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github修改下载Host</title>
      <link href="/zh-cn/Git/Github/github_host.html"/>
      <url>/zh-cn/Git/Github/github_host.html</url>
      
        <content type="html"><![CDATA[<p>  github上面有许多公开项目资源有的下载很慢，有时候挂VPN也解决不了；这时候需要修改git clone 使用的域名IP，解决办法可以从git clone的域名入手，实际上用git clone下载项目文件时使用的域名是<a href="http://github.global.ssl.fastly.net" target="_blank" rel="noopener">http://github.global.ssl.fastly.net</a> ，而非<a href="http://github.com/" target="_blank" rel="noopener">http://github.com/</a> 。因此，我们可以修改本地的host文件，在host文件中增加域名及域名解析对应的ip，给该域名指定ip。<br>  利用第三方DNS域名解析网站，查询响应ip，常用的第三方DNS域名解析网站如<a href="http://tool.chinaz.com/dns" target="_blank" rel="noopener">http://tool.chinaz.com/dns</a> ，如图<img src="https://img-blog.csdn.net/2018072516385881?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWppbnN3cHU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br>  不同地方对应该域名的响应ip不一样，网页解析速度也就不一样。选择TTL值最小的ip即可。</p><hr><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/baijinswpu/article/details/81205888" target="_blank" rel="noopener">Github上项目文件上传、下载速度慢的问题及解决方法</a> </p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 生成 sitemap 站点地图</title>
      <link href="/zh-cn/Hexo/hexo_sitemap.html"/>
      <url>/zh-cn/Hexo/hexo_sitemap.html</url>
      
        <content type="html"><![CDATA[<p> 百度+谷歌搜索博客</p><a id="more"></a><h2 id="创建站点地图文件"><a href="#创建站点地图文件" class="headerlink" title="创建站点地图文件"></a>创建站点地图文件</h2><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><ul><li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li><li>在博客目录的config.yml中添加如下代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">- hexo-generator-baidu-sitemap</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br></pre></td></tr></table></figure>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了<h2 id="让百度收录我们的博客"><a href="#让百度收录我们的博客" class="headerlink" title="让百度收录我们的博客"></a>让百度收录我们的博客</h2></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/9c2d6db2f855" target="_blank" rel="noopener">生成sitemap站点地图</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows下MySql安装</title>
      <link href="/zh-cn/APP/MySQL/windows_mysql_install.html"/>
      <url>/zh-cn/APP/MySQL/windows_mysql_install.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySql下载"><a href="#MySql下载" class="headerlink" title="MySql下载"></a>MySql下载</h2><a id="more"></a><p>去MySql官网下载MySql Zip文件<br>解压安装包，记住解压路径，后面的文件路径以实际路径为准<br>进入mysql目录，更改my-default.ini文件名为my.ini，在[mysqld]下面添加一行编码：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">basedir = D:/mysql-5.6.25-winx64/</span><br><span class="line">datadir = D:/mysql-5.6.25-winx64/data/</span><br><span class="line">tmpdir = D:/mysql-5.6.25-winx64/temp/</span><br><span class="line">character-<span class="keyword">set</span>-<span class="keyword">server</span> = utf8</span><br><span class="line"><span class="keyword">user</span>=mysql</span><br></pre></td></tr></table></figure><blockquote><p>注意路径中的反斜杠，不要用Windows的正斜杠</p></blockquote><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>在环境变量里配置系统变量，新建MYSQL_HOME变量，添加Path记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MYSQL_HOME=C:\Program Files\mysql\mysql-5.6.25-winx64</span><br><span class="line">Path=%MYSQL_HOME%/bin</span><br></pre></td></tr></table></figure><blockquote><p>注意环境变量的配置规则</p></blockquote><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>管理员执行CMD，进入MySQL的bin目录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqld <span class="comment">--install MySQL --defaults-file="my.ini"</span></span><br></pre></td></tr></table></figure><p>“Win+R”组合键，查找“regedit”，打开注册表，找到路径</p><blockquote><p>HKEY_LOCAL_MACHINE - SYSTEM - CurrentControlSet - services - mysql</p></blockquote><p>找到其中的ImagePath，将值改为</p><blockquote><p>“D:\mysql-5.6.25-winx64\bin\mysqld” –defaults-file=”D:\mysql-5.6.25-winx64\my.ini” MySQL</p></blockquote><p>此时MySql已经安装好了，可以直接启动了</p><h3 id="MySQL服务的启动、停止与卸载"><a href="#MySQL服务的启动、停止与卸载" class="headerlink" title="MySQL服务的启动、停止与卸载"></a>MySQL服务的启动、停止与卸载</h3><p>启动: net start MySQL<br>停止: net stop MySQL<br>卸载: sc delete MySQL</p>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下Redis安装</title>
      <link href="/zh-cn/APP/Redis/CentOS7_Redis_install.html"/>
      <url>/zh-cn/APP/Redis/CentOS7_Redis_install.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h1><a id="more"></a><h2 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h2><blockquote><p><a href="http://redis.io/" target="_blank" rel="noopener">http://redis.io/</a> 下载最新版的Redis</p></blockquote><p>也可以使用wget直接下载redis</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis<span class="literal">-3</span>.<span class="number">2.0</span>.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>解压Redis</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">tar zxvf redis<span class="literal">-3</span>.<span class="number">2.0</span>.tar.gz</span><br><span class="line">mv redis<span class="literal">-3</span>.<span class="number">2.0</span> redis</span><br><span class="line">cd redis</span><br></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install make gcc<span class="literal">-c</span>++ cmake bison<span class="literal">-devel</span> ncurses<span class="literal">-devel</span> libaio bison libaio libaio<span class="literal">-devel</span> perl<span class="literal">-Data</span><span class="literal">-Dumper</span> net<span class="literal">-tools</span></span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>出现下面结果表示成功</p><blockquote><p>Hint: To run ‘make test’ is a good idea<br>make[1]: Leaving directory `/opt/redis-3.2.0/src’</p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p>出现下面结果表示成功</p><blockquote><p>Hint: To run ‘make test’ is a good idea<br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>make[1]: Leaving directory `/opt/redis-3.2.0/src’</p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cd src &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>出现下面结果表示成功</p><blockquote><p>Hint: To run ‘make test’ is a good idea<br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>    INSTALL instal</p></blockquote><p> 此时Redis已经安装成功，直接执行redis-server就可以启动redis</p><h1 id="Redis使用脚本"><a href="#Redis使用脚本" class="headerlink" title="Redis使用脚本"></a>Redis使用脚本</h1><p>当Redis多实例启动时，没有脚本需得启动多个redis.conf文件，比较麻烦，使用脚本启动比较方便。</p><h2 id="脚本步骤"><a href="#脚本步骤" class="headerlink" title="脚本步骤"></a>脚本步骤</h2><pre><code>1.  在/etc/rc.d/init.d/目录下新建redis文件，将脚本内容拷贝进去2. chkconfig --add redis   #注册服务3. chkconfig --level 345 redis on  #指定服务在3、4、5级别运行4. systemctl daemon-reload5. 多端口时新建redis.conf文件命名方法建议为“redis-6381.conf”这种格式以便跟脚本中对应，如以其他命名，脚本需做相应更改。</code></pre><h2 id="脚本参数"><a href="#脚本参数" class="headerlink" title="脚本参数"></a>脚本参数</h2><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">      service redis <span class="literal">-p</span> [<span class="type">port</span>]  [<span class="type">start</span>|<span class="type">stop</span>|<span class="type">status</span>|<span class="type">restart</span>]</span><br><span class="line">参数说明：</span><br><span class="line">         <span class="literal">-p</span> [<span class="type">port</span>] : 指定redis实例的端口，用于多实例的服务器</span><br><span class="line">         start：启动指定端口的Redis服务</span><br><span class="line">         stop：停止指定端口的Redis服务</span><br><span class="line">         status：进程状态</span><br><span class="line">         restart：先关闭Redis服务,再启动Redis服务</span><br><span class="line">注：不指定端口时，脚本默认指定启动<span class="number">6379</span>端口的redis</span><br></pre></td></tr></table></figure><p>使用示例</p><pre><code>service redis -p 6381 start  #启动6381端口实例的redis /etc/init.d/redis  start  #默认启动6379端口实例的redis</code></pre><h2 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h2><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#chkconfig: 2345 55 25</span></span><br><span class="line"><span class="comment">#description: Starts,stops and restart the redis-server</span></span><br><span class="line"><span class="comment">#Ver:1.1  </span></span><br><span class="line"><span class="comment">#Write by ND chengh(200808)</span></span><br><span class="line"><span class="comment">#usage: ./script_name -p [port] &#123;start|stop|status|restart&#125;</span></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"><span class="comment"># Check networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">RETVAL=<span class="number">0</span></span><br><span class="line">REDIS_PORT=<span class="number">6379</span></span><br><span class="line">PID=</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"-p"</span> ]; then</span><br><span class="line">    REDIS_PORT=<span class="variable">$2</span></span><br><span class="line">    shift <span class="number">2</span></span><br><span class="line">fi</span><br><span class="line">REDIS_DIR=<span class="string">"/data/redis-3.2.0"</span></span><br><span class="line">REDIS=<span class="string">"<span class="variable">$</span>&#123;REDIS_DIR&#125;/src/redis-server"</span></span><br><span class="line">PROG=<span class="variable">$</span>(basename <span class="variable">$REDIS</span>)</span><br><span class="line">CONF=<span class="string">"<span class="variable">$</span>&#123;REDIS_DIR&#125;/port/redis-<span class="variable">$</span>&#123;REDIS_PORT&#125;.conf"</span></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">f</span> <span class="variable">$CONF</span> ]; then</span><br><span class="line">   <span class="keyword">if</span> [ -<span class="type">f</span> <span class="string">"<span class="variable">$</span>&#123;REDIS_DIR&#125;/port/redis.conf"</span> ];then</span><br><span class="line">      CONF=<span class="string">"<span class="variable">$</span>&#123;REDIS_DIR&#125;/port/redis.conf"</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      echo <span class="literal">-n</span> <span class="variable">$</span><span class="string">"<span class="variable">$CONF</span> not exist.1"</span>;warning;echo</span><br><span class="line">      <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">   fi</span><br><span class="line">fi</span><br><span class="line">PID_FILE=`grep <span class="string">"pidfile"</span> <span class="variable">$</span>&#123;CONF&#125;|cut <span class="literal">-d</span> <span class="string">' '</span> <span class="literal">-f2</span>`</span><br><span class="line">PID_FILE=<span class="variable">$</span>&#123;PID_FILE:=/var/run/redis.pid&#125;</span><br><span class="line">LOCKFILE=<span class="string">"/var/lock/subsys/redis-<span class="variable">$</span>&#123;REDIS_PORT&#125;"</span></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">x</span> <span class="variable">$REDIS</span> ]; then</span><br><span class="line">    echo <span class="literal">-n</span> <span class="variable">$</span><span class="string">"<span class="variable">$REDIS</span> not exist.2"</span>;warning;echo</span><br><span class="line">    <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">fi</span><br><span class="line">start() &#123;</span><br><span class="line">    echo <span class="literal">-n</span> <span class="variable">$</span><span class="string">"Starting <span class="variable">$PROG:</span> "</span></span><br><span class="line">    <span class="variable">$REDIS</span> <span class="variable">$CONF</span></span><br><span class="line">    RETVAL=<span class="variable">$</span>?</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">        success;echo;touch <span class="variable">$LOCKFILE</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        failure;echo</span><br><span class="line">    fi</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line">stop() &#123;</span><br><span class="line">    echo <span class="literal">-n</span> <span class="variable">$</span><span class="string">"Stopping <span class="variable">$PROG:</span> "</span></span><br><span class="line">    <span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$PID_FILE</span> ] ;then</span><br><span class="line">       read PID &lt;  <span class="string">"<span class="variable">$PID_FILE</span>"</span> </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">       failure;echo;</span><br><span class="line">       echo <span class="literal">-n</span> <span class="variable">$</span><span class="string">"<span class="variable">$PID_FILE</span> not found."</span>;failure;echo</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    fi</span><br><span class="line">    <span class="keyword">if</span> checkpid <span class="variable">$PID</span>; then</span><br><span class="line">     kill <span class="literal">-TERM</span> <span class="variable">$PID</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">        RETVAL=<span class="variable">$</span>?</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> -<span class="type">eq</span> <span class="number">0</span> ] ;then</span><br><span class="line">                success;echo </span><br><span class="line">                echo <span class="literal">-n</span> <span class="string">"Waiting for Redis to shutdown .."</span></span><br><span class="line">         <span class="keyword">while</span> checkpid <span class="variable">$PID</span>;<span class="keyword">do</span></span><br><span class="line">                 echo <span class="literal">-n</span> <span class="string">"."</span></span><br><span class="line">                 sleep <span class="number">1</span>;</span><br><span class="line">                done</span><br><span class="line">                success;echo;rm <span class="operator">-f</span> <span class="variable">$LOCKFILE</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">                failure;echo</span><br><span class="line">        fi</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        echo <span class="literal">-n</span> <span class="variable">$</span><span class="string">"Redis is dead and <span class="variable">$PID_FILE</span> exists."</span>;failure;echo</span><br><span class="line">        RETVAL=<span class="number">7</span></span><br><span class="line">    fi    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line">restart() &#123;</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line">rhstatus() &#123;</span><br><span class="line">    status <span class="literal">-p</span> <span class="variable">$</span>&#123;PID_FILE&#125; <span class="variable">$PROG</span></span><br><span class="line">&#125;</span><br><span class="line">hid_status() &#123;</span><br><span class="line">    rhstatus &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">case <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        hid_status &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rhstatus || <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        restart</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rhstatus</span><br><span class="line">        RETVAL=<span class="variable">$</span>?</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo <span class="variable">$</span><span class="string">"Usage: <span class="variable">$0</span> -p [port] &#123;start|stop|status|restart&#125;"</span></span><br><span class="line">        RETVAL=<span class="number">1</span></span><br><span class="line">esac</span><br><span class="line"><span class="keyword">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure><blockquote><p>注意你安装Redis的目录，要对脚本中目录做出相应更改。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL参数学习</title>
      <link href="/zh-cn/APP/MySQL/mysql_parm.html"/>
      <url>/zh-cn/APP/MySQL/mysql_parm.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL参数学习"><a href="#MySQL参数学习" class="headerlink" title="MySQL参数学习"></a>MySQL参数学习</h1><a id="more"></a><h1 id="mysqld-safe"><a href="#mysqld-safe" class="headerlink" title="[mysqld_safe]"></a>[mysqld_safe]</h1><p>pid-file=/usr/mysql/run/localhost.pid</p><blockquote><p>单独设置一个pid的存放地址，以保护不被误删</p></blockquote><h1 id="mysql"><a href="#mysql" class="headerlink" title="[mysql]"></a>[mysql]</h1><p>port=3306</p><blockquote><p>端口号</p></blockquote><p>default-character-set=utf8</p><blockquote><p>编码格式</p></blockquote><p>no-auto-rehash</p><blockquote><p>自动补全，如同linux下的table键</p></blockquote><h1 id="mysqld"><a href="#mysqld" class="headerlink" title="[mysqld]"></a>[mysqld]</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>basedir=/usr/mysql</p><blockquote><p>MySQL主目录</p></blockquote><p>datadir=/usr/data</p><blockquote><p>mysql 全局数据文件及结构的存放位置；表数据（包括innodb引擎），索引，日志（除非单独设置）等文件都会存放在这里。</p></blockquote><p>tmpdir=/tmp</p><blockquote><p>创建临时表文件目录</p></blockquote><p>lc_messages=en_US</p><blockquote><p>生成文件的语言环境，建议为en_US</p></blockquote><p>lc_messages_dir=/u02/mysql/share</p><blockquote><p>语言环境文件路径</p></blockquote><p>socket=/u02/mysql/run/mysql.sock</p><blockquote><p>套字文件，保护不被误删，每次重启mysql都会重新创建，在[client]也要设置相同位置</p></blockquote><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>log_error=/u02/mysql/log/localhost.log</p><blockquote><p>指定Log错误文件路径</p></blockquote><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>slow_query_log_file=/u02/mysql/log/slow.log</p><blockquote><p>指定慢查询日志文件路径</p></blockquote><p>slow_query_log=on</p><blockquote><p>开启慢查询日志“【OFF】是关闭日志”，用来分析执行时间较长的SQL</p></blockquote><p>long_query_time=2</p><blockquote><p>设置慢查询日志多长时间后才会记录，单位为s</p></blockquote><p>log_queries_not_using_indexes=on</p><blockquote><p>设置是否把没有使用索引的SQL放到慢查询日志中,off是没有开启,on是开</p></blockquote><h3 id="普通日志"><a href="#普通日志" class="headerlink" title="普通日志"></a>普通日志</h3><p>general_log=off</p><blockquote><p>是否开启普通日志，此参数开启后会记录MySQL所有执行sql记录，包括错误的sql，除特殊情况不建议开启</p></blockquote><p>general_log_file=/u02/mysql/log/general.log</p><blockquote><p>普通日志文件位置</p></blockquote><h3 id="Innodb设置"><a href="#Innodb设置" class="headerlink" title="Innodb设置"></a>Innodb设置</h3><p>innodb_data_home_dir=/u02/data</p><blockquote><p>innodb引擎的共享表空间数据文件根目录</p></blockquote><p>innodb_data_file_path=ibdata1:512M;ibdata2:16M:autoextend</p><blockquote><p>指定了所有InnoDB数据文件初始大小分配，最大分配以及超出起始分配界线时是否应当增加文件的大小，位置由innodb_data_home_dir指定。</p></blockquote><p>innodb_log_group_home_dir=/u02/data</p><blockquote><p>此参数确定日志文件组中的文件的位置，日志组中文件的个数由innodb_log_files_in_group确定，此位置设置默认为MySQL的datadir </p></blockquote><p>innodb_log_files_in_group=2</p><blockquote><p>为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为2M</p></blockquote><p>innodb_buffer_pool_size=200M</p><blockquote><p>如果只用innodb的话可使用70%的可用内存，建议不要超过80%，否则会影响swap</p></blockquote><p>innodb_buffer_pool_instances=4</p><blockquote><p>可以开启多少个内存缓冲池，与size搭配使用，大的size建议instances设置为1.</p></blockquote><p>innodb_log_file_size=200M</p><blockquote><p>日志文件的大小，此参数越大性能越好，但会增加故障恢复所用时间。依据服务器使用情况设置，推荐设置为0.25 * innodb_buffer_pool_size</p></blockquote><p>innodb_log_buffer_size=5M</p><blockquote><p>确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。如果它的值设置太高了，可能会浪费内存 ，它每秒都会刷新一次，因此无需设置超过1秒所需的内存空间。</p></blockquote><p>innodb_flush_log_at_trx_commit=1</p><blockquote><p>参数可供选择0-1-2，0时性能最好，2时安全性最高，默认选中1</p></blockquote><p>innodb_additional_mem_pool_size=20M</p><blockquote><p>设置 InnoDB 存储的数据目录信息和其它内部数据结构的内存池大小，根据项目的InnoDB表的数目相应地增加。参数对系统整体性能并无太大的影响，所以只要能存放需要的数据即可。推荐1/200*buffer_pool</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Optimize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loadrunner Error问题处理</title>
      <link href="/zh-cn/APP/Loadrunner/Loadrunner_Error.html"/>
      <url>/zh-cn/APP/Loadrunner/Loadrunner_Error.html</url>
      
        <content type="html"><![CDATA[<h1 id="Loadrunner报错，处理方法记录"><a href="#Loadrunner报错，处理方法记录" class="headerlink" title="Loadrunner报错，处理方法记录"></a>Loadrunner报错，处理方法记录</h1><a id="more"></a><h2 id="Error-26488-Could-not-obtain-information-about-submitted-file"><a href="#Error-26488-Could-not-obtain-information-about-submitted-file" class="headerlink" title="Error -26488: Could not obtain information about submitted file"></a>Error -26488: Could not obtain information about submitted file</h2><p>脚本中的上传操作回访时报错Error -26488是因为Loadrunner默认文件上传位置为当前脚本所在的目录。</p><blockquote><p>解决方法：将上传的文件放到脚本的目录下</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> Loadrunner </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Percona Tookit学习手册 - pt-query-digest</title>
      <link href="/zh-cn/APP/MySQL/Percona_Tookit_pt-query-digest.html"/>
      <url>/zh-cn/APP/MySQL/Percona_Tookit_pt-query-digest.html</url>
      
        <content type="html"><![CDATA[<h2 id="pt-query-digest介绍"><a href="#pt-query-digest介绍" class="headerlink" title="pt-query-digest介绍"></a>pt-query-digest介绍</h2><a id="more"></a><p>pt-query-digest是用于分析mysql慢查询的一个工具，它可以分析binlog、General log、slowlog，也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析。可以把分析结果输出到文件中，分析过程是先对查询语句的条件进行参数化，然后对参数化以后的查询进行分组统计，统计出各查询的执行时间、次数、占比等，可以借助分析结果找出问题进行优化。</p><h3 id="慢查询日志开启方法"><a href="#慢查询日志开启方法" class="headerlink" title="慢查询日志开启方法"></a>慢查询日志开启方法</h3><p>在mysql的my.ini文件中的mysqld中添加下面参数，然后重启mysql。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">slow_query_log_file='/home/mysql/sql_log/mysql-slow.log'  //设置慢查询日志位置</span><br><span class="line">log_queries_not_using_indexes=on  //设置是否把没有使用索引的SQL放到慢查询日志中,off是没有开启,on是开始</span><br><span class="line">slow_query_log=on  //设置开启慢查询日志,off是没有开启,on是开始</span><br><span class="line">long_query_time=1  //查过多少秒的查询设置到慢查询日志中,单位是秒</span><br></pre></td></tr></table></figure><blockquote><p>long_query_time=1设置后，实际上mysql也会把一些小于1S的操作记录下来，主要是因为索引的影响，可以直接把额外的记录忽略。</p></blockquote><h3 id="pt-query-digest语法"><a href="#pt-query-digest语法" class="headerlink" title="pt-query-digest语法"></a>pt-query-digest语法</h3><blockquote><p>pt-query-digest [OPTIONS] [FILES] [DSN]</p></blockquote><p>–create-review-table  当使用–review参数把分析结果输出到表中时，如果没有表就自动创建。<br>–create-history-table  当使用–history参数把分析结果输出到表中时，如果没有表就自动创建。<br>–filter  对输入的慢查询按指定的字符串进行匹配过滤后再进行分析<br>–limit限制输出结果百分比或数量，默认值是20,即将最慢的20条语句输出，如果是50%则按总响应时间占比从大到小排序，输出到总和达到50%位置截止。<br>–host  MySQL服务器地址<br>–user  mysql用户名<br>–password  mysql用户密码<br>–history 将分析结果保存到表中，分析结果比较详细，下次再使用–history时，如果存在相同的语句，且查询所在的时间区间和历史表中的不同，则会记录到数据表中，可以通过查询同一CHECKSUM来比较某类型查询的历史变化。<br>–review 将分析结果保存到表中，这个分析只是对查询条件进行参数化，一个类型的查询一条记录，比较简单。当下次使用–review时，如果存在相同的语句分析，就不会记录到数据表中。<br>–output 分析结果输出类型，值可以是report(标准分析报告)、slowlog(Mysql slow log)、json、json-anon，一般使用report，以便于阅读。<br>–since 从什么时间开始分析，值为字符串，可以是指定的某个”yyyy-mm-dd [hh:mm:ss]”格式的时间点，也可以是简单的一个时间值：s(秒)、h(小时)、m(分钟)、d(天)，如12h就表示从12小时前开始统计。<br>–until 截止时间，配合—since可以分析一段时间内的慢查询，格式与since相同。</p><h3 id="pt-query-digest使用方法"><a href="#pt-query-digest使用方法" class="headerlink" title="pt-query-digest使用方法"></a>pt-query-digest使用方法</h3><h4 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest /usr/local/mysql/data/slow.log | more</span><br></pre></td></tr></table></figure><h4 id="输出到数据库"><a href="#输出到数据库" class="headerlink" title="输出到数据库"></a>输出到数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest slow.log -review \</span><br><span class="line">h=127.0.0.1,D=test,p=root,P=3306,u=root,t=query_review \</span><br><span class="line"><span class="comment">--create-reviewtable \</span></span><br><span class="line"><span class="comment">--review-history t= hostname_slow</span></span><br></pre></td></tr></table></figure><h4 id="分析最近12小时内的查询"><a href="#分析最近12小时内的查询" class="headerlink" title="分析最近12小时内的查询"></a>分析最近12小时内的查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest  <span class="comment">--since=12h  slow.log &gt; slow_report2.log</span></span><br></pre></td></tr></table></figure><h4 id="分析指定时间范围内的查询"><a href="#分析指定时间范围内的查询" class="headerlink" title="分析指定时间范围内的查询"></a>分析指定时间范围内的查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest slow.log <span class="comment">--since '2014-04-17 09:30:00' --until '2014-04-17 10:00:00'&gt; &gt; slow_report3.log</span></span><br></pre></td></tr></table></figure><h4 id="分析指含有select语句的慢查询"><a href="#分析指含有select语句的慢查询" class="headerlink" title="分析指含有select语句的慢查询"></a>分析指含有select语句的慢查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest<span class="comment">--filter '$event-&gt;&#123;fingerprint&#125; =~ m/^select/i' slow.log&gt; slow_report4.log</span></span><br></pre></td></tr></table></figure><h4 id="针对某个用户的慢查询"><a href="#针对某个用户的慢查询" class="headerlink" title="针对某个用户的慢查询"></a>针对某个用户的慢查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest<span class="comment">--filter '($event-&gt;&#123;user&#125; || "") =~ m/^root/i' slow.log&gt; slow_report5.log</span></span><br></pre></td></tr></table></figure><h4 id="查询所有所有的全表扫描或full-join的慢查询"><a href="#查询所有所有的全表扫描或full-join的慢查询" class="headerlink" title="查询所有所有的全表扫描或full join的慢查询"></a>查询所有所有的全表扫描或full join的慢查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest<span class="comment">--filter '(($event-&gt;&#123;Full_scan&#125; || "") eq "yes") ||(($event-&gt;&#123;Full_join&#125; || "") eq "yes")' slow.log&gt; slow_report6.log</span></span><br></pre></td></tr></table></figure><h4 id="把查询保存到query-review表"><a href="#把查询保存到query-review表" class="headerlink" title="把查询保存到query_review表"></a>把查询保存到query_review表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest  <span class="comment">--user=root –password=abc123 --review  h=localhost,D=test,t=query_review--create-review-table  slow.log</span></span><br></pre></td></tr></table></figure><h4 id="把查询保存到query-history表"><a href="#把查询保存到query-history表" class="headerlink" title="把查询保存到query_history表"></a>把查询保存到query_history表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest  <span class="comment">--user=root –password=abc123 --review  h=localhost,D=test,t=query_history--create-review-table  slow.log_20140401</span></span><br><span class="line">pt-query-digest  <span class="comment">--user=root –password=abc123 --review  h=localhost,D=test,t=query_history--create-review-table  slow.log_20140402</span></span><br></pre></td></tr></table></figure><h4 id="通过tcpdump抓取mysql的tcp协议数据，然后再分析"><a href="#通过tcpdump抓取mysql的tcp协议数据，然后再分析" class="headerlink" title="通过tcpdump抓取mysql的tcp协议数据，然后再分析"></a>通过tcpdump抓取mysql的tcp协议数据，然后再分析</h4><p>pt-query-digest对于抓包有一定的格式。(-x -nn -q -tttt)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">tcpdump -s 65535 -x -nn -q -tttt -i any -c 1000 port 3306 &gt; mysql.tcp.txt</span><br><span class="line">pt-query-digest <span class="comment">--type tcpdump mysql.tcp.txt&gt; slow_report9.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -s:源端口</span></span><br><span class="line"><span class="comment"># -c:抓包的数量</span></span><br></pre></td></tr></table></figure><h4 id="分析binlog"><a href="#分析binlog" class="headerlink" title="分析binlog"></a>分析binlog</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysql-bin.000093 &gt; mysql-bin000093.sql</span><br><span class="line">pt-query-digest  <span class="comment">--type=binlog  mysql-bin000093.sql &gt; slow_report10.log</span></span><br></pre></td></tr></table></figure><h4 id="分析general-log"><a href="#分析general-log" class="headerlink" title="分析general log"></a>分析general log</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pt-query-digest  <span class="comment">--type=genlog  localhost.log &gt; slow_report11.log</span></span><br></pre></td></tr></table></figure><h3 id="分析结果详解"><a href="#分析结果详解" class="headerlink" title="分析结果详解"></a>分析结果详解</h3><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 18.4s user time, 90ms system time, 27.27M rss, 223.26M vsz</span></span><br><span class="line"><span class="comment"># Current date: Tue May 10 11:51:19 2016</span></span><br><span class="line"><span class="comment"># Hostname: mjjw</span></span><br><span class="line"><span class="comment"># Files: /usr/local/mysql/data/mjjw-slow.log</span></span><br><span class="line"><span class="comment"># Overall: 29.20k total, 25 unique, 0.41 QPS, 0.51x concurrency __________</span></span><br><span class="line"><span class="comment"># Time range: 2016-05-09 16:12:24 to 2016-05-10 11:51:19</span></span><br><span class="line"><span class="comment"># Attribute          total     min     max     avg     95%  stddev  median</span></span><br><span class="line"><span class="comment"># ============     ======= ======= ======= ======= ======= ======= =======</span></span><br><span class="line"><span class="comment"># Exec time         36179s   120us     27s      1s     10s      3s   541us</span></span><br><span class="line"><span class="comment"># Lock time            15s       0   454ms   501us   839us     4ms   194us</span></span><br><span class="line"><span class="comment"># Rows sent         98.30k       0    1000    3.45   19.46    8.51    0.99</span></span><br><span class="line"><span class="comment"># Rows examine       5.22G       0   1.48M 187.54k   1.46M 367.29k   28.75</span></span><br><span class="line"><span class="comment"># Query size        46.97M      36   4.46k   1.65k   3.52k   1.46k  363.48</span></span><br></pre></td></tr></table></figure><p>Overall: 总共有多少条查询<br>unique: 唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询，该例为25。<br>Time range: 查询执行的时间范围。<br>total: 总计   min:最小   max: 最大  avg:平均  95%: 把所有值从小到大排列，位置位于95%的那个数，这个数一般最具有参考价值。<br>median: 中位数，把所有值从小到大排列，位置位于中间那个数。</p><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Profile</span></span><br><span class="line"><span class="comment"># Rank Query ID           Response time    Calls R/Call  V/M   Item</span></span><br><span class="line"><span class="comment"># ==== ================== ================ ===== ======= ===== ===========</span></span><br><span class="line"><span class="comment">#    1 0x3C82B414C14E5C06 14439.8524 39.9%  3220  4.4844  9.20 SELECT STUDENT STUDENT_SCHOOL SCHOOL_TABLE STUDENT_ORGAN ORGAN ORDER_FORM T_?_USE</span></span><br><span class="line">R_INFO STUDENT_SELL T_?_USER_INFO STUDENT_CONTACT_PERSON LEA_COU_ONE STUDENT_ASSISTANT T_?_USER_INFO LCO_ALLOT_TEACHER T_?_USER_INFO USER_DEPART</span><br><span class="line">MENT DEPARTMENT COURSE</span><br><span class="line"><span class="comment">#    2 0xB86C64C70BAA831C 10486.1545 29.0%   951 11.0265  0.55 SELECT STUDENT STUDENT_SCHOOL SCHOOL_TABLE STUDENT_ORGAN ORGAN ORDER_FORM T_?_USE</span></span><br><span class="line">R_INFO STUDENT_SELL T_?_USER_INFO STUDENT_CONTACT_PERSON LEA_COU_ONE STUDENT_ASSISTANT T_?_USER_INFO LCO_ALLOT_TEACHER T_?_USER_INFO USER_DEPART</span><br><span class="line">MENT DEPARTMENT COURSE</span><br><span class="line"><span class="comment">#    3 0x3A8823AD8857EA9D  4635.8130 12.8%  3200  1.4487  1.33 SELECT STUDENT STUDENT_SCHOOL SCHOOL_TABLE STUDENT_ORGAN ORGAN ORDER_FORM T_?_USE</span></span><br><span class="line">R_INFO STUDENT_SELL T_?_USER_INFO STUDENT_CONTACT_PERSON LEA_COU_ONE STUDENT_ASSISTANT T_?_USER_INFO LCO_ALLOT_TEACHER T_?_USER_INFO USER_DEPART</span><br><span class="line">MENT DEPARTMENT COURSE</span><br><span class="line"><span class="comment">#    4 0x86AC36DBACB13484  4626.3197 12.8%  3200  1.4457  2.07 SELECT STUDENT STUDENT_SCHOOL SCHOOL_TABLE STUDENT_ORGAN ORGAN ORDER_FORM T_?_USE</span></span><br><span class="line">R_INFO STUDENT_SELL T_?_USER_INFO STUDENT_CONTACT_PERSON LEA_COU_ONE STUDENT_ASSISTANT T_?_USER_INFO LCO_ALLOT_TEACHER T_?_USER_INFO USER_DEPART</span><br><span class="line">MENT DEPARTMENT COURSE</span><br><span class="line"><span class="comment">#    5 0x0363FA1F2388C4D2  1527.4343  4.2%  2268  0.6735  0.29 SELECT STUDENT STUDENT_SCHOOL SCHOOL_TABLE STUDENT_ORGAN ORGAN ORDER_FORM T_?_USE</span></span><br><span class="line">R_INFO STUDENT_SELL T_?_USER_INFO STUDENT_CONTACT_PERSON LEA_COU_ONE STUDENT_ASSISTANT T_?_USER_INFO LCO_ALLOT_TEACHER T_?_USER_INFO USER_DEPART</span><br><span class="line">MENT DEPARTMENT COURSE</span><br><span class="line"><span class="comment"># MISC 0xMISC               463.5191  1.3% 16357  0.0283   0.0 &lt;20 ITEMS&gt;</span></span><br></pre></td></tr></table></figure><p>这部分对查询进行参数化并分组，然后对各类查询的执行情况进行分析，结果按总执行时长，从大到小排序。<br>Response: 总的响应时间。<br>time: 该查询在本次分析中总的时间占比。<br>calls: 执行次数，即本次分析总共有多少条这种类型的查询语句。<br>R/Call: 平均每次执行的响应时间。<br>Item : 查询对象</p><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Query 1: 1.04 QPS, 4.65x concurrency, ID 0x3C82B414C14E5C06 at byte 45899007</span></span><br><span class="line"><span class="comment"># Scores: V/M = 9.20</span></span><br><span class="line"><span class="comment"># Time range: 2016-05-10 10:59:36 to 11:51:19</span></span><br><span class="line"><span class="comment"># Attribute    pct   total     min     max     avg     95%  stddev  median</span></span><br><span class="line"><span class="comment"># ============ === ======= ======= ======= ======= ======= ======= =======</span></span><br><span class="line"><span class="comment"># Count         11    3220</span></span><br><span class="line"><span class="comment"># Exec time     39  14440s    89ms     27s      4s     17s      6s   816ms</span></span><br><span class="line"><span class="comment"># Lock time     15      2s   370us   165ms   688us   881us     3ms   467us</span></span><br><span class="line"><span class="comment"># Rows sent      3   3.14k       1       1       1       1       0       1</span></span><br><span class="line"><span class="comment"># Rows examine  36   1.91G 244.46k   1.48M 620.56k   1.46M 573.76k 233.54k</span></span><br><span class="line"><span class="comment"># Query size    17   8.38M   2.67k   2.67k   2.67k   2.67k       0   2.67k</span></span><br><span class="line"><span class="comment"># String:</span></span><br><span class="line"><span class="comment"># Hosts</span></span><br><span class="line"><span class="comment"># Users        admin</span></span><br><span class="line"><span class="comment"># Query_time distribution</span></span><br><span class="line"><span class="comment">#   1us</span></span><br><span class="line"><span class="comment">#  10us</span></span><br><span class="line"><span class="comment"># 100us</span></span><br><span class="line"><span class="comment">#   1ms</span></span><br><span class="line"><span class="comment">#  10ms  ##</span></span><br><span class="line"><span class="comment">#    1s  #############</span></span><br><span class="line"><span class="comment">#  10s+  #############################</span></span><br><span class="line"><span class="comment"># Tables</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'STUDENT'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`STUDENT`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'STUDENT_SCHOOL'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`STUDENT_SCHOOL`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'SCHOOL_TABLE'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`SCHOOL_TABLE`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'STUDENT_ORGAN'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`STUDENT_ORGAN`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'ORGAN'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`ORGAN`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'ORDER_FORM'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`ORDER_FORM`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'T_0_USER_INFO'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`T_0_USER_INFO`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'STUDENT_SELL'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`STUDENT_SELL`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'STUDENT_CONTACT_PERSON'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`STUDENT_CONTACT_PERSON`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'LEA_COU_ONE'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`LEA_COU_ONE`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'STUDENT_ASSISTANT'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`STUDENT_ASSISTANT`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'LCO_ALLOT_TEACHER'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`LCO_ALLOT_TEACHER`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'USER_DEPARTMENT'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`USER_DEPARTMENT`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'DEPARTMENT'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`DEPARTMENT`\G</span></span><br><span class="line"><span class="comment">#    SHOW TABLE STATUS FROM `mysqlnew` LIKE 'COURSE'\G</span></span><br><span class="line"><span class="comment">#    SHOW CREATE TABLE `mysqlnew`.`COURSE`\G</span></span><br><span class="line"><span class="comment"># EXPLAIN /*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>)<span class="keyword">from</span>(<span class="keyword">SELECT</span> ATM_0.STUDENT_ID T_448_0,ATM_0.STU_NAME AFM_1,ATM_0.STU_SEX AFM_2,ATM_0.STU_SEX DIC_AFM_2,ATM_0.STU_PHONE AFM_3,ATM_0</span><br><span class="line">.STU_TYPE AFM_4,ATM_0.STU_TYPE DIC_AFM_4,ATM_0.EDUCATION AFM_5,ATM_0.EDUCATION DIC_AFM_5,ATM_0.ISVIP AFM_10,ATM_0.ISVIP DIC_AFM_10,ATM_0.STU_ABR</span><br><span class="line">OADTIME AFM_12,ATM_0.STU_ABROADTIME DIC_AFM_12,ATM_0.F_33345 AFM_13,ATM_0.SK_STYLE AFM_14,ATM_0.SK_STYLE DIC_AFM_14,ATM_0.CREATE_DATE AFM_16,ATM</span><br><span class="line">_0.IF_XY AFM_25,ATM_0.IF_XY DIC_AFM_25,ATM_0.STUDENT_ID LMF_ID,ATM_24_0.STU_ID RP_STU_ID_0,ATM_23_0.STU_ID RP_STU_ID_1,ATM_17_0.STU_ID RP_STU_ID</span><br><span class="line">_2,ATM_11_0.STU_ID RP_STU_ID_4,ATM_8_0.STU_ID RP_STU_ID_5,ATM_6_0.STU_ID RP_STU_ID_6 <span class="keyword">FROM</span> STUDENT ATM_0 <span class="keyword">INNER</span> <span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> ATM_24_0.STU_ID <span class="keyword">FROM</span> S</span><br><span class="line">TUDENT_SCHOOL ATM_24_0 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> SCHOOL_TABLE ATM_24_1 <span class="keyword">ON</span> ATM_24_1.SCHOOL_TABLE_ID=ATM_24_0.SCH_ID <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">AND</span>(ATM_24_1.SCHOOL_TABLE_ID <span class="keyword">IN</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>这部分是每种查询的详细情况<br>最上面的表格列出了执行次数、最大、最小、平均、95%等各项目的统计。<br>Databases: 库名<br>Users: 各个用户执行的次数（占比）<br>Query_time distribution : 查询时间分布, 长短体现区间占比，本例中1s-10s之间查询数量是10s以上的两倍。<br>Tables: 查询中涉及到的表<br>Explain: 示例</p><blockquote><p>官方文档：<a href="http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html" target="_blank" rel="noopener">http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html</a></p></blockquote><blockquote><p>参考：<a href="http://blog.csdn.net/seteor/article/details/24017913" target="_blank" rel="noopener">http://blog.csdn.net/seteor/article/details/24017913</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tookit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装MongoDB</title>
      <link href="/zh-cn/APP/MongoDB/linux_mongodb.html"/>
      <url>/zh-cn/APP/MongoDB/linux_mongodb.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><a id="more"></a><h4 id="在mongo官网下载最新版本的安装包"><a href="#在mongo官网下载最新版本的安装包" class="headerlink" title="在mongo官网下载最新版本的安装包"></a>在mongo官网下载最新版本的安装包</h4><blockquote><p><a href="https://www.mongodb.org/downloads#production" target="_blank" rel="noopener">https://www.mongodb.org/downloads#production</a></p></blockquote><h4 id="解压mongodb程序包"><a href="#解压mongodb程序包" class="headerlink" title="解压mongodb程序包"></a>解压mongodb程序包</h4><p>解压文件</p><blockquote><p>我这里为了方便，直接离线下载的程序包放到/usr/local/目录下，安装位置随意，注意下后面文件配置的路径就好了。</p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">tar zxvf mongodb<span class="literal">-linux</span><span class="literal">-x86_64</span><span class="literal">-rhel70</span><span class="literal">-3</span>.<span class="number">2.6</span>.tgz</span><br></pre></td></tr></table></figure><p>为了后面操作方便，改下文件名</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">mv mongodb<span class="literal">-linux</span><span class="literal">-x86_64</span><span class="literal">-rhel70</span><span class="literal">-3</span>.<span class="number">2.6</span> mongodb</span><br></pre></td></tr></table></figure><p>进入mongodb的目录</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cd mongodb</span><br></pre></td></tr></table></figure><p>新建mongdb的data和log目录</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">mkdir db</span><br><span class="line">cd db</span><br><span class="line">mkdir <span class="keyword">data</span></span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure><p>创建MongoDB.log文件</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cd logs</span><br><span class="line">vi MongoDB.log</span><br><span class="line"><span class="comment">#直接使用wq命令保存文件</span></span><br></pre></td></tr></table></figure><h4 id="新建mongo的conf文件"><a href="#新建mongo的conf文件" class="headerlink" title="新建mongo的conf文件"></a>新建mongo的conf文件</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line">vi mongodb.conf</span><br></pre></td></tr></table></figure><blockquote><p>填入下面的内容，使用wq命令保存退出</p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">dbpath=/usr/local/mongodb/db/<span class="keyword">data</span></span><br><span class="line">logpath=/usr/local/mongodb/db/logs/MongoDB.log</span><br><span class="line">port=<span class="number">27017</span></span><br><span class="line">fork=true</span><br><span class="line">nohttpinterface=true</span><br></pre></td></tr></table></figure><h3 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h3><h4 id="mongodb的配置文件地址"><a href="#mongodb的配置文件地址" class="headerlink" title="mongodb的配置文件地址"></a>mongodb的配置文件地址</h4><p>输入下面的命令</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">./mongod <span class="operator">-f</span> /usr/local/mongodb/bin/mongodb.conf</span><br></pre></td></tr></table></figure><blockquote><p>弹出下面的内容则证明配置成功</p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">mjjw</span> <span class="type">bin</span>]<span class="comment"># ./mongod -f /usr/local/mongodb/bin/mongodb.conf</span></span><br><span class="line">about to fork child <span class="keyword">process</span>, waiting <span class="keyword">until</span> server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked <span class="keyword">process</span>: <span class="number">2292</span></span><br><span class="line">child <span class="keyword">process</span> started successfully, parent exiting</span><br></pre></td></tr></table></figure><blockquote><p>这时候已经可以正常启动关闭了，启动是直接运行bin目录下的mongo文件</p></blockquote><h4 id="设置mongdb为自动启动"><a href="#设置mongdb为自动启动" class="headerlink" title="设置mongdb为自动启动"></a>设置mongdb为自动启动</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><blockquote><p>在最后面填入下面的内容</p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">/usr/local/mongodb/bin/mongod -<span class="literal">-config</span> /usr/local/mongodb/bin/mongodb.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyEclipse2015启动Tomcat中项目时报错HttpSession出错</title>
      <link href="/zh-cn/APP/MyEclipse/MyEclipse2015_HttpSession_error.html"/>
      <url>/zh-cn/APP/MyEclipse/MyEclipse2015_HttpSession_error.html</url>
      
        <content type="html"><![CDATA[<h2 id="MyEclipse2015启动Tomcat中项目时报错HttpSession出错"><a href="#MyEclipse2015启动Tomcat中项目时报错HttpSession出错" class="headerlink" title="MyEclipse2015启动Tomcat中项目时报错HttpSession出错"></a>MyEclipse2015启动Tomcat中项目时报错HttpSession出错</h2><a id="more"></a><p>Tomcat中项目时报错HttpSession出错，如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/mj_oto_edus_auto_new]]</span><br><span class="line">************************************</span><br><span class="line">Caused by: java.lang.NoClassDefFoundError: HttpSession</span><br><span class="line">************************************</span><br><span class="line">Caused by: java.lang.NoClassDefFoundError: HttpSessionBindingEvent</span><br><span class="line">************************************</span><br></pre></td></tr></table></figure><p>百度搜索HttpSession的信息,百科对它的简单介绍是Java的一个接口。</p><blockquote><p>HttpSession是Java平台对session机制的实现规范，因为它仅仅是个接口，具体到每个web应用服务器的提供商，除了对规范支持之外，仍然会有一些规范里没有规定的细微差异。</p></blockquote><h4 id="HttpSession-Java-EE-5-SDK"><a href="#HttpSession-Java-EE-5-SDK" class="headerlink" title="HttpSession (Java EE 5 SDK)"></a><a href="http://www.baidu.com/link?url=qVAKkg9VvrY8jxVRdnzq9pMkL4ohgErwtvWY9PNUTF0K7fbY2rjd3uErWygKyqjYXB7tmNMMVy-wCQyO9u67yTK5Dc0LjR9aGaHlbaKOTgC0iEGz_WJaemVRAg-rYfsC&wd=&eqid=835b47ba000119cc00000003572af1b5" target="_blank" rel="noopener"><em>HttpSession</em> (Java EE 5 SDK)</a></h4><p>发现原来他是在Java EE 5中，于是在MyEclipse中Libraries中加上“JavaEE 5.0 Generic Library”，继续执行项目，项目继续报错，缺少jstl。<br>查看“JavaEE 5.0 Generic Library”发现其中只有一个“javaee.jar”,于是在MyEclipse的目录中找到“javaee.jar”所在的目录，发现其中有个文件README.txt</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">This folder contains libraries obtained from the Sun JEE5 Referene SDK.  </span><br><span class="line">http:<span class="comment">//java.sun.com/javaee/downloads/index.jsp</span></span><br><span class="line">The license <span class="keyword">for</span> these <span class="number">3</span> jar libraries is also contained in <span class="keyword">this</span> folder.</span><br><span class="line"></span><br><span class="line">The JSF <span class="number">1.2</span> <span class="function">implementation <span class="title">files</span> <span class="params">(jsf-impl.jar, jsf-api.jar)</span></span></span><br><span class="line"><span class="function">were obtained from: https:<span class="comment">//javaserverfaces.dev.java.net/files/documents/1866/52042/jsf-1.2_04-b07-FCS.zip</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">The JSTL 1.2 implementation files: <span class="params">(jstl<span class="number">-1.2</span>.jar)</span></span></span><br><span class="line"><span class="function">were obtained from: https:<span class="comment">//maven-repository.dev.java.net/repository/jstl/jars/jstl-1.2.jar</span></span></span><br></pre></td></tr></table></figure><p>发现原来还少jsf-impl.jar, jsf-api.jar，jstl-1.2.jar这三个文件<br>于是继续在Library中添加JSF Mojarra 1.2_04 Libraries,JSTL 1.2 Library两项。</p><blockquote><p>JSF Mojarra 1.2_04 Libraries 包含jsf-impl.jar, jsf-api.jar<br>JSTL 1.2 Library 包含jstl-1.2.jar</p></blockquote><p>然后运行Tomcat，问题解决</p><p>我是在MyEclipse 2015使用的，其他版本的不清楚，也可以直接下载到本地，加载到项目中。</p><blockquote><p>百度网盘链接: <a href="http://pan.baidu.com/s/1gfNhWcz" target="_blank" rel="noopener">http://pan.baidu.com/s/1gfNhWcz</a> 密码: r39f</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MyEclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Failed </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyEclipse2015项目报错Failed while installing Dynamic Web Module 2.5</title>
      <link href="/zh-cn/APP/MyEclipse/MyEclipse2015_Failed_2.5.html"/>
      <url>/zh-cn/APP/MyEclipse/MyEclipse2015_Failed_2.5.html</url>
      
        <content type="html"><![CDATA[<h2 id="错误信息Failed-while-installing-Dynamic-Web-Module-2-5解决方法"><a href="#错误信息Failed-while-installing-Dynamic-Web-Module-2-5解决方法" class="headerlink" title="错误信息Failed while installing Dynamic Web Module 2.5解决方法"></a>错误信息Failed while installing Dynamic Web Module 2.5解决方法</h2><a id="more"></a><p>使用MyEclipse 2015从SVN检出代码后，项目无法放到Tomcat中，提示错误信息</p><blockquote><p>Failed while installing Dynamic Web Module 2.5</p></blockquote><p>解决方法是在MyEclipse中 ，右键项目选择“Properties”，找到“Project Facets”项</p><blockquote><p>找到 Dynamic Web Module ，把他后面的3.0改成 2.5</p></blockquote><p>再执行添加项目操作就可以将项目导入Tomcat中了。</p>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MyEclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Failed </tag>
            
            <tag> Svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下安装MongoDB</title>
      <link href="/zh-cn/APP/MongoDB/windows_mongodb_install.html"/>
      <url>/zh-cn/APP/MongoDB/windows_mongodb_install.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><a id="more"></a><h4 id="在mongo官网下载最新版本的安装包"><a href="#在mongo官网下载最新版本的安装包" class="headerlink" title="在mongo官网下载最新版本的安装包"></a>在mongo官网下载最新版本的安装包</h4><blockquote><p><a href="https://www.mongodb.org/downloads#production" target="_blank" rel="noopener">https://www.mongodb.org/downloads#production</a></p></blockquote><p>下载完直接安装就可以了</p><h4 id="创建库目录和Log目录"><a href="#创建库目录和Log目录" class="headerlink" title="创建库目录和Log目录"></a>创建库目录和Log目录</h4><p>进入mongo的安装目录，在“bin”目录的同级创建“data”目录，然后在“data”目录下创建“db”和“logs”目录<br>在logs目录下新建一个txt文件，将文件名改为MongoDB.log</p><blockquote><p>txt文件改为log格式文件</p></blockquote><h4 id="安装mongo"><a href="#安装mongo" class="headerlink" title="安装mongo"></a>安装mongo</h4><p>管理员运行cmd，cd打开进入mongo的bin目录</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cd C:\Program Files\MongoDB\<span class="built_in">Server</span>\<span class="number">3.2</span>\bin</span><br></pre></td></tr></table></figure><p>安装mongo</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mongod --dbpath <span class="string">"C:\Program Files\MongoDB\Server\3.2\data\db"</span> --logpath <span class="string">"C:\Program Files\MongoDB\Server\3.2\data\logs\MongoDB.log"</span> --install --serviceName <span class="string">"MongoDB"</span></span><br></pre></td></tr></table></figure><p>出现下面内容，生成一个以日期命名的log文件时就是安装成功了<br><img src="http://7xt9fi.com1.z0.glb.clouddn.com/windows_mongo_install.png" alt=""><br>以后执行mongo都可以用windows的net启动命令就可以了</p><blockquote><p>net start/stop/restart MongoDB</p></blockquote><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><h4 id="重启后无法启动mongo问题"><a href="#重启后无法启动mongo问题" class="headerlink" title="重启后无法启动mongo问题"></a>重启后无法启动mongo问题</h4><p>当电脑突然断电或其他不正常关闭时，又可能会发生mongo无法启动的情况，网上的参考方法很多，但是我用的时候发现启动的时候不要指定log比较好，当然这样就找不到log文件了。这里先记录下启动的命令，更好的处理方法日后再做更改。</p><blockquote><p>mongod –dbpath “C:\Program Files\MongoDB\Server\3.2\data\db”</p></blockquote><h4 id="使用客户端工具创建的库不能使用的问题"><a href="#使用客户端工具创建的库不能使用的问题" class="headerlink" title="使用客户端工具创建的库不能使用的问题"></a>使用客户端工具创建的库不能使用的问题</h4><p>不知道是不是我下载的版本有问题还是什么，总之用客户端创建的数据库刷新后mongo就给自动删除了。这时候创建数据库的方法是手工建库。<br>进入mongo的bin目录，执行mongo.exe文件，输入下面命令</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">use mydb</span><br><span class="line">db</span><br><span class="line">db.movie.insert(&#123;<span class="string">"name"</span>:<span class="string">"asdf"</span>&#125;)</span><br><span class="line">show dbs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL命令学习记录</title>
      <link href="/zh-cn/APP/MySQL/mysql_command.html"/>
      <url>/zh-cn/APP/MySQL/mysql_command.html</url>
      
        <content type="html"><![CDATA[<p>工作中用到的一些MySQL命令，记录下方便日后查询</p><a id="more"></a><h2 id="用户登录命令"><a href="#用户登录命令" class="headerlink" title="用户登录命令"></a>用户登录命令</h2><h3 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h3 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Mysql  -P 端口号  -h  mysql主机名\ip -u（用户）  -p（密码）</span><br></pre></td></tr></table></figure><h2 id="创建用户命令"><a href="#创建用户命令" class="headerlink" title="创建用户命令"></a>创建用户命令</h2><h3 id="创建本地用户命令"><a href="#创建本地用户命令" class="headerlink" title="创建本地用户命令"></a>创建本地用户命令</h3><!--more--><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="keyword">admin</span>@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span></span><br></pre></td></tr></table></figure><h3 id="创建远程用户"><a href="#创建远程用户" class="headerlink" title="创建远程用户"></a>创建远程用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="keyword">admin</span>@<span class="string">"%"</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span></span><br></pre></td></tr></table></figure><h2 id="查询命令"><a href="#查询命令" class="headerlink" title="查询命令"></a>查询命令</h2><h3 id="查看当前编码"><a href="#查看当前编码" class="headerlink" title="查看当前编码"></a>查看当前编码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character%'</span>;</span><br></pre></td></tr></table></figure><h3 id="查看当前数据库类型"><a href="#查看当前数据库类型" class="headerlink" title="查看当前数据库类型"></a>查看当前数据库类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character%'</span>;</span><br></pre></td></tr></table></figure><h3 id="查看死锁状态"><a href="#查看死锁状态" class="headerlink" title="查看死锁状态"></a>查看死锁状态</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'table%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下Percona Tookit rmp安装</title>
      <link href="/zh-cn/APP/MySQL/centos_tookit_rmp_install.html"/>
      <url>/zh-cn/APP/MySQL/centos_tookit_rmp_install.html</url>
      
        <content type="html"><![CDATA[<h2 id="Percona-Tookit下载"><a href="#Percona-Tookit下载" class="headerlink" title="Percona Tookit下载"></a>Percona Tookit下载</h2><a id="more"></a><p>CentOS7下默认是没有安装wget命令的，所以先安装wget命令。</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install wget</span><br></pre></td></tr></table></figure><p>在Percona官网找到最新版本下载地址（注：要是rpm哦），并复制到下面命令中，也可以直接下载到本地。</p><blockquote><p><a href="https://www.percona.com/downloads/percona-toolkit/" target="_blank" rel="noopener">https://www.percona.com/downloads/percona-toolkit/</a></p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/percona<span class="literal">-toolkit</span>/<span class="number">2.2</span>.<span class="number">17</span>/RPM/percona<span class="literal">-toolkit</span><span class="literal">-2</span>.<span class="number">2.17</span><span class="literal">-1</span>.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install perl<span class="literal">-DBI</span> perl<span class="literal">-DBD</span><span class="literal">-MySQL</span> perl<span class="literal">-Time</span><span class="literal">-HiRes</span> perl<span class="literal">-IO</span><span class="literal">-Socket</span><span class="literal">-SSL</span> perl<span class="literal">-Digest</span><span class="literal">-MD5</span> perl<span class="literal">-TermReadKey</span></span><br></pre></td></tr></table></figure><h2 id="Tookil安装"><a href="#Tookil安装" class="headerlink" title="Tookil安装"></a>Tookil安装</h2><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-Uvh</span> percona<span class="literal">-toolkit</span><span class="literal">-2</span>.<span class="number">2.17</span><span class="literal">-1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下MySQL源码安装</title>
      <link href="/zh-cn/APP/MySQL/centos_mysql_install.html"/>
      <url>/zh-cn/APP/MySQL/centos_mysql_install.html</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS下MySQL源码安装"><a href="#CentOS下MySQL源码安装" class="headerlink" title="CentOS下MySQL源码安装"></a>CentOS下MySQL源码安装</h2><a id="more"></a><h3 id="卸载系统自带的MySQL"><a href="#卸载系统自带的MySQL" class="headerlink" title="卸载系统自带的MySQL"></a>卸载系统自带的MySQL</h3><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载系统默认安装包</span></span><br><span class="line">yum remove mysql mysql<span class="literal">-server</span> mysql<span class="literal">-libs</span> compat<span class="literal">-mysql51</span></span><br><span class="line"><span class="comment"># 删除原始文件夹</span></span><br><span class="line">rm <span class="literal">-rf</span> /var/lib/mysql</span><br><span class="line">rm /etc/my.cnf</span><br><span class="line"><span class="comment"># 检查一下是否还有残留，有则删除</span></span><br><span class="line">rpm <span class="literal">-qa</span>|grep mysql</span><br></pre></td></tr></table></figure><h3 id="MySQL源码安装"><a href="#MySQL源码安装" class="headerlink" title="MySQL源码安装"></a>MySQL源码安装</h3><h4 id="MySQL下载"><a href="#MySQL下载" class="headerlink" title="MySQL下载"></a>MySQL下载</h4><!--more--><h5 id="下载地址，选择最下面“Generic-Linux”版本"><a href="#下载地址，选择最下面“Generic-Linux”版本" class="headerlink" title="下载地址，选择最下面“Generic Linux”版本"></a>下载地址，选择最下面“Generic Linux”版本</h5><blockquote><p><a href="http://dev.mysql.com/downloads/mysql/5.6.html#downloads" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/5.6.html#downloads</a></p></blockquote><p><img src="http://7xt9fi.com2.z0.glb.clouddn.com/mysql/installmysql-do.png" alt=""></p><h4 id="解压编译，安装工具包"><a href="#解压编译，安装工具包" class="headerlink" title="解压编译，安装工具包"></a>解压编译，安装工具包</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">tar xvf mysql<span class="literal">-5</span>.<span class="number">6.30</span>.tar.gz</span><br><span class="line">cd mysql<span class="literal">-5</span>.<span class="number">6.30</span></span><br><span class="line">yum <span class="literal">-y</span> install make gcc gcc<span class="literal">-c</span>++ cmake bison<span class="literal">-devel</span> ncurses<span class="literal">-devel</span> libaio bison libaio libaio<span class="literal">-devel</span> perl<span class="literal">-Data</span><span class="literal">-Dumper</span> net<span class="literal">-tools</span></span><br></pre></td></tr></table></figure><blockquote><p>编译，注意cmake \后面操作都带有“-”符号</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cmake \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci</span><br></pre></td></tr></table></figure><p>编译成功，执行安装</p><blockquote><p>MySQL5.7版本需增加“-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost”</p></blockquote><blockquote><p>如果编译出现问题，执行“rm CMakeCache.txt”，便可重新编译</p></blockquote><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户组和用户</span></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd <span class="literal">-g</span> mysql mysql</span><br><span class="line"><span class="comment"># 赋予权限</span></span><br><span class="line">chown <span class="literal">-R</span> mysql:mysql /usr/local/mysql</span><br><span class="line"><span class="comment"># 链接配置文件</span></span><br><span class="line">ln <span class="literal">-s</span> /usr/local/mysql/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure><blockquote><p>有时候执行service mysql start命令报错env: /etc/init.d/mysql:权限不够问题<br>解决办法：执行下面的语句<br>chmod a+wrx /etc/init.d/mysql</p></blockquote><h3 id="实例安装"><a href="#实例安装" class="headerlink" title="实例安装"></a>实例安装</h3><h4 id="进入安装包的路径"><a href="#进入安装包的路径" class="headerlink" title="进入安装包的路径"></a>进入安装包的路径</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br></pre></td></tr></table></figure><h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">scripts/mysql_install_db -<span class="literal">-basedir</span>=/usr/local/mysql -<span class="literal">-datadir</span>=/usr/local/mysql/<span class="keyword">data</span> -<span class="literal">-user</span>=mysql</span><br></pre></td></tr></table></figure><p>#####5.7以后版本，执行脚本方法变动如下</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment">#之前版本mysql_install_db是在mysql_basedir/script下，5.7放在了mysql_basedir/bin目录下,且已被废弃.</span></span><br><span class="line">/usr/local/mysql/bin/mysqld -<span class="literal">-initialize</span><span class="literal">-insecure</span> -<span class="literal">-user</span>=mysql -<span class="literal">-basedir</span>=/usr/local/mysql -<span class="literal">-datadir</span>=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line"><span class="comment">#“–initialize”会生成一个随机密码(~/.mysql_secret)，而”–initialize-insecure”不会生成密码.</span></span><br><span class="line"><span class="comment">#–datadir目标目录下不能有数据文件</span></span><br></pre></td></tr></table></figure><blockquote><p>/usr/local/mysql/my.cnf 为my.cnf默认路径</p></blockquote><h4 id="添加端口到防火墙"><a href="#添加端口到防火墙" class="headerlink" title="添加端口到防火墙"></a>添加端口到防火墙</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">firewall<span class="literal">-cmd</span> -<span class="literal">-zone</span>=public -<span class="literal">-add</span><span class="literal">-port</span>=<span class="number">3306</span>/tcp -<span class="literal">-permanent</span></span><br><span class="line">firewall<span class="literal">-cmd</span> -<span class="literal">-reload</span></span><br></pre></td></tr></table></figure><h4 id="添加服务，拷贝服务脚本到init-d目录，并设置开机启动"><a href="#添加服务，拷贝服务脚本到init-d目录，并设置开机启动" class="headerlink" title="添加服务，拷贝服务脚本到init.d目录，并设置开机启动"></a>添加服务，拷贝服务脚本到init.d目录，并设置开机启动</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cp support<span class="literal">-files</span>/mysql.server /etc/init.d/mysql</span><br><span class="line">chkconfig mysql on</span><br></pre></td></tr></table></figure><h1 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h1><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
