<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Soyl&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://soyl.tech/"/>
  <updated>2020-06-09T08:02:24.238Z</updated>
  <id>https://soyl.tech/</id>
  
  <author>
    <name>Soyl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户协议</title>
    <link href="https://soyl.tech/uncategorized/yonghuxieyi.html"/>
    <id>https://soyl.tech/uncategorized/yonghuxieyi.html</id>
    <published>2020-05-07T04:35:07.000Z</published>
    <updated>2020-06-09T08:02:24.238Z</updated>
    
    <content type="html"><![CDATA[<p><strong>重要提示：</strong><br>请您仔细阅读以下条款，并确认您已完全理解本协议之规定，尤其是免除及限制责任的条款、知识产权条款、法律适用及争议解决条款。<br>若您对本声明或本协议任何条款有异议，请停止注册或使用Soyl（soyl.tech，包括手机、电脑等移动设备客户端，下同）所提供的全部服务。</p><a id="more"></a><p><strong>一、协议的接受、变更与补充</strong><br>1、本协议是用户 (自然人、法人或社会团体)与Soyl Liu之间关于“轻启药箱”软件产品（以下简称“本软件产品”）的法律协议。一旦安装、复制或以其他方式使用本软件产品，即表示同意接受协议各项条件的约束。如果用户不同意协议的条件，请不要使用本软件产品。</p><p>2、Soyl Liu有权利对本协议进行修改，协议修改后，将通过在相关页面公告或发送通知等方式公布修改的内容，修改后的协议一经公布即有效的代替原协议。如果您不同意本协议的修改，请立即停止访问或使用本网站或取消已经获得的服务；如果您选择继续访问或使用本网站，则视为您已接受本协议的修改。</p><p>3、签署的本协议所列明的条款，并不能完全涵盖您与soyl.tech之间所有的权利和义务。因此，Soyl Liu不定期公布的其他声明、规则等均视为本协议之补充协议，为本协议不可分割的组成部分，与本协议具有同等法律效力。</p><p>4、如本协议与 soyl.tech 平台其它协议条款不一致，以其它协议条款内容为准。</p><p><strong>二、用户个人信息</strong><br><strong>1、个人信息的保护</strong><br>(1)保护用户个人信息及个人隐私是轻启药箱的基本原则之一。</p><p>(2)您在注册帐号或使用轻启药箱服务的过程中，需要填写一些必要的信息。若国家法律法规有特殊规定的，您可能还需要填写真实的身份信息。若您填写的信息不完整，可能无法注册帐户，或在使用轻启药箱服务过程中受到限制。</p><p>(3)我们将尽一切可能采取适当的技术手段，保证您可以访问、更新和更正自己的注册信息或使用我们的服务时提供的其他个人信息，但出于安全性和身份识别（如找回密码服务）的考虑，您可能无法修改注册时提供的初始注册信息及其他验证信息。</p><p>(4)轻启药箱将运用各种安全技术和程序建立完善的管理制度来保护您的个人信息，以免遭受未经授权的访问、使用或披露。</p><p>(5)未经您的同意，轻启药箱不会向轻启药箱以外的任何公司、组织和个人披露您的个人信息，但法律法规另有规定的除外。</p><p>(6)轻启药箱非常重视对未成年人个人信息的保护，若未成年人（尤其是十岁以下）希望得以使用轻启药箱提供的服务，必须得到父母（监护人）的同意。</p><p>(7)轻启药箱将通过技术手段、强化内部管理等办法充分保护用户的个人隐私信息，保证不对外公开或向第三方披露或提供用户注册资料及用户在使用网络服务时存储在soyl.tech平台、服务器或数据库的非公开内容和信息，但下列情况除外：</p><ol><li>事先获得用户的授权；</li><li>根据有关的法律法规要求；</li><li>按照相关政府主管部门和司法机关的要求；</li><li>为维护社会公众的利益；</li><li>为维护轻启药箱的合法权益。</li></ol><p><strong>2、个人信息的收集</strong><br>轻启药箱在提供服务时，可能会收集、储存和使用下列与您有关的信息。如果您不提供相关信息，可能无法注册成为我们的用户或无法享受我们提供的某些服务，或者无法达到相关服务拟达到的效果。<br>(1) 您提供的信息</p><ol><li>您在注册帐户或使用轻启药箱的服务时，向我们提供的相关个人信息，包括但不限于真实姓名、证件信息、电话号码、地址、电子邮件等；</li><li>您通过轻启药箱的服务向其他方提供的共享信息，以及您使用我们的服务时所储存的信息。</li></ol><p>(2)我们获取的您的信息<br>您使用轻启药箱服务时我们可能收集如下信息：使用轻启药箱服务时，系统可能通过cookies、web beacon或其他方式自动采集的技术信息，包括：</p><ol><li>设备或软件信息，包括但不限于您的移动设备、网页浏览器或用于接入我们服务的其他程序所提供的配置信息、您的IP地址、位置信息、设备存储和移动设备所用的版本和设备识别码；</li><li>在使用我们服务时搜索或浏览的信息，包括但不限于您浏览过的文章、搜索的关键词，以及您在使用我们服务时浏览或要求提供的其他信息和内容详情；</li><li>有关您曾使用的移动应用（APP）和其他软件的信息，以及您曾经使用该等移动应用和软件的信息。</li></ol><p><strong>3、个人信息的使用</strong><br>(1)我们可能将在向您提供服务的过程之中所收集的信息用作下列用途：</p><ol><li>向您提供服务；</li><li>在我们提供服务时，用于身份验证、客户服务、安全防范、诈骗监测、存档和备份用途，确保我们向您提供的产品和服务的安全性；</li><li>帮助我们设计新服务，改善我们现有服务；</li><li>使我们更加了解您如何接入和使用我们的服务，从而针对性地回应您的个性化需求，例如个性化的帮助服务和指示，或对您和其他用户作出其他方面的回应；</li><li>软件认证或管理软件升级；</li><li>让您参与有关我们产品和服务的调查。</li></ol><p><strong>(2)为了让您有更好的体验，也为了改善我们的服务，在符合相关法律法规的前提下，我们可能将通过某一项服务收集信息或向第三方提供用户的非个人隐私信息的方式，用于我们的其他服务。例如，在您使用我们的一项服务时所收集的信息，可能会用于向您提供特定内容，或向您展示与您相关的、非普遍推送的信息。</strong></p><p><strong>4、隐私政策</strong><br>我们非常重视您的个人信息保护，依据最新的监管要求上线并更新了轻启药箱 <a href="https://soyl.tech">《隐私政策》</a></p><p>该政策将帮助您了解以下内容：<br>1、 我们如何收集和使用您的个人信息<br>2、 我们如何使用 Cookie<br>3、 您的个人信息如何存储以及在全球范围转移<br>4、 我们如何共享、转让、公开披露您的个人信息<br>5、 我们如何保护您的个人信息<br>6、 您的权利<br>7、 未成年人条款<br>8、 本隐私政策时效及如何更新<br>9、 如何联系我们<br>10、其他</p><p>本隐私政策适用于「soyl.tech」的所有相关服务，请在使用我们的产品（或服务）前，仔细阅读并了解本《隐私政策》，我们会适时对隐私政策进行修订，请以该协议为准。</p><p><strong>四、轻启药箱的服务</strong></p><p><strong>1、轻启药箱的服务</strong><br>轻启药箱是一款药箱类APP。轻启药箱向用户提供但不限于以下服务：药品信息的收集、整理、删除。轻启药箱有权对前述服务内容进行增减或调整。除非本协议另有其它明示规定，轻启药箱增加或强化目前本服务的任何新功能，包括所推出的新产品，均受本使用协议之规范。</p><p><strong>2、设备</strong><br>(1) 您应当理解，您使用轻启药箱的服务需自行准备与相关服务有关的终端设备（如电脑、调制解调器等装置），并承担所需的费用（如电话费、上网费等费用）。<br>(2) 您理解并同意，您使用本服务时会耗用您的终端设备和带宽等资源。</p><p><strong>3、广告</strong><br>(1) 您同意轻启药箱可以在提供服务的过程中自行或由第三方广告商向您发送广告、推广或宣传信息（包括商业与非商业信息），其方式和范围可不经向您特别通知而变更。<br>(2) 轻启药箱依照法律的规定对第三方广告商履行相关义务，您应当自行判断广告信息的真实性并为自己的判断行为负责，除法律明确规定外，您因依该广告信息进行的交易或前述广告商提功内容而遭受的损失或损害轻启药箱不承担责任。<br>(3) 您同意，对轻启药箱服务中出现的广告信息，您应审慎判断其真实性和可靠性，除法律明确规定外，您应对依该广告信息进行的交易负责。<br>(4) 您同意，所有对您收取费用的服务或功能，均不能免除您接受轻启药箱所提供的广告。因为这是轻启药箱为所有用户提供综合服务的有效对价，您阅读本协议即视为对该规则的理解和接受。</p><p><strong>六、软件产品保护条款</strong></p><p>(1) 本软件产品之著作权及其它知识产权等相关权利或利益（包括但不限于现已取得或未来可取得之著作权、专利权、商标权、营业秘密等）皆为Soyl Liu所有。本软件产品受中华人民共和国版权法及国际版权条约和其他知识产权法及条约的保护。用户仅获得本软件产品的非排他性使用权<br>(2) 用户不得：删除本软件及其他副本上一切关于版权的信息；对本软件进行反向工程，如反汇编、反编译等；<br>(3) 本软件产品以现状方式提供，Soyl Liu不保证本软件产品能够或不能够完全满足用户需求，在用户手册、帮助文件、使用说明书等软件文档中的介绍性内容仅供用户参考，不得理解为对用户所做的任何承诺。Soyl Liu保留对软件版本进行升级，对功能、内容、结构、界面、运行方式等进行修改或自动更新的权利。</p><p>(4) 为了更好地服务于用户，或为了向用户提供具有个性的信息内容的需要，本软件产品可能会收集、传播某些信息，但Soyl Liu承诺不向未经授权的第三方提供此类信息，以保护用户隐私。</p><p>(5) Soyl Liu定义的信息内容包括：文字、软件、声音；本公司为用户提供的商业信息，所有这些内容受版权、商标权、和其它知识产权和所有权法律的保护。所以，用户只能在本公司授权下才能使用这些内容，而不能擅自复制、修改、编撰这些内容、或创造与内容有关的衍生产品。</p><p>(6) 如果您未遵守本协议的任何一项条款，Soyl Liu有权立即终止本协议，并保留通过法律手段追究责任。</p><p><strong>六、违法行为</strong><br>1、 您在使用本服务时须遵守法律法规，不得利用本服务从事违法违规行为，以及不得利用轻启药箱服务制作、上载、复制、发布、传播或者转载如下内容，包括但不限于：<br>(1) 反对宪法所确定的基本原则的；<br>(2) 危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的；<br>(3) 损害国家荣誉和利益的；<br>(4) 煽动民族仇恨、民族歧视，破坏民族团结的；<br>(5) 破坏国家宗教政策，宣扬邪教和封建迷信的；<br>(6) 散布谣言，扰乱社会秩序，破坏社会稳定的；<br>(7) 散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪的；<br>(8) 侮辱或者诽谤他人，侵害他人合法权益的；<br>(9) 含有法律、行政法规禁止的其他内容的信息。</p><p>2、 如果您违反了本条约定，相关国家机关或机构可能会对您提起诉讼、罚款或采取其他制裁措施，并要求轻启药箱给予协助。造成轻启药箱或第三方损害的，您应依法予以赔偿，轻启药箱不承担任何责任。</p><p>3、 如果轻启药箱发现或收到他人举报您发布的信息违反本条约定，轻启药箱有权进行独立判断并采取技术手段予以删除、屏蔽或断开链接。同时，轻启药箱有权视用户的行为性质，采取包括但不限于暂停或终止服务，限制、冻结或终止账号使用，追究法律责任等措施。</p><p>4、 您违反本条约定，导致任何第三方损害的，您应当独立承担责任；轻启药箱因此遭受损失的，您也应当一并赔偿。</p><p>5、 违反本条约定，视为您的严重违约，轻启药箱可以中止对您的服务，解除双方间的服务协议和法律关系，且无需退还您所支付的费用（如有），视为您支付轻启药箱的违约金，如不足以弥补轻启药箱的损失的，轻启药箱还可通过其他法律途径向您追索。</p><p><strong>七、青少年用户特别提示</strong><br>青少年用户必须遵守全国青少年网络文明公约：<br>要善于网上学习，不浏览不良信息；要诚实友好交流，不侮辱欺诈他人；要增强自护意识，不随意约会网友；要维护网络安全，不破坏网络秩序；要有益身心健康，不沉溺虚拟时空。</p><p><strong>八、 不可抗力与免责</strong><br>1、您理解并同意，在使用轻启药箱服务的过程中，可能会遇到不可抗力等风险因素，使轻启药箱提供的服务发生中断。不可抗力是指不能预见、不能克服并不能避免且对一方或双方造成重大影响的客观事件，包括但不限于自然灾害如洪水、地震、瘟疫流行和风暴等，以及社会事件如战争、动乱、政府行为等。出现上述情况时，soyl.tech将努力在第一时间与相关单位配合，及时进行修复，但是由此给您造成的损失，soyl.tech在法律允许的范围内免责。</p><p>2、在法律允许的范围内，soyl.tech对以下情形导致的服务中断或受阻不承担责任：<br>(1) 受到计算机病毒、木马或其他恶意程序、黑客攻击的破坏；<br>(2) 用户或轻启药箱的电脑软件、系统、硬件和通信线路出现故障；<br>(3) 用户操作不当；<br>(4) 用户通过非轻启药箱授权的方式使用轻启药箱服务；<br>(5) 其他轻启药箱无法控制或合理预见的情形。</p><p>3、您理解并同意，在使用轻启药箱服务的过程中，可能会遇到网络信息或其他用户行为带来的风险，轻启药箱不对非轻启药箱发布的任何信息的真实性、适用性、合法性承担责任，也不对因侵权行为给您造成的损害负责。这些风险包括但不限于：<br>(1) 来自他人匿名或冒名的含有威胁、诽谤、令人反感或非法内容的信息；<br>(2) 因使用本协议项下的服务，遭受他人误导、欺骗或其他导致或可能导致的任何心理、生理上的伤害以及经济上的损失；<br>(3) 其他因网络信息或用户行为引起的风险。</p><p>4、您理解并同意，轻启药箱提供的服务并非为某些特定目的（包括但不限于核设施、军事用途、医疗设施、交通通讯等重要领域）而设计，如果因为软件或服务的原因导致上述操作失败而带来的人员伤亡、财产损失和环境破坏等，soyl.tech不承担法律责任。</p><p>5、soyl.tech依据本协议约定获得处理违法违规内容的权利，该权利不构成soyl.tech的义务或承诺，soyl.tech不能保证及时发现违法行为或进行相应处理。</p><p>6、在任何情况下，您不应轻信借款、索要密码或其他涉及财产的网络信息。涉及财产操作的，请一定先核实对方身份，并请经常留意轻启药箱或其他部门发布的有关防范诈骗犯罪的提示。</p><p>7、用户在soyl.tech发表的内容仅表明其个人的立场和观点，并不代表soyl.tech的立场或观点。作为内容的发表者，用户需自行对所发表内容负责，因所发表内容引发的一切纠纷，由该内容的发表者承担全部法律及连带责任；作为读者，用户应当自行对所看到的文章等内容进行甄别，并承担依照该等内容操作所带来的一切后果。soyl.tech不承担任何法律及连带责任。</p><p><strong>九、协议的生效与修改</strong><br>1、 您进入轻启药箱并使用轻启药箱的服务即视为您已阅读本协议并接受本协议的约束。<br>2、 轻启药箱有权在必要时修改本协议条款，您可以在相关服务页面查阅最新版本的协议条款。<br>3、 本协议条款变更后，如果您继续使用轻启药箱提供的服务，即视为您已接受修改后的协议。如果您不接受修改后的协议，应当退出轻启药箱并停止使用轻启药箱提供的服务。</p><p><strong>十、 有效期及终止</strong><br>1、 除本协议约定终止之情形外，本协议将会一直有效。<br>2、 终止的情形：<br>(1) 如你书面通知soyl.tech不接受本协议或对其的修改，轻启药箱有权随时终止向你提供本功能。<br>(2) 因不可抗力因素导致你无法继续使用本功能或轻启药箱无法提供本功能的，soyl.tech有权随时终止协议<br>(3) 本协议约定的其他终止条件发生或实现的，soyl.tech有权随时终止向你提供本功能。<br>(4) 由于你违反本协议约定，轻启药箱依约终止向你提供本功能后，如你后续再直接或间接，或以他人名义注册使用本功能的，soyl.tech有权直接单方面暂停或终止提 供本功能。<br>(5) 协议生效期间如遇国家法律、法规、国家相关部门及电信运营商有新相关文件出台或政策环境产生变化，致使本协议之签订、履行基础产生根本性变化的。</p><p>3、 如本协议或本功能因为任何原因终止的，对于你的帐户中的全部数据或你因使用本功能而存储在soyl.tech服务器中的数据等任何信息，soyl.tech可将该等信息保留或删除，包括服务终止前你尚未完成的任何数据。</p><p>4、 如本协议或本功能因为任何原因终止的，你应自行处理好关于数据等信息的备份以及与你的用户之间的相关事项的处理等。</p><p><strong>十一、 其他</strong><br>1、 本协议的订立、执行和解释及争议的解决均应适用中华人民共和国法律。<br>2、 如双方就本协议内容或其执行发生任何争议，双方应尽量友好协商解决；协商不成时，任何一方均可向百度公司所在地北京市海淀区人民法院提起诉讼。<br>3、 如本协议中的任何条款无论因何种原因完全或部分无效或不具有执行力，本协议的其余条款仍应有效并且有约束力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;重要提示：&lt;/strong&gt;&lt;br&gt;请您仔细阅读以下条款，并确认您已完全理解本协议之规定，尤其是免除及限制责任的条款、知识产权条款、法律适用及争议解决条款。&lt;br&gt;若您对本声明或本协议任何条款有异议，请停止注册或使用Soyl（soyl.tech，包括手机、电脑等移动设备客户端，下同）所提供的全部服务。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CloudKit 问题集锦</title>
    <link href="https://soyl.tech/uncategorized/cloudkit_question.html"/>
    <id>https://soyl.tech/uncategorized/cloudkit_question.html</id>
    <published>2020-04-22T09:20:45.000Z</published>
    <updated>2020-06-07T08:38:48.463Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="字段识别"><a href="#字段识别" class="headerlink" title="字段识别"></a>字段识别</h2><p><a href="https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitQuickStart/CreatingaSchemabySavingRecords/CreatingaSchemabySavingRecords.html#//apple_ref/doc/uid/TP40014987-CH3-SW4">Apple Developer</a></p><table><thead><tr><th align="center">CloudKit</th><th align="center">Class</th></tr></thead><tbody><tr><td align="center">String(list)</td><td align="center">NSArray</td></tr><tr><td align="center">String</td><td align="center">NSString</td></tr><tr><td align="center">Asset</td><td align="center">CKAsset</td></tr><tr><td align="center">Bytes</td><td align="center">NSData</td></tr><tr><td align="center">Date/Time</td><td align="center">NSDate</td></tr><tr><td align="center">Double</td><td align="center">NSNumber</td></tr><tr><td align="center">Int(64)</td><td align="center">NSNumber</td></tr><tr><td align="center">Location</td><td align="center">CLLocation</td></tr><tr><td align="center">Reference</td><td align="center">CKReference</td></tr></tbody></table><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="Field-‘-createTime’-is-not-marked-sortable"><a href="#Field-‘-createTime’-is-not-marked-sortable" class="headerlink" title="Field ‘___createTime’ is not marked sortable"></a>Field ‘___createTime’ is not marked sortable</h3><p>确保CloudKit的Schema中Indexes设置Sortable </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;字段识别&quot;&gt;&lt;a href=&quot;#字段识别&quot; class=&quot;headerlink&quot; title=&quot;字段识别&quot;&gt;&lt;/a&gt;字段识别&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>URLSession</title>
    <link href="https://soyl.tech/uncategorized/URLSession.html"/>
    <id>https://soyl.tech/uncategorized/URLSession.html</id>
    <published>2020-03-30T01:34:40.000Z</published>
    <updated>2020-06-07T08:38:53.291Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="httpBody"><a href="#httpBody" class="headerlink" title="httpBody"></a>httpBody</h4><h5 id="自定义格式"><a href="#自定义格式" class="headerlink" title="自定义格式"></a>自定义格式</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHttp</span><span class="params">(params: [String:<span class="keyword">Any</span>])</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    request.httpBody = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.data(withJSONObject: params, options: .prettyPrinted)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> params = [<span class="string">"id"</span>:dataApiDrugs.descriptionID] <span class="keyword">as</span> [<span class="type">String</span>:<span class="type">Any</span>]</span><br><span class="line"><span class="keyword">self</span>.postHttp(url: <span class="string">"https://siboxapi.herokuapp.com/description/select"</span>, params: params)</span><br></pre></td></tr></table></figure><h5 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHttp</span><span class="params">(params: PostParm)</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    request.httpBody = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.data(withJSONObject: params, options: .prettyPrinted)</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        request.httpBody = <span class="keyword">try</span> <span class="type">JSONEncoder</span>().encode(parm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//api接口参数结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PostParm</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> myParam = <span class="type">PostParm</span>(id: dataApiDrugs.descriptionID)</span><br><span class="line"><span class="keyword">self</span>.postHttp(url: <span class="string">"https://siboxapi.herokuapp.com/description/select"</span>, params: myParam)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;httpBody&quot;&gt;&lt;a href=&quot;#httpBody&quot; class=&quot;headerlink&quot; title=&quot;httpBody&quot;&gt;&lt;/a&gt;httpBody&lt;/h4&gt;&lt;h5 id=&quot;自定义格式&quot;&gt;&lt;a href=&quot;#自定义格式&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Homebrew命令</title>
    <link href="https://soyl.tech/uncategorized/homebrew.html"/>
    <id>https://soyl.tech/uncategorized/homebrew.html</id>
    <published>2020-03-23T07:46:35.000Z</published>
    <updated>2020-06-07T08:39:05.324Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Homebrew完美卸载软件及其依赖包"><a href="#Homebrew完美卸载软件及其依赖包" class="headerlink" title="Homebrew完美卸载软件及其依赖包"></a>Homebrew完美卸载软件及其依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew tap beeftornado/rmtree</span><br><span class="line">brew rmtree git  #卸载git及其依赖安装包</span><br><span class="line">brew cleanup</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;Homebrew完美卸载软件及其依赖包&quot;&gt;&lt;a href=&quot;#Homebrew完美卸载软件及其依赖包&quot; class=&quot;headerlink&quot; title=&quot;Homebrew完美卸载软件及其依赖包&quot;&gt;&lt;/a&gt;Homebrew完美
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Swift CoreData @FetchRequest</title>
    <link href="https://soyl.tech/Swift/Core-Data/FetchRequest/swift_coredata_fetchrequest.html"/>
    <id>https://soyl.tech/Swift/Core-Data/FetchRequest/swift_coredata_fetchrequest.html</id>
    <published>2020-03-21T07:48:30.000Z</published>
    <updated>2020-06-07T08:38:59.125Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">FetchRequest</span>(</span><br><span class="line">    entity: <span class="type">UserInfo</span>.entity(),</span><br><span class="line">    sortDescriptors: [</span><br><span class="line">        <span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">UserInfo</span>.name, ascending: <span class="literal">true</span>)</span><br><span class="line">    ],</span><br><span class="line">    predicate: <span class="type">NSPredicate</span>(format: <span class="string">"name == %@"</span>, <span class="string">"Lilei"</span>))</span><br><span class="line">) <span class="keyword">var</span> userinfoes: <span class="type">FetchedResults</span>&lt;<span class="type">UserInfo</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="NSPredicate"><a href="#NSPredicate" class="headerlink" title="NSPredicate"></a>NSPredicate</h4><blockquote><p>描述了一个过滤器，我们将使用它来决定显示哪些结果</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">"name == %@"</span>, <span class="string">"LiLei"</span>)</span><br></pre></td></tr></table></figure><h4 id="NSSortDescriptor"><a href="#NSSortDescriptor" class="headerlink" title="NSSortDescriptor"></a>NSSortDescriptor</h4><blockquote><p>告诉我们要在哪个字段上进行排序，以及我们要它递增还是递减</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">UserInfo</span>.name, ascending: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;type&quot;&gt;FetchRequest&lt;/span
      
    
    </summary>
    
    
      <category term="Swift" scheme="https://soyl.tech/categories/Swift/"/>
    
      <category term="Core Data" scheme="https://soyl.tech/categories/Swift/Core-Data/"/>
    
      <category term="FetchRequest" scheme="https://soyl.tech/categories/Swift/Core-Data/FetchRequest/"/>
    
    
      <category term="Swift" scheme="https://soyl.tech/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI  Picker</title>
    <link href="https://soyl.tech/SwiftUI/swiftui_picker.html"/>
    <id>https://soyl.tech/SwiftUI/swiftui_picker.html</id>
    <published>2020-03-11T15:19:02.000Z</published>
    <updated>2020-06-07T08:39:12.375Z</updated>
    
    <content type="html"><![CDATA[<p>Picker 会根据平台显示所要展示的效果</p><a id="more"></a><h2 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Picker</span>&lt;<span class="title">Label</span>, <span class="title">SelectionValue</span>, <span class="title">Content</span>&gt; <span class="title">where</span> <span class="title">Label</span> : <span class="title">View</span>, <span class="title">SelectionValue</span> : <span class="title">Hashable</span>, <span class="title">Content</span> : <span class="title">View</span></span></span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="Picker基础用法"><a href="#Picker基础用法" class="headerlink" title="Picker基础用法"></a>Picker基础用法</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strengths = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line">@<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedStrength = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $selectedStrength, label: <span class="type">Text</span>(<span class="string">"Strength"</span>)) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span> ..&lt; strengths.<span class="built_in">count</span>) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="keyword">self</span>.strengths[$<span class="number">0</span>]).tag($<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Core Data中用法</span></span><br><span class="line"><span class="type">Button</span>(action: (&#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="type">User</span>(context: <span class="keyword">self</span>.managedObjectContext)</span><br><span class="line">    user.name = <span class="keyword">self</span>.selectedStrength</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.managedObjectContext.save()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="built_in">print</span>(error) &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="Picker中使用自定义结构体"><a href="#Picker中使用自定义结构体" class="headerlink" title="Picker中使用自定义结构体"></a>Picker中使用自定义结构体</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">ObservedObject</span> <span class="keyword">var</span> frequencies = <span class="type">DrugUserInfoes</span>()  <span class="comment">//吃药频率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(<span class="string">"服药频率"</span>, selection: $frequencies.drugEatInfoes) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="type">DrugUserInfoes</span>.<span class="type">DrugEatInfoes</span>.allCases, id: \.<span class="keyword">self</span>) &#123; season <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(season.rawValue).tag(season)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrugUserInfoes</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DrugEatInfoes</span>: <span class="title">String</span>, <span class="title">CaseIterable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> day1eat1 = <span class="string">"一天一次"</span></span><br><span class="line">        <span class="keyword">case</span> day1eat2 = <span class="string">"一天两次"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置默认选择项</span></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> drugEatInfoes = <span class="type">DrugEatInfoes</span>.day1eat2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Core Data中用法</span></span><br><span class="line"><span class="type">Button</span>(action: (&#123;</span><br><span class="line">    <span class="keyword">let</span> eatInfo = <span class="type">EatInfo</span>(context: <span class="keyword">self</span>.managedObjectContext)</span><br><span class="line">    eatInfo.frequency = <span class="keyword">self</span>.frequencies.drugEatInfoes.rawValue</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.managedObjectContext.save()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="built_in">print</span>(error) &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="Picker中使用API-Json"><a href="#Picker中使用API-Json" class="headerlink" title="Picker中使用API Json"></a>Picker中使用API Json</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">ObservedObject</span> <span class="keyword">var</span> networkingManager = <span class="type">NetworkingManager</span>() <span class="comment">//读取API数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="comment">//请求API返回药品列表</span></span><br><span class="line">        <span class="type">Picker</span>(selection: $selection, label: <span class="type">Text</span>(<span class="string">"药品名称"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span> ..&lt; networkingManager.dataList.data.<span class="built_in">count</span>, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="keyword">self</span>.networkingManager.dataList.data[$<span class="number">0</span>].name).tag($<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Core Data中用法</span></span><br><span class="line"><span class="type">Button</span>(action: (&#123;</span><br><span class="line">    <span class="keyword">let</span> eatInfo = <span class="type">EatInfo</span>(context: <span class="keyword">self</span>.managedObjectContext)</span><br><span class="line">    eatInfo.name = <span class="keyword">self</span>.networkingManager.dataList.data[<span class="keyword">self</span>.selection].name</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.managedObjectContext.save()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123; <span class="built_in">print</span>(error) &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h4><p>SwiftUI的DatePicker视图类似UIDatePicker，并带有各种各样的选择来控制它的外观和运行。 像所有存储值的控件一样，它确实需要绑定到应用程序中的某种状态。</p><p>例如，这创建了一个绑定到生成日期属性的日期选项，允许用户先选择任何日期，然后显示日期选项的值，因为该选项设置时即可：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dateFormatter: <span class="type">DateFormatter</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter = <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateStyle = .long</span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> birthDate = <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">DatePicker</span>(selection: $birthDate, <span class="keyword">in</span>: ...<span class="type">Date</span>(), displayedComponents: .date) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Select a date"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Date is \(birthDate, formatter: dateFormatter)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在其他控件中的用法"><a href="#在其他控件中的用法" class="headerlink" title="在其他控件中的用法"></a>在其他控件中的用法</h3><h4 id="翻页选择"><a href="#翻页选择" class="headerlink" title="翻页选择"></a>翻页选择</h4><blockquote><p>嵌套在Form中，就会有NavigationView的显示效果</p></blockquote><p><img src="https://i.loli.net/2020/03/11/fjDtIvw7aqnGpAZ.png" alt=""><br><img src="https://i.loli.net/2020/03/11/XWYrwHPRnMVsqh3.png" alt=""></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users1 = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $gender, label: <span class="type">Text</span>(<span class="string">"性别"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"女"</span>).tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"男"</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;.pickerStyle(<span class="type">SegmentedPickerStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准样式"><a href="#标准样式" class="headerlink" title="标准样式"></a>标准样式</h3><blockquote><p>.pickerStyle</p></blockquote><ol><li>DefaultPickerStyle</li><li>PopUpButtonPickerStyle（macOS）</li><li>RadioGroupPickerStyle（macOS）</li><li>SegmentedPickerStyle（macOS、iOS、tvOS、Mac Catalyst）</li><li>WheelPickerStyle（iOS、watchOS、Mac Catalyst）</li></ol><h4 id="SegmentedPickerStyle"><a href="#SegmentedPickerStyle" class="headerlink" title="SegmentedPickerStyle"></a>SegmentedPickerStyle</h4><blockquote><p>横向选择</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users1 = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $gender, label: <span class="type">Text</span>(<span class="string">"性别"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"女"</span>).tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"男"</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;.pickerStyle(<span class="type">SegmentedPickerStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="iOS效果"><a href="#iOS效果" class="headerlink" title="iOS效果"></a>iOS效果</h5><p><img src="https://i.loli.net/2020/03/11/YJCztwg76jEdy5S.png" alt=""></p><h5 id="macOS效果"><a href="#macOS效果" class="headerlink" title="macOS效果"></a>macOS效果</h5><h5 id="tvOS效果"><a href="#tvOS效果" class="headerlink" title="tvOS效果"></a>tvOS效果</h5><h5 id="Mac-Catalyst效果"><a href="#Mac-Catalyst效果" class="headerlink" title="Mac Catalyst效果"></a>Mac Catalyst效果</h5><h4 id="WheelPickerStyle"><a href="#WheelPickerStyle" class="headerlink" title="WheelPickerStyle"></a>WheelPickerStyle</h4><blockquote><p>竖向选择</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users1 = [<span class="string">"男"</span>, <span class="string">"女"</span>]</span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(selection: $gender, label: <span class="type">Text</span>(<span class="string">"性别"</span>).bold()) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"女"</span>).tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"男"</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;.pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="iOS效果-1"><a href="#iOS效果-1" class="headerlink" title="iOS效果"></a>iOS效果</h5><p><img src="https://i.loli.net/2020/03/11/HBSDuMejJpG3O4U.png" alt=""></p><h5 id="macOS效果-1"><a href="#macOS效果-1" class="headerlink" title="macOS效果"></a>macOS效果</h5><h5 id="tvOS效果-1"><a href="#tvOS效果-1" class="headerlink" title="tvOS效果"></a>tvOS效果</h5><h5 id="Mac-Catalyst效果-1"><a href="#Mac-Catalyst效果-1" class="headerlink" title="Mac Catalyst效果"></a>Mac Catalyst效果</h5><h4 id="PopUpButtonPickerStyle"><a href="#PopUpButtonPickerStyle" class="headerlink" title="PopUpButtonPickerStyle"></a>PopUpButtonPickerStyle</h4><h4 id="RadioGroupPickerStyle"><a href="#RadioGroupPickerStyle" class="headerlink" title="RadioGroupPickerStyle"></a>RadioGroupPickerStyle</h4><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="labelsHidden"><a href="#labelsHidden" class="headerlink" title=".labelsHidden()"></a>.labelsHidden()</h4><blockquote><p>隐藏标签</p></blockquote><p>这仍然创造了标签，但现在却没有显示出来。 因此，您可以将Picker放入VStack中，并添加您自己选择的标签。<br>提示：如果你想要隐藏所有标签，你可以将标签 .labelsHidden() 修改符应用到VStack或你所使用的最外层容器中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Picker 会根据平台显示所要展示的效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="SwiftUI" scheme="https://soyl.tech/categories/SwiftUI/"/>
    
    
      <category term="SwiftUI" scheme="https://soyl.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Xcode如何进行无线真机调试</title>
    <link href="https://soyl.tech/uncategorized/xcode_iphone_test.html"/>
    <id>https://soyl.tech/uncategorized/xcode_iphone_test.html</id>
    <published>2020-02-23T17:14:58.000Z</published>
    <updated>2020-02-23T17:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xcode 进行真机调试</p><a id="more"></a><h2 id="登陆Xcode-Team"><a href="#登陆Xcode-Team" class="headerlink" title="登陆Xcode Team"></a>登陆Xcode Team</h2><p><img src="https://i.loli.net/2020/02/24/5RLKc7hfMiqXFGA.png" alt=""></p><h2 id="链接手机"><a href="#链接手机" class="headerlink" title="链接手机"></a>链接手机</h2><p>Xcode菜单导航栏，选择 Window - Devices and Simulators</p><p>数据线链接手机，验证后会自动出现该手机信息，选中Connect via network 使手机可以无线测试</p><p><img src="https://i.loli.net/2020/02/24/DflwOk9cFdg3hUN.png" alt=""></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>iOS工程中，选择该手机调试</p><p><img src="https://i.loli.net/2020/02/24/vrUTLD4mw7GKIPX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xcode 进行真机调试&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Xcode" scheme="https://soyl.tech/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Terminal（终端）使用SS代理进行连接</title>
    <link href="https://soyl.tech/APP/Terminal/Shadowsocks/terminal_ss.html"/>
    <id>https://soyl.tech/APP/Terminal/Shadowsocks/terminal_ss.html</id>
    <published>2019-08-02T17:14:58.000Z</published>
    <updated>2019-08-02T17:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>SS APP一般是Web代理，终端无法使用，需要单独配置代理</p><a id="more"></a><h2 id="Shadowsocks-设置"><a href="#Shadowsocks-设置" class="headerlink" title="Shadowsocks 设置"></a>Shadowsocks 设置</h2><p>打开HTTP代理设置菜单，查看SS 的HTTP 代理端口，一般为1087</p><h2 id="编辑zshrc文件"><a href="#编辑zshrc文件" class="headerlink" title="编辑zshrc文件"></a>编辑zshrc文件</h2><p>添加以下内容到 <code>zshrc</code> 中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias proxy-on='export http_proxy=127.0.0.1:1087;export https_proxy=$http_proxy'</span><br><span class="line">alias proxy-off='unset http_proxy;unset https_proxy'</span><br></pre></td></tr></table></figure><p>保存退出<br>生效配置 <code>source ~/.zshrc</code></p><ol><li>开启 <code>proxy-on</code></li><li>关闭 <code>proxy-off</code></li></ol><blockquote><p>只在当前标签页生效，重新打开终端或新标签页需要重新执行  <code>proxy-on</code></p></blockquote><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>对比开启前后的IP变化</p><blockquote><p>curl cip.cc</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IP: 27.198.***</span><br><span class="line">地址: 中国  山东  济宁</span><br><span class="line">运营商: 联通</span><br><span class="line">数据二: 山东省济宁市 | 联通</span><br><span class="line">数据三: 中国山东省济宁市 | 联通</span><br><span class="line">URL: http://www.cip.cc/27.198.***</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IP: 128.1.***</span><br><span class="line">地址: 美国  加利福尼亚州  洛杉矶</span><br><span class="line">运营商: zenlayer.com</span><br><span class="line">数据二: 美国</span><br><span class="line">数据三: 美国加利福尼亚洛杉矶 | 层峰网络</span><br><span class="line">URL: http://www.cip.cc/128.1.***</span><br></pre></td></tr></table></figure><blockquote><p>注意不要连续curl，响应时间会有延迟</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SS APP一般是Web代理，终端无法使用，需要单独配置代理&lt;/p&gt;
    
    </summary>
    
    
      <category term="APP" scheme="https://soyl.tech/categories/APP/"/>
    
      <category term="Terminal" scheme="https://soyl.tech/categories/APP/Terminal/"/>
    
      <category term="Shadowsocks" scheme="https://soyl.tech/categories/APP/Terminal/Shadowsocks/"/>
    
    
      <category term="VPN" scheme="https://soyl.tech/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>解决docker-compose 命令不存在、未找到命令错误</title>
    <link href="https://soyl.tech/APP/Docker/docker-compose-no.html"/>
    <id>https://soyl.tech/APP/Docker/docker-compose-no.html</id>
    <published>2019-07-30T14:10:25.000Z</published>
    <updated>2020-06-07T08:34:18.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装扩展源"><a href="#安装扩展源" class="headerlink" title="安装扩展源"></a>安装扩展源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install epel-release</span><br></pre></td></tr></table></figure><h4 id="安装python-pip模块"><a href="#安装python-pip模块" class="headerlink" title="安装python-pip模块"></a>安装python-pip模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install python-pip</span><br></pre></td></tr></table></figure><h4 id="查看docker-compose版本"><a href="#查看docker-compose版本" class="headerlink" title="查看docker-compose版本"></a>查看docker-compose版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><blockquote><p> 提示未找到命令</p></blockquote><h4 id="通过以命令进行安装"><a href="#通过以命令进行安装" class="headerlink" title="通过以命令进行安装"></a>通过以命令进行安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin/</span><br><span class="line"></span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64</span><br><span class="line"></span><br><span class="line">rename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="再次查看"><a href="#再次查看" class="headerlink" title="再次查看"></a>再次查看</h4><blockquote><p>docker-compose version</p></blockquote><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li>compose以守护进程模式运行加-d选项<blockquote><p>docker-compose up -d</p></blockquote></li><li>查看有哪些服务<blockquote><p>docker-compose ps</p></blockquote></li><li>查看compose日志<blockquote><p>docker-compose logs web<br>docker-compose logs redis</p></blockquote></li><li>停止compose服务<blockquote><p>docker-compose stop<br>docker-compose ps</p></blockquote></li><li>重启compose服务<blockquote><p>docker-compose restart<br>docker-compose ps</p></blockquote></li><li>kill compose服务<blockquote><p>docker-compose ps<br>docker-compose kill</p></blockquote></li><li>删除compose服务<blockquote><p>docker-compose rm</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h4 id=&quot;安装扩展源&quot;&gt;&lt;a href=&quot;#安装扩展源&quot; class=&quot;headerlink&quot; title=&quot;安装扩展源&quot;&gt;&lt;/a&gt;安装扩展
      
    
    </summary>
    
    
      <category term="APP" scheme="https://soyl.tech/categories/APP/"/>
    
      <category term="Docker" scheme="https://soyl.tech/categories/APP/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>macOS  brew安装redis</title>
    <link href="https://soyl.tech/APP/Redis/macos_brew_redis.html"/>
    <id>https://soyl.tech/APP/Redis/macos_brew_redis.html</id>
    <published>2019-07-29T13:09:39.000Z</published>
    <updated>2020-06-07T08:34:57.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>安装完成后写上下面的配置，目的是为了关闭homebrew每次检查更新（加快速度）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">关闭：</span><br><span class="line">export HOMEBREW_NO_AUTO_UPDATE=true</span><br><span class="line">打开：</span><br><span class="line">export HOMEBREW_NO_AUTO_UPDATE=false</span><br></pre></td></tr></table></figure><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li>启动Redis<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后台启动</span></span><br><span class="line">redis-server  &amp;</span><br></pre></td></tr></table></figure></li><li>关闭Redis<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure></li><li>验证程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure> 看到pong就代表成功了</li></ol><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/etc/redis.conf</span><br><span class="line">修改 daemonize no 为 daemonize yes 默认启动就后台运行</span><br><span class="line">其中修改密码是 requirepass foobared =&gt; requirepass pwdcode</span><br><span class="line">这里把密码设置成了pwdcode</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Homebrew&quot;&gt;&lt;a href=&quot;#安装Homebrew&quot; class=&quot;headerlink&quot; title=&quot;安装Homebrew&quot;&gt;&lt;/a&gt;安装Homebrew&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="APP" scheme="https://soyl.tech/categories/APP/"/>
    
      <category term="Redis" scheme="https://soyl.tech/categories/APP/Redis/"/>
    
    
      <category term="Install" scheme="https://soyl.tech/tags/Install/"/>
    
  </entry>
  
  <entry>
    <title>vim 插件管理器 Vundle 安装与配置</title>
    <link href="https://soyl.tech/uncategorized/vim_vundle.html"/>
    <id>https://soyl.tech/uncategorized/vim_vundle.html</id>
    <published>2019-07-29T02:10:10.000Z</published>
    <updated>2020-06-07T08:35:27.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装插件管理器-Vundle"><a href="#安装插件管理器-Vundle" class="headerlink" title="安装插件管理器 Vundle"></a>安装插件管理器 Vundle</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改<code>~/.vimrc</code></p><blockquote><p><a href="https://raw.githubusercontent.com/HeySoyl/MyVimrc/master/vimrc">https://raw.githubusercontent.com/HeySoyl/MyVimrc/master/vimrc</a></p></blockquote><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul><li>打开<code>vim</code>输入<code>:PluginInstall</code><ol><li><code>:PluginInstall</code>命令会安装在<code>.vimrc</code>文件中列出来的所有插件</li><li><code>:PluginInstall &lt;plugin-name&gt;</code> 安装指定的插件</li></ol></li><li>从命令行安装<code>vim +PluginInstall +qall</code></li></ul><h3 id="清理未用插件"><a href="#清理未用插件" class="headerlink" title="清理未用插件"></a>清理未用插件</h3><ul><li>打开vim输入<code>:PluginClean</code></li><li>从命令行安装<code>vim +:PluginClean</code></li></ul><h3 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h3><ul><li>打开vim输入<code>:PluginSearch &lt;text-list&gt;</code></li><li>从命令行安装<code>vim +:PluginSearch &lt;text-list&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装插件管理器-Vundle&quot;&gt;&lt;a href=&quot;#安装插件管理器-Vundle&quot; class=&quot;headerlink&quot; title=&quot;安装插件管理器 Vundle&quot;&gt;&lt;/a&gt;安装插件管理器 Vundle&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
    
      <category term="Vim" scheme="https://soyl.tech/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>MKit API数据库文档</title>
    <link href="https://soyl.tech/Swift/Vapor/APP/Mkit/mkit_api_data_doc.html"/>
    <id>https://soyl.tech/Swift/Vapor/APP/Mkit/mkit_api_data_doc.html</id>
    <published>2019-07-24T02:37:30.000Z</published>
    <updated>2020-06-07T08:41:19.570Z</updated>
    
    <content type="html"><![CDATA[<p>MKit APi 数据库说明文档</p><a id="more"></a><h2 id="药盒"><a href="#药盒" class="headerlink" title="药盒"></a>药盒</h2><blockquote><p><code>box</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">药材名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">药材图片</td></tr><tr><td align="center"><code>instructionID</code></td><td align="left">说明书</td><td align="left">TINYINT</td><td align="left"></td><td align="left">是</td><td align="left"></td></tr></tbody></table><h2 id="药材"><a href="#药材" class="headerlink" title="药材"></a>药材</h2><blockquote><p><code>meterials</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">药材名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">药材名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">药材图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">药材图片</td></tr><tr><td align="center"><code>category</code></td><td align="left">药材类别</td><td align="left">TINYINT</td><td align="left"><code>0</code>或<code>1</code></td><td align="left">是</td><td align="left"><code>0</code>中药或<code>1</code>西药</td></tr></tbody></table><h2 id="企业"><a href="#企业" class="headerlink" title="企业"></a>企业</h2><blockquote><p><code>enterprise</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">企业名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">企业名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">企业图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">企业图片</td></tr><tr><td align="center"><code>site</code></td><td align="left">生产地址</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">企业生产地址</td></tr><tr><td align="center"><code>logonSite</code></td><td align="left">注册地址</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">注册地址</td></tr><tr><td align="center"><code>phone</code></td><td align="left">生产电话</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">生产电话</td></tr><tr><td align="center"><code>fax</code></td><td align="left">传真</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">传真</td></tr><tr><td align="center"><code>webSite</code></td><td align="left">网址</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">网址</td></tr></tbody></table><h2 id="说明书"><a href="#说明书" class="headerlink" title="说明书"></a>说明书</h2><blockquote><p><code>instructions</code></p></blockquote><table><thead><tr><th align="center">字段</th><th align="left">名称</th><th align="left">类型</th><th align="left">限制</th><th align="left">必填项</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="left">名称</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left">名称</td></tr><tr><td align="center"><code>icon</code></td><td align="left">说明书图片</td><td align="left">BLOB</td><td align="left">最大64K</td><td align="left">是</td><td align="left">说明书图片</td></tr><tr><td align="center"><code>category</code></td><td align="left">类别</td><td align="left">TINYINT</td><td align="left"><code>0</code>或<code>1</code></td><td align="left">是</td><td align="left"><code>0</code>中药或<code>1</code>西药</td></tr><tr><td align="center"><code>otc</code></td><td align="left">处方药</td><td align="left">TINYINT</td><td align="left"><code>0</code>或<code>1</code></td><td align="left">是</td><td align="left"><code>0</code>处方药或<code>1</code>甲类非处方药，<code>2</code>乙类非处方药</td></tr><tr><td align="center"><code>components</code></td><td align="left">成分</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>traits</code></td><td align="left">性状</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>adaptation</code></td><td align="left">适应症</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>reactions</code></td><td align="left">不良反应</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>no</code></td><td align="left">禁忌</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>attention</code></td><td align="left">注意事项</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr><tr><td align="center"><code>enterprisID</code></td><td align="left">生产企业</td><td align="left">VARCHAR</td><td align="left">无</td><td align="left">是</td><td align="left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MKit APi 数据库说明文档&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://soyl.tech/categories/Swift/"/>
    
      <category term="Vapor" scheme="https://soyl.tech/categories/Swift/Vapor/"/>
    
      <category term="APP" scheme="https://soyl.tech/categories/Swift/Vapor/APP/"/>
    
      <category term="Mkit" scheme="https://soyl.tech/categories/Swift/Vapor/APP/Mkit/"/>
    
    
      <category term="Document" scheme="https://soyl.tech/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>MKit-API接口文档</title>
    <link href="https://soyl.tech/Swift/Vapor/APP/Mkit/mkit_api_doc.html"/>
    <id>https://soyl.tech/Swift/Vapor/APP/Mkit/mkit_api_doc.html</id>
    <published>2019-07-24T02:08:11.000Z</published>
    <updated>2020-06-07T08:41:13.938Z</updated>
    
    <content type="html"><![CDATA[<p>MKit APi 接口说明文档</p><a id="more"></a><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="药材获取列表"><a href="#药材获取列表" class="headerlink" title="药材获取列表"></a>药材获取列表</h3><p>根据版本获取药材列表，符合版本情况，则返回Redis缓存数据，否则更新缓存，并下放数据</p><ul><li><p>接口类型</p><blockquote><p>GET</p></blockquote></li><li><p>请求参数</p></li></ul><table><thead><tr><th align="center">字段</th><th align="left">类型</th><th align="left">名称</th><th align="left">必填项</th><th>功能</th></tr></thead><tbody><tr><td align="center"><code>AppVersion</code></td><td align="left">Int</td><td align="left">APP版本号</td><td align="left">是</td><td>当前客户端版本</td></tr><tr><td align="center"><code>DataVersion</code></td><td align="left">Int</td><td align="left">数据版本号</td><td align="left">是</td><td>高等于缓存版本不下放数据，低于缓存版本返回数据</td></tr></tbody></table><ul><li>返回字段</li></ul><table><thead><tr><th align="center">返回字段</th><th align="left">字段类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center"><code>status</code></td><td align="left">Int</td><td align="left">100 = 请求成功</td></tr><tr><td align="center"><code>message</code></td><td align="left">String</td><td align="left">描述</td></tr><tr><td align="center"><code>version</code></td><td align="left">Int</td><td align="left">版本号</td></tr></tbody></table><ul><li><p>返回事例</p><blockquote><p>不下放数据</p></blockquote>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">101</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">20190810</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"无需更新数据"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下放数据</p></blockquote>   <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"请求成功"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"icon"</span>: <span class="string">"Meterial icon:Optional(1)"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Meterial name:Optional(1)"</span>,</span><br><span class="line">      <span class="attr">"category"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">20190810</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="生产企业获取列表"><a href="#生产企业获取列表" class="headerlink" title="生产企业获取列表"></a>生产企业获取列表</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MKit APi 接口说明文档&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://soyl.tech/categories/Swift/"/>
    
      <category term="Vapor" scheme="https://soyl.tech/categories/Swift/Vapor/"/>
    
      <category term="APP" scheme="https://soyl.tech/categories/Swift/Vapor/APP/"/>
    
      <category term="Mkit" scheme="https://soyl.tech/categories/Swift/Vapor/APP/Mkit/"/>
    
    
      <category term="Document" scheme="https://soyl.tech/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>同一台电脑添加多个ssh key</title>
    <link href="https://soyl.tech/Git/ssh_key.html"/>
    <id>https://soyl.tech/Git/ssh_key.html</id>
    <published>2019-07-21T07:20:18.000Z</published>
    <updated>2020-06-07T08:34:23.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>同样的方式可以生成多个</p><blockquote><p>ssh-keygen -t rsa -C <a href="mailto:soyl@live.cn">soyl@live.cn</a></p></blockquote><p>执行命令ssh-keygen -t rsa -C email 创建github对应的sshkey，命名为id_rsa_github，密码123456</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/soyl/.ssh/id_rsa): id_rsa_github</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in id_rsa_github.</span><br><span class="line">Your public key has been saved in id_rsa_github.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:rZQO751cjfzzjDxJq5ZjI6pKKMWFlO6J+ZdvnWcra6M soyl@live.cn</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|  ..             |</span><br><span class="line">| ...             |</span><br><span class="line">| .. .            |</span><br><span class="line">| ...     o       |</span><br><span class="line">| +o.  . S .      |</span><br><span class="line">|o.o.   = . . o.  |</span><br><span class="line">|... .. .+.  +o.o |</span><br><span class="line">| ...o ..*o+o*o=o |</span><br><span class="line">|   ..+E++B==.+++o|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><h2 id="Config配置"><a href="#Config配置" class="headerlink" title="Config配置"></a>Config配置</h2><p>在.ssh目录创建config文件(无后缀名，就是为了映射）并完成相关配置(最核心的地方)</p><p>每个账号单独配置一个Host，每个Host要取一个别名，每个Host主要配置HostName和IdentityFile两个属性即可</p><ol><li><p>Host 名字可以取为自己喜欢的名字，不过这个会影响git相关命令，例如：<br> Host mygithub 这样定义的话，命令如下，即git@后面紧跟的名字改为mygithub</p><blockquote><p> git clone <a href="mailto:git@github.com">git@github.com</a>:HeySoyl/HeyAT-API.git<br> 就变成了<br> git clone git@mygithub:HeySoyl/HeyAT-API.git</p></blockquote></li><li><p>HostName 这个是真实的域名地址</p></li><li><p>IdentityFile 这里是id_rsa的地址</p></li><li><p>PreferredAuthentications配置登录时用什么权限认证–可设为publickey,password publickey,keyboard-interactive等</p></li><li><p>User 配置使用用户名</p></li></ol><p>配置文件如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> github.com的配置</span></span><br><span class="line">Host github.com               </span><br><span class="line">        HostName github.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        User HeySoyl</span><br><span class="line"><span class="meta">#</span><span class="bash"> code.aliyun.com的配置</span></span><br><span class="line">Host code.aliyun.com</span><br><span class="line">        HostName code.aliyun.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_aliyun</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        User Soyl</span><br></pre></td></tr></table></figure><h2 id="设置用户名"><a href="#设置用户名" class="headerlink" title="设置用户名"></a>设置用户名</h2><p>设置全局用户名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --user.name "yourname"</span><br><span class="line">git config --global --user.email "youremail"</span><br></pre></td></tr></table></figure><p>在仓库目录下设置局部用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config user.name "yourname"  </span><br><span class="line">git config user.email "youremail"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生成密钥&quot;&gt;&lt;a href=&quot;#生成密钥&quot; class=&quot;headerlink&quot; title=&quot;生成密钥&quot;&gt;&lt;/a&gt;生成密钥&lt;/h2&gt;&lt;p&gt;同样的方式可以生成多个&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh-keygen -t rsa -C &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Git" scheme="https://soyl.tech/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Vapor系列教程 - MySQL数据库</title>
    <link href="https://soyl.tech/Swift/Vapor/Vapor_MySQL_Use.html"/>
    <id>https://soyl.tech/Swift/Vapor/Vapor_MySQL_Use.html</id>
    <published>2019-07-19T00:08:19.000Z</published>
    <updated>2020-06-07T08:35:21.685Z</updated>
    
    <content type="html"><![CDATA[<p>Vapor默认使用的SQLite数据库</p><a id="more"></a><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vapor new Test</span><br></pre></td></tr></table></figure><h2 id="修改相关文件项"><a href="#修改相关文件项" class="headerlink" title="修改相关文件项"></a>修改相关文件项</h2><h3 id="Package-swift"><a href="#Package-swift" class="headerlink" title="Package.swift"></a>Package.swift</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"HeyAT"</span>,</span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: <span class="string">"https://github.com/vapor/vapor.git"</span>, from: <span class="string">"3.0.0"</span>),</span><br><span class="line">        .package(url: <span class="string">"https://github.com/vapor/crypto.git"</span>, from: <span class="string">"3.3.0"</span>),</span><br><span class="line">        .package(url: <span class="string">"https://github.com/vapor/fluent-mysql.git"</span>, from: <span class="string">"3.0.0"</span>)</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(name: <span class="string">"App"</span>, dependencies: [<span class="string">"FluentMySQL"</span>, <span class="string">"Crypto"</span>, <span class="string">"Vapor"</span>]),</span><br><span class="line">        .target(name: <span class="string">"Run"</span>, dependencies: [<span class="string">"App"</span>]),</span><br><span class="line">        .testTarget(name: <span class="string">"AppTests"</span>, dependencies: [<span class="string">"App"</span>])</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改configure-swift"><a href="#修改configure-swift" class="headerlink" title="修改configure.swift"></a>修改configure.swift</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> FluentMySQL</span><br><span class="line"><span class="keyword">import</span> Vapor</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Called before your application initializes.</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">configure</span><span class="params">(<span class="number">_</span> config: <span class="keyword">inout</span> Config, <span class="number">_</span> env: <span class="keyword">inout</span> Environment, <span class="number">_</span> services: <span class="keyword">inout</span> Services)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="comment">// Register providers first</span></span><br><span class="line">    <span class="keyword">try</span> services.register(<span class="type">FluentMySQLProvider</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Register routes to the router</span></span><br><span class="line">    <span class="keyword">let</span> router = <span class="type">EngineRouter</span>.<span class="keyword">default</span>()</span><br><span class="line">    <span class="keyword">try</span> routes(router)</span><br><span class="line">    services.register(router, <span class="keyword">as</span>: <span class="type">Router</span>.<span class="keyword">self</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Register middleware</span></span><br><span class="line">    <span class="keyword">var</span> middlewares = <span class="type">MiddlewareConfig</span>() <span class="comment">// Create _empty_ middleware config</span></span><br><span class="line">    <span class="comment">// middlewares.use(FileMiddleware.self) // Serves files from `Public/` directory</span></span><br><span class="line">    middlewares.use(<span class="type">ErrorMiddleware</span>.<span class="keyword">self</span>) <span class="comment">// Catches errors and converts to HTTP response</span></span><br><span class="line">    services.register(middlewares)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Configure a MySQL database</span></span><br><span class="line">    <span class="keyword">var</span> databases =  <span class="type">DatabasesConfig</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义mysql数据库配置参数的变量</span></span><br><span class="line">    <span class="keyword">let</span> mysqlHost: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> mysqlPort: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> mysqlDB: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> mysqlUser: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> mysqlPass: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> env == .development || env == .testing &#123;</span><br><span class="line">        <span class="comment">//线下环境使用的配置信息</span></span><br><span class="line">        mysqlHost = <span class="string">"127.0.0.1"</span></span><br><span class="line">        mysqlPort = <span class="number">3306</span></span><br><span class="line">        mysqlDB = <span class="string">"vapor"</span></span><br><span class="line">        mysqlUser = <span class="string">"root"</span></span><br><span class="line">        mysqlPass = <span class="string">"qiqi.loveAI001"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//生产环境，读取机器配置的配置，如果读取失败，则取默认值</span></span><br><span class="line">        mysqlHost = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_HOST"</span>) ?? <span class="string">"127.0.0.1"</span></span><br><span class="line">        mysqlPort = <span class="number">3306</span></span><br><span class="line">        mysqlDB = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_DB"</span>) ?? <span class="string">"vapor"</span></span><br><span class="line">        mysqlUser = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_USER"</span>) ?? <span class="string">"root"</span></span><br><span class="line">        mysqlPass = <span class="type">Environment</span>.<span class="keyword">get</span>(<span class="string">"MYSQL_PASS"</span>) ?? <span class="string">"qiqi.loveAI001"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mysqlConfig = <span class="type">MySQLDatabaseConfig</span>(</span><br><span class="line">        hostname: mysqlHost,</span><br><span class="line">        port: mysqlPort,</span><br><span class="line">        username: mysqlUser,</span><br><span class="line">        password: mysqlPass,</span><br><span class="line">        database: mysqlDB,</span><br><span class="line">        transport: .unverifiedTLS)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mysql = <span class="type">MySQLDatabase</span>(config: mysqlConfig)</span><br><span class="line">    databases.add(database: mysql, <span class="keyword">as</span>: .mysql)</span><br><span class="line">    services.register(databases)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Migration配置</span></span><br><span class="line">    <span class="type">Business</span>.defaultDatabase = .mysql</span><br><span class="line">    <span class="keyword">var</span> migrations = <span class="type">MigrationConfig</span>()</span><br><span class="line">    migrations.add(model: <span class="type">Business</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    migrations.add(model: <span class="type">Instance</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    migrations.add(model: <span class="type">User</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    migrations.add(model: <span class="type">AccessToken</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开发环境填充测试数据</span></span><br><span class="line">    <span class="keyword">if</span> env == .development &#123;</span><br><span class="line">        migrations.add(migration: <span class="type">BusinessSeeder</span>.<span class="keyword">self</span>, database: .mysql)</span><br><span class="line"><span class="comment">//        migrations.add(migration: InstanceSeeder.self, database: .mysql)</span></span><br><span class="line">    &#125;</span><br><span class="line">    services.register(migrations)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     # 注册migrations命令</span></span><br><span class="line"><span class="comment">     - vapor run migrate: 执行migrate创建表，并执行seed构建测试数据</span></span><br><span class="line"><span class="comment">     - vapor run revert -all: 依照migrate创建表顺序，依次清空表数据后删除该表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> commandConfig = <span class="type">CommandConfig</span>.<span class="keyword">default</span>()</span><br><span class="line">    commandConfig.useFluentCommands()</span><br><span class="line">    services.register(commandConfig)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-Todo-swift"><a href="#修改-Todo-swift" class="headerlink" title="修改 Todo.swift"></a>修改 Todo.swift</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> FluentMySQL</span><br><span class="line"><span class="keyword">import</span> Vapor</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A single entry of a Todo list.</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span>: <span class="title">MySQLModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// The unique identifier for this `Todo`.</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int?</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A title describing what this `Todo` entails.</span></span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Creates a new `Todo`.</span></span><br><span class="line">    <span class="keyword">init</span>(id: <span class="type">Int?</span> = <span class="literal">nil</span>, title: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id = id</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Allows `Todo` to be used as a dynamic migration.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Todo</span>: <span class="title">Migration</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Allows `Todo` to be encoded to and decoded from HTTP messages.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Todo</span>: <span class="title">Content</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Allows `Todo` to be used as a dynamic parameter in route definitions.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Todo</span>: <span class="title">Parameter</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vapor默认使用的SQLite数据库&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://soyl.tech/categories/Swift/"/>
    
      <category term="Vapor" scheme="https://soyl.tech/categories/Swift/Vapor/"/>
    
    
  </entry>
  
  <entry>
    <title>基于MVVM构建App工程结构</title>
    <link href="https://soyl.tech/Swift/mvvm_app.html"/>
    <id>https://soyl.tech/Swift/mvvm_app.html</id>
    <published>2019-02-28T12:38:45.000Z</published>
    <updated>2020-06-07T08:40:37.939Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="App的工程结构"><a href="#App的工程结构" class="headerlink" title="App的工程结构"></a>App的工程结构</h1><p>首先，我们从工程结构开始。构成整个项目的文件，一共可以分成五大类，分别是：</p><ul><li>A - 和App启动相关的代码、配置以及资源；</li><li>B - 和UI的显示以及交互相关的代码；</li><li>C - 对UIKit的公共扩展；</li><li>D - 存储数据的model；</li><li>E - 使用的第三方库；</li></ul><p>接下来，我们可以新建一个Single View Application项目，基于它来构建整个工程。</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>对于A这部分，主要包含App启动相关的代码、配置以及资源：</p><ul><li>AppDelegate：在这里我们定义App的启动流程；</li><li>Info.plist：在这里我们配置App的行为；</li><li>LaunchScreen.storyboard：在这里我们定义App的启动屏幕；</li><li>Localizable.strings：这里我们定义支持多语言的各种翻译；</li></ul><p>这是初始Single View Application模板被删减后的部分<br><img src="https://image.boxueio.com/app-proj-dir-1@2x.jpg" alt="avatar"></p><p>可以看到，我们删掉了默认的Main.storyboard，并在Info.plist中去掉了Main storyboard file base name的配置。在整个App里，我们将使用代码来实现UI。</p><p>AppDelegate.swift中是App的入口，由于删掉了Main.storyboard，我们将专门准备一节来讨论相关的内容。</p><p>BxLaunchScreen.storyboard是App的启动UI，别忘了在Boxue Target中也设置成对应的文件：<br><img src="https://image.boxueio.com/app-proj-dir-2@2x.jpg" alt="avatar"></p><p>Localizable.strings则是多语言文件，同样，我们会单独用一节来分享Boxue App中使用的多语言处理方法。</p><h2 id="B-C-D"><a href="#B-C-D" class="headerlink" title="B / C / D"></a>B / C / D</h2><p>对于B / C / D这三部分，由于它们彼此独立，为了可以同步开发，并让C和D的代码可重用，我们把这三部分内容定义成了三个framework。其中：</p><ul><li>Boxue_iOS里是和UI的显示以及交互相关的代码；</li><li>BoxueUIKit是整个项目中会用到的对UIKit的公共扩展；</li><li>BoxueDataKit是整个项目的数据存储以及访问接口，也可以理解为是App的View Model以及Model；</li></ul><p>在项目的Targets列表中，可以看到app以及这三个framework，如果你要自己动手练习，只要在自己的项目中，点击Targets列表左下角的+，然后选择添加CocoaTouch framework就好了。</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>是Boxue_iOS，这个framework中都是处理UI显示以及交互的代码，它的使用者，是刚才我们提到的Boxue Target。这里，iOSApp group包含了全部iOS相关的实现。<br><img src="https://image.boxueio.com/app-proj-dir-3@2x.jpg" alt="avatar"></p><p>在这个group里，处在根目录的文件有三类：</p><ul><li>一个是BoxueAppDepedencyContainer.swift，它主要处理对象的初始化工作，稍后我们会专门用几个小节讨论依赖注入和容器的话题；</li><li>一类是处理App从启动阶段到注册前交互的View Controllers；</li><li>还有一类是和View Controller对应的View；</li></ul><p>遵循这三个分类，我们可以进一步在这个group中创建sub group，例如上图中的PreSignIn group就表示所有处理登录前UI显示和交互的View Controllers。而等我们开发到后期的时候，登录后UI的处理也可以采用同样的模式。</p><p>同样，大家现在只要知道这些文件的功能就好，大可不必关心其中的实现，我们会在后面的内容中专门讲述代码的细节。</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>BoxueUIKit这个framework，可以理解为是我们的UIKit工具库，包含了项目中使用的对UIKit的各种扩展、工具类和工具函数。它的使用者，则是Boxue_iOS Target。</p><p><img src="https://image.boxueio.com/app-proj-dir-4@2x.jpg" alt="avatar"></p><p>在这个group里，Reusable / UIKit这个sub group中，是对UIKit的扩展，我们可以按照功能分类继续在其中创建sub group，例如我们当前的：</p><ul><li>Style group是对样式相关类的扩展；</li><li>Nibless group是为了纯代码实现View Controller对各种View Controllers以及View类的扩展；</li><li>理解了这个思路之后，我们就可以用这种方法，把这个framework的各种接口组织起来了。慢慢地，我们开发的功能越多，这个framework功能就会越丰富。当我们切换到其它项目中时，也能很方便的重用这些积累起来的功能。<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3>最后一个framework是BoxueDataKit，这个framework包含了两类内容：一类是直接和服务端打交道的Model；另一类，是和View Controllers打交道的View Model。因此，BoxueDataKit中包含了两个sub group，DataLayer表示Model，PresentLayer表示View Model：<br><img src="https://image.boxueio.com/app-proj-dir-5@2x.jpg" alt="avatar"></li></ul><p>但在一个实际的项目中，除了Model和View Model之外，还有一类内容，就是围绕Model要完成的各种业务逻辑。例如，围绕着用户信息的注册、登录和改密码；或者，围绕着用户Session的读取和删除，都属于此类。显然，把处理这些功能的接口直接写在Model里是不合适的。为此，我们还在Model group中新建了一个Repositories的sub group，这里，就是围绕着Model要定义的各种业务逻辑接口，例如Remote group表示所有的远程访问API，Persistence group*表示本地持久化存储数据API等等。当然，我们现在只要知道这样做的意图就好了，完全没必要关心代码的细节。</p><p>而相比DataLayer，PresentLayer的内容倒是简单很多。基本上，App的每一屏，都会对应一个View Model文件。并且，功能相关的一组View Models，我们还可以给它们创建一个公共的subgroup。例如用于支持引导用户注册、登录或直接浏览功能的View Model，就统一放在了Guide group里，这样方便维护。</p><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>对于项目中使用的第三方库，我们选择了Carthage。在项目根目录的Cartfile中，作为开始，我们引入了以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github &quot;mxcl&#x2F;PromiseKit&quot; ~&gt; 6.4.0</span><br><span class="line">github &quot;onevcat&#x2F;Kingfisher&quot; ~&gt; 4.9.0</span><br><span class="line">github &quot;ReactiveX&#x2F;RxSwift&quot; ~&gt; 4.3.0</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>PromiseKit用于简化异步操作的代码；</li><li>Kingfisher用于缓存下载的图片</li><li>RxSwift用于管理App中的事件</li></ul><p>作为开始，暂时就包含这3个，以后随着开发用到，我们再添加就好了。添加完成后，我们要在项目根目录执行：</p><blockquote><p><code>carthage update --platform iOS --no-use-binaries</code></p></blockquote><p>来安装所有的依赖关系，这里，–no-use-binaries很重要，如果不带这个参数直接安装Carthage默认的framework，当你使用LLDB调试的时候，就会出现类似error: Couldn’t IRGen expression这样的提示，这是我们要注意的地方。</p><p>完成后，在TARGETS列表中，选中Boxue，在General tab的最底部就会看到，Embeded binary包含了我们自己创建的三个frameworks，Linked Frameworks and Libraries则包含了我们自己创建的三个frameworks以及通过Carthage引入的三个frameworks：<br><img src="https://image.boxueio.com/app-project-arch-2@2x.jpg" alt="avatar"></p><p>接下来，保持Boxue TARGET选中，切换到Build Phases tab，在这里，点击+，选择New Run Script Phase，这时，Xcode就会要求我们填写一些东西。<br><img src="https://image.boxueio.com/app-project-arch-3@2x.jpg" alt="avatar"></p><p>其中，执行的命令，我们写：</p><blockquote><p>/usr/local/bin/carthage copy-frameworks</p></blockquote><p>Input Files我们写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;Kingfisher.framework</span><br><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;RxSwift.framework</span><br><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;RxCocoa.framework</span><br><span class="line">$(SRCROOT)&#x2F;Carthage&#x2F;Build&#x2F;iOS&#x2F;PromiseKit.framework</span><br></pre></td></tr></table></figure><p>Output Files我们写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;Kingfisher.framework</span><br><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;RxSwift.framework</span><br><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;RxRocoa.framework</span><br><span class="line">$(BUILT_PRODUCTS_DIR)&#x2F;$(FRAMEWORKS_FOLDER_PATH)&#x2F;PromiseKit.framework</span><br></pre></td></tr></table></figure><p>完成后，看起来是这个样子的：<br><img src="https://image.boxueio.com/app-project-arch-4@2x.jpg" alt="avatar"></p><p>这个命令的作用就是把之前我们用Carthage引入的第三方库在打包的时候，拷贝到特定目录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;App的工程结构&quot;&gt;&lt;a href=&quot;#App的工程结构&quot; class=&quot;headerlink&quot; title=&quot;App的工程结构&quot;&gt;&lt;/a&gt;App的工程结构&lt;/h1&gt;&lt;p&gt;首先，我们从工程结构开始。构成整个项目的文件，一共可以分
      
    
    </summary>
    
    
      <category term="Swift" scheme="https://soyl.tech/categories/Swift/"/>
    
    
      <category term="Architecture" scheme="https://soyl.tech/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Sketch 插件整理</title>
    <link href="https://soyl.tech/APP/Sketch/Sketch_Plugins.html"/>
    <id>https://soyl.tech/APP/Sketch/Sketch_Plugins.html</id>
    <published>2019-02-27T12:38:45.000Z</published>
    <updated>2020-06-07T08:40:44.489Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Sketch-measure"><a href="#Sketch-measure" class="headerlink" title="Sketch measure"></a>Sketch measure</h3><p>标记尺寸</p><blockquote><p>快捷键：Ctrl + Cmd + B</p></blockquote><h3 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h3><p>快速查找组件</p><blockquote><p>快捷键：Cmd + ‘</p></blockquote><h3 id="Auto-Layout"><a href="#Auto-Layout" class="headerlink" title="Auto-Layout"></a>Auto-Layout</h3><p>组件位置</p><blockquote><p>安装好之后，选中一个对象，Auto Layout就会出现在inspector的右下角</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;Sketch-measure&quot;&gt;&lt;a href=&quot;#Sketch-measure&quot; class=&quot;headerlink&quot; title=&quot;Sketch measure&quot;&gt;&lt;/a&gt;Sketch measure&lt;/h3&gt;&lt;p&gt;标记尺
      
    
    </summary>
    
    
      <category term="APP" scheme="https://soyl.tech/categories/APP/"/>
    
      <category term="Sketch" scheme="https://soyl.tech/categories/APP/Sketch/"/>
    
    
  </entry>
  
  <entry>
    <title>Sketch 快捷键</title>
    <link href="https://soyl.tech/APP/Sketch/Sketch_key.html"/>
    <id>https://soyl.tech/APP/Sketch/Sketch_key.html</id>
    <published>2019-02-27T12:38:45.000Z</published>
    <updated>2020-06-07T08:40:50.171Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>a：尺寸模版工具栏</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;a：尺寸模版工具栏&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="APP" scheme="https://soyl.tech/categories/APP/"/>
    
      <category term="Sketch" scheme="https://soyl.tech/categories/APP/Sketch/"/>
    
    
  </entry>
  
  <entry>
    <title>MacOS 10.12 终端命令行下使用Shadowsocks</title>
    <link href="https://soyl.tech/APP/Shadowsocks/macos10_12_shadowsocks.html"/>
    <id>https://soyl.tech/APP/Shadowsocks/macos10_12_shadowsocks.html</id>
    <published>2019-02-18T12:38:45.000Z</published>
    <updated>2020-06-07T08:40:19.740Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Shadowsocks-NG"><a href="#Shadowsocks-NG" class="headerlink" title="Shadowsocks-NG"></a>Shadowsocks-NG</h2><p>有一个新的Shadowsocks的客户端叫 Shadowsocks-NG 解决了一个长久以来的痛点，Shadowsocks没有HTTP代理，导致我们需要使用polipo等软件进行协议转换</p><p>现在其在1087端口提供了http代理服务(http代理代理设置选项)，我们可以通过在命令行直接设置代理，来使用SS服务了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启代理</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:1087</span><br><span class="line"><span class="built_in">export</span> https_proxy=127.0.0.1:1087</span><br><span class="line"><span class="comment">#关闭代理</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure><p>配置一个别名方便启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>在文件内加入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Custom Add not System</span></span><br><span class="line"><span class="built_in">alias</span> proxy-on=<span class="string">'export http_proxy=127.0.0.1:1087;export https_proxy=$http_proxy'</span></span><br><span class="line"><span class="built_in">alias</span> proxy-off=<span class="string">'unset http_proxy;unset https_proxy'</span></span><br></pre></td></tr></table></figure><p>就可以在命令行内通过 proxy-on 和 proxy-off 来开启关闭代理</p><h2 id="sudo操作怎么办"><a href="#sudo操作怎么办" class="headerlink" title="sudo操作怎么办"></a>sudo操作怎么办</h2><p>以上快捷启动配置只能在User的命令行里进行使用，如果想对sudo操作挂proxy，需要先使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure><p>进入bash 3.2# 然后手动设置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;Shadowsocks-NG&quot;&gt;&lt;a href=&quot;#Shadowsocks-NG&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks-NG&quot;&gt;&lt;/a&gt;Shadowsocks-NG&lt;/h2&gt;&lt;p&gt;有一个
      
    
    </summary>
    
    
      <category term="APP" scheme="https://soyl.tech/categories/APP/"/>
    
      <category term="Shadowsocks" scheme="https://soyl.tech/categories/APP/Shadowsocks/"/>
    
    
      <category term="VPN" scheme="https://soyl.tech/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Swift   Dictionary数据结构</title>
    <link href="https://soyl.tech/Swift/swift_dicrionary.html"/>
    <id>https://soyl.tech/Swift/swift_dicrionary.html</id>
    <published>2019-02-18T02:53:45.000Z</published>
    <updated>2020-06-07T08:42:32.832Z</updated>
    
    <content type="html"><![CDATA[<p>Dictionary是除了Array之外的另一种非常重要的数据结构，它用于把某种形式的key，关联到某种形式的value。我们来看一个例子。</p><a id="more"></a><h2 id="定义Dictionary"><a href="#定义Dictionary" class="headerlink" title="定义Dictionary"></a>定义Dictionary</h2><p>假设我们要定义一个数据结构，用来保存用户在泊学对某个视频的观看情况。可以这样：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">假设我们要定义一个数据结构，用来保存用户在泊学对某个视频的观看情况。可以这样：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RecordType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> bool(<span class="type">Bool</span>)</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> text(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> record11: [<span class="type">String</span>: <span class="type">RecordType</span>] = [</span><br><span class="line">    <span class="string">"uid"</span>: .number(<span class="number">11</span>),</span><br><span class="line">    <span class="string">"exp"</span>: .number(<span class="number">100</span>),</span><br><span class="line">    <span class="string">"favourite"</span>: .bool(<span class="literal">true</span>),</span><br><span class="line">    <span class="string">"title"</span>: .text(<span class="string">"Dictionary basics"</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在上面代码里，我们用[KeyType: ValueType]的形式来定义一个Dictionary。当定义好Dictionary之后，我们就能直接用[Key]来访问某个key对应的值了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11[<span class="string">"uid"</span>]       <span class="comment">// number(11)</span></span><br><span class="line">record11[<span class="string">"favourite"</span>] <span class="comment">// bool(true)</span></span><br><span class="line">record11[<span class="string">"title"</span>]     <span class="comment">// text("Dictionary basics")</span></span><br><span class="line">record11[<span class="string">"invalid"</span>]   <span class="comment">// nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional&lt;RecordType&gt;.Type</span></span><br><span class="line">type(of: record11[<span class="string">"favourite"</span>])</span><br></pre></td></tr></table></figure><p>上面例子中的结果都很直观。但是有一个细节却是值得我们注意的。和Array不同的是，[]用在Dictionary的时候，会返回一个Optional类型来确保这种形式的访问安全。因此，访问不存在的key，并不会导致运行时错误。</p><p>这是因为索引这个概念，对Array和Dictionary来说，是截然不同的。对于Array来说，我们有可能使用的正常索引值只源于Array自身，也就是0..&lt;array.count，因此，如果你使用了不在这个范围里的值，则一定是可以被定性为Bug的，何况，我们之前也看到了，对于Array，我们几乎不需要直接使用索引来访问元素。</p><p>而对于Dictionary来说，它包含的内容并不直接决定我们可以查询的内容。举个例子来说，英汉词典中也可能并不包含我们要查询的单词。所以，Dictionary中包含的所有键值，从语义上说，并不完全决定了它的使用者会查询的值，所以，我们也无法把这类问题明确的归因于是Bug。所以，Swfit为Dictionary的索引查询操作，提供了optional保护。要么得到正确的结果，要么通过nil表示要查询的内容不存在。</p><h2 id="常用的基本属性"><a href="#常用的基本属性" class="headerlink" title="常用的基本属性"></a>常用的基本属性</h2><p>作为一个集合类型，Dictionary同样有count和isEmpty两个属性读取其元素的个数以及判断其是否为空：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11.<span class="built_in">count</span>   <span class="comment">// 4</span></span><br><span class="line">record11.isEmpty <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>另外，我们可以单独访问一个Dictionary的所有keys和所有values：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11.keys</span><br><span class="line">record11.values</span><br></pre></td></tr></table></figure><p>这两个属性也分别是一个集合，我们可以暂时忽略掉它们具体的类型，如果要我们要访问它们的每一个元素，直接用for循环或forEach遍历就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> record11.keys &#123; <span class="built_in">print</span>(key) &#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">record11.keys.forEach &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</span><br></pre></td></tr></table></figure><h2 id="添加、更新和删除元素"><a href="#添加、更新和删除元素" class="headerlink" title="添加、更新和删除元素"></a>添加、更新和删除元素</h2><p>和Array一样，Dictionary也是一个值类型，当我们复制Dictionary对象的时候，就会拷贝Dictionary中的所有内容：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> record10 = record11</span><br></pre></td></tr></table></figure><p>并且，直接使用key就可以访问和修改Dictionary的内容：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10[<span class="string">"favourite"</span>] = .bool(<span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line">record11[<span class="string">"favourite"</span>] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果我们希望更新value的时候，同时获得修改前的值，还可以使用updateValue(_:forKey:)方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10.updateValue(.bool(<span class="literal">true</span>),</span><br><span class="line">    forKey: <span class="string">"favourite"</span>) <span class="comment">// .bool(false)</span></span><br></pre></td></tr></table></figure><p>从上面的结果可以看出修改record10并不会影响record11。</p><p>当我们要在Dictionary中添加元素时，直接给要添加的key赋值就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10[<span class="string">"watchLater"</span>] = .bool(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//  "favourite": RecordType.bool(false),</span></span><br><span class="line"><span class="comment">//  "exp": RecordType.number(100),</span></span><br><span class="line"><span class="comment">//  "title": RecordType.text("Directory basics"),</span></span><br><span class="line"><span class="comment">//  "uid": RecordType.number(11),</span></span><br><span class="line"><span class="comment">//  "watchLater": RecordType.bool(false)</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>这样，record10中的内容，就变成了5项。而当我们要删除特定的key时，直接把它的值设置为nil：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record10[<span class="string">"watchLater"</span>] = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//  "favourite": RecordType.bool(false),</span></span><br><span class="line"><span class="comment">//  "exp": RecordType.number(100),</span></span><br><span class="line"><span class="comment">//  "title": RecordType.text("Directory basics"),</span></span><br><span class="line"><span class="comment">//  "uid": RecordType.number(11)</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>这里，并不是把特定key的值设置为nil（毕竟Dictionary中value部分的类型也不是optional），而是删除特定的key。当某个key的value被设置成nil后，这个key也就从Dictionary中删除了。</p><h2 id="遍历Dictionary"><a href="#遍历Dictionary" class="headerlink" title="遍历Dictionary"></a>遍历Dictionary</h2><p>由于Dictionary同时包含了key和value，因此，我们也有多重方式来遍历Dictionary。最简单的，就是遍历Dictionary中的每一个元素：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (k, v) <span class="keyword">in</span> record10 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(k): \(v)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">record10.forEach &#123; <span class="built_in">print</span>(<span class="string">"\($0): \($1)"</span>) &#125;</span><br></pre></td></tr></table></figure><p>从上面的例子可以看到，遍历Dictionary和遍历Array是类似的。当我们使用for循环遍历时，它的每一个元素都用一个tuple来表示，封装了每一个元素的key和value。而当使用forEach方法时，它会给它的closure参数传递两个值，分别是每一个元素的key和value。<br>[^<em>^]: #  (但是，由于Dictionary是一个无序集合（unordered collection），因此当我们编辑了Dictionary之后，每次遍历，访问元素的顺序都可能是不同的。如果我们希望按照固定的顺序来访问Dictionary中的元素，一个最简单的办法，就是对key排序后，再进行遍历：)<br>[^</em>^]: #  (for key in record10.keys.sorted() {print(“(key): (record10[key])”)})</p><h2 id="合并进不同的设置"><a href="#合并进不同的设置" class="headerlink" title="合并进不同的设置"></a>合并进不同的设置</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RecordType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> bool(<span class="type">Bool</span>)</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> text(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defaultRecord: [<span class="type">String</span>: <span class="type">RecordType</span>] = [</span><br><span class="line">    <span class="string">"uid"</span>: .number(<span class="number">0</span>),</span><br><span class="line">    <span class="string">"exp"</span>: .number(<span class="number">100</span>),</span><br><span class="line">    <span class="string">"favourite"</span>: .bool(<span class="literal">false</span>),</span><br><span class="line">    <span class="string">"title"</span>: .text(<span class="string">""</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样，当创建新纪录时，我们希望保持默认记录中的默认值，同时合并进不同用户的设置，例如：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> template = defaultRecord</span><br><span class="line"><span class="keyword">var</span> record11Patch: [<span class="type">String</span>: <span class="type">RecordType</span>] = [</span><br><span class="line">    <span class="string">"uid"</span>: .number(<span class="number">11</span>),</span><br><span class="line">    <span class="string">"title"</span>: .text(<span class="string">"Common dictionary extensions"</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// How can we do this?</span></span><br><span class="line"><span class="comment">// template.merge(record11Patch)</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    uid: .number(11),</span></span><br><span class="line"><span class="comment">//    "exp": .number(100),</span></span><br><span class="line"><span class="comment">//    "favourite": .bool(false),</span></span><br><span class="line"><span class="comment">//    "title": .text("Common dictionary extensions")</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>然而，该如何实现这个merge呢？最重要的事情，就是要想一下什么内容可以被merge进来。最一般的情况来说，无论任何形式的序列，只要它的元素中key和value的类型和Dictionary相同，就可以进行合并。</p><p>如何在代码中表达这个特征呢？来看下面的例子：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">merge</span>&lt;S:Sequence&gt;<span class="params">(<span class="number">_</span> sequence: S)</span></span></span><br><span class="line">        <span class="keyword">where</span> <span class="type">S</span>.<span class="type">Iterator</span>.<span class="type">Element</span> == (key: <span class="type">Key</span>, value: <span class="type">Value</span>) &#123;</span><br><span class="line"></span><br><span class="line">        sequence.forEach &#123; <span class="keyword">self</span>[$<span class="number">0</span>] = $<span class="number">1</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Dictionary是一个struct，并且merge修改了self，我们必须使用mutating关键字修饰这个方法。而对于sequence参数，我们通过where关键字限定了两个内容：</p><ul><li>S必须遵从Sequence protocol，Dictionary是众多遵从了Sequence protocol的collection类型之一，但是，我们没必要一定只能合并Dictionary；</li><li>S的元素类型必须和原Dictionary的Element相同，其中Key和Value是Dictionary声明中的两个泛型参数；<br>解决了参数问题之后，实现合并的算法就很简单了，我们只是更新self中每一个和sequence有相同key的值就好了。</li></ul><p>这样，之前template.merge(record11Patch)就可以正常工作了。</p><p>既然，我们把merge参数的约束定义为了Sequence，那我们就来看一个合并非Dictionary类型的情况，例如，合并一个包含正确内容的Array：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> record10Patch: [(key: <span class="type">String</span>, value: <span class="type">RecordType</span>)] = [</span><br><span class="line">    (key: <span class="string">"uid"</span>,   value: .number(<span class="number">10</span>)),</span><br><span class="line">    (key: <span class="string">"title"</span>, value: .text(<span class="string">"Common dictionary extensions"</span>))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> template1 = defaultRecord</span><br><span class="line">template1.merge(record10Patch)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    uid: .number(10),</span></span><br><span class="line"><span class="comment">//    "exp": .number(100),</span></span><br><span class="line"><span class="comment">//    "favourite": .bool(false),</span></span><br><span class="line"><span class="comment">//    "title": .text("Common dictionary extensions")</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>在上面的代码里，我们合并了一个tuple数组，它的类型是Array&lt;String, RecordType&gt;，数组中的每一项都包含了一个要合并进来的键值对。如果没有意外，合并Array和Dictionary都应该是可以正常工作的。</p><p>按照我们对merge的实现方式，实际上，任何一个遵从了Sequence protocol的类型，只要它包含了和template相同的元素类型，都是可以merge的。</p><h3 id="用一个tuple数组初始化Dictionary"><a href="#用一个tuple数组初始化Dictionary" class="headerlink" title="用一个tuple数组初始化Dictionary"></a>用一个tuple数组初始化Dictionary</h3><p>理解了merge的实现和用法之后，其实，我们很容易把这个场景进一步扩展下，如果我们可以merge类型兼容的Sequence，那么，用这样的Sequence来初始化一个Dictionary也是可以的，把它看成是和一个空的Dictionary进行合并就好了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>&lt;<span class="type">S</span>:<span class="type">Sequence</span>&gt;(<span class="number">_</span> sequence: <span class="type">S</span>)</span><br><span class="line">        <span class="keyword">where</span> <span class="type">S</span>.<span class="type">Iterator</span>.<span class="type">Element</span> == (key: <span class="type">Key</span>, value: <span class="type">Value</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span> = [:]</span><br><span class="line">        <span class="keyword">self</span>.merge(sequence)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个方法之后，我们直接用下面的代码就可以创建一个新的Dictionary对象：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> record11 = <span class="type">Dictionary</span>(record11Patch)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    uid: .number(11),</span></span><br><span class="line"><span class="comment">//    "title": .text("Common dictionary extensions")</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="定制map的行为"><a href="#定制map的行为" class="headerlink" title="定制map的行为"></a>定制map的行为</h3><p>最后一个要介绍的常用功能，是定制Dictionary.map的行为，默认情况下它返回的是一个Array，例如：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">record11.<span class="built_in">map</span> &#123; $<span class="number">1</span> &#125;</span><br><span class="line"><span class="comment">// [ .number(11).text("Common dictionary extensions")]</span></span><br></pre></td></tr></table></figure><p>在上面的例子里，map返回一个Array<RecordType>，但有时，我们仅仅希望对value做一些变换，而仍旧保持Dictionary的类型。为此，我们可以自定义一个“只map value”的方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">们可以自定义一个“只<span class="built_in">map</span> value”的方法：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapValue</span>&lt;T&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Value)</span></span></span> -&gt; <span class="type">T</span>) -&gt; [<span class="type">Key</span>: <span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Dictionary</span>&lt;<span class="type">Key</span>, <span class="type">T</span>&gt;(<span class="built_in">map</span> &#123; (k, v) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> (k, transform(v))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个实现的最内部，我们用标准库中的map得到了一个Array&lt;(String, RecordType)&gt;类型的Array，而后，由于Array也遵从了Sequence protocol，因此，我们就能直接使用这个Array来定义新的Dictionary了。</p><p>完成之后，用下面的代码测试下：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newRecord11 = record11.mapValue &#123; record -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> record &#123;</span><br><span class="line">    <span class="keyword">case</span> .text(<span class="keyword">let</span> title):</span><br><span class="line">        <span class="keyword">return</span> title</span><br><span class="line">    <span class="keyword">case</span> .number(<span class="keyword">let</span> exp):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(exp)</span><br><span class="line">    <span class="keyword">case</span> .bool(<span class="keyword">let</span> favourite):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(favourite)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    "uid": "11",</span></span><br><span class="line"><span class="comment">//    "title": "Common dictionary extensions"</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line">这样，我们就用record11生成了一个<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt;类型的对象。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dictionary是除了Array之外的另一种非常重要的数据结构，它用于把某种形式的key，关联到某种形式的value。我们来看一个例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://soyl.tech/categories/Swift/"/>
    
    
      <category term="Basis" scheme="https://soyl.tech/tags/Basis/"/>
    
  </entry>
  
</feed>
